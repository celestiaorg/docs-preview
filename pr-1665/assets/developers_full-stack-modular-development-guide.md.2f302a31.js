import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.d72a10ec.js";const u=JSON.parse('{"title":"Full stack modular blockchain development guide","description":"Learn to build a full stack modular dapp.","frontmatter":{"description":"Learn to build a full stack modular dapp.","head":[["meta",{"name":"og:title","content":"Full stack modular blockchain development guide | Celestia Docs"},{"name":"og:description","content":false}]]},"headers":[],"relativePath":"developers/full-stack-modular-development-guide.md","filePath":"developers/full-stack-modular-development-guide.md","lastUpdated":1722970793000}'),p={name:"developers/full-stack-modular-development-guide.md"},o=l(`<h1 id="full-stack-modular-blockchain-development-guide" tabindex="-1">Full stack modular blockchain development guide <a class="header-anchor" href="#full-stack-modular-blockchain-development-guide" aria-label="Permalink to &quot;Full stack modular blockchain development guide&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">Note</p><p>This tutorial needs to be updated</p></div><p>This guide will introduce you to <a href="./../learn/how-celestia-works/introduction">modular blockchains</a> like Celestia, explain their benefits, and show you how to build a full stack modular dapp with React, Vite, RainbowKit, Celestia, and Foundry.</p><p>Current blockchain architectures are not scalable and face challenges around accessibility. In order for blockchains and web3 to reach mass adoption, these challenges must be addressed.</p><p>Blockchains have evolved over time from application-specific networks like Bitcoin to shared smart contract platforms like Ethereum. This guide will cover how to build dapps on these newer, shared platforms.</p><p>If you&#39;re interested in learning more about modular blockchains, or are new to the Celestia ecosystem, we recommend you read the <a href="./build-whatever">build whatever page</a> first.</p><h2 id="getting-started" tabindex="-1">Getting started <a class="header-anchor" href="#getting-started" aria-label="Permalink to &quot;Getting started&quot;">​</a></h2><p>Now that you’ve had an overview of what Celestia is, let’s start building!</p><p>The execution environment that we’ll be leveraging today is Ethermint, an EVM-compatible testnet that you will run locally for this tutorial.</p><h3 id="pre-requisites" tabindex="-1">Pre-requisites <a class="header-anchor" href="#pre-requisites" aria-label="Permalink to &quot;Pre-requisites&quot;">​</a></h3><ul><li><a href="https://github.com/nvm-sh/nvm" target="_blank" rel="noreferrer">Node.js</a></li><li><a href="https://github.com/foundry-rs/foundry" target="_blank" rel="noreferrer">Foundry</a></li><li><a href="https://infura.io" target="_blank" rel="noreferrer">Infura account</a> (for uploading files to IPFS)</li><li><a href="./node-tutorial">A Celestia light node running</a> (to post PFBs from your rollup)</li><li>EVM Tutorial (Coming soon!) - for running your own EVM rollup &amp; deploying your smart contract</li><li><a href="https://metamask.io" target="_blank" rel="noreferrer">MetaMask wallet</a> (for connecting to your frontend)</li></ul><h3 id="project-setup" tabindex="-1">Project setup <a class="header-anchor" href="#project-setup" aria-label="Permalink to &quot;Project setup&quot;">​</a></h3><p>To get started, create a new Foundry project:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">forge</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">celestia-dapp</span></span>
<span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">celestia-dapp</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">forge</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span><span style="color:#24292E;"> </span><span style="color:#032F62;">celestia-dapp</span></span>
<span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">celestia-dapp</span></span></code></pre></div><p>Foundry has created an example smart contract located at <code>src/Contract.sol</code>.</p><h4 id="updating-the-contract-and-tests" tabindex="-1">Updating the contract and tests <a class="header-anchor" href="#updating-the-contract-and-tests" aria-label="Permalink to &quot;Updating the contract and tests&quot;">​</a></h4><p>Let&#39;s update the contracts to include a basic blog example. Create a new file in the <code>src</code> directory named <code>Contract.sol</code> with the following code:</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// SPDX-License-Identifier: MIT</span></span>
<span class="line"><span style="color:#F97583;">pragma</span><span style="color:#E1E4E8;"> </span><span style="color:#85E89D;">solidity</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">^0.8.13</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">contract</span><span style="color:#B392F0;"> Blog</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> name;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">address</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> owner;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">uint</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> _postId;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Post</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">uint</span><span style="color:#E1E4E8;"> id;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> title;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> content;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">bool</span><span style="color:#E1E4E8;"> published;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* mappings can be seen as hash tables */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* here we create lookups for posts by id and posts by ipfs hash */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">mapping</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">uint</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> Post) </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> idToPost;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">mapping</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> Post) </span><span style="color:#F97583;">private</span><span style="color:#E1E4E8;"> hashToPost;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* events facilitate communication between smart contracts and their user interfaces  */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* i.e. we can create listeners for events in the client and also use them in The Graph  */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">event</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PostCreated</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">uint</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">title</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hash</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">event</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PostUpdated</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">uint</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">title</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hash</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">published</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* when the blog is deployed, give it a name */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* also set the creator as the owner of the contract */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">constructor</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">memory</span><span style="color:#E1E4E8;"> _name) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> _name;</span></span>
<span class="line"><span style="color:#E1E4E8;">        owner </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">msg.sender</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* updates the blog name */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">updateName</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">memory</span><span style="color:#E1E4E8;"> _name) </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> _name;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* transfers ownership of the contract to another address */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">transferOwnership</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">address</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">newOwner</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onlyOwner</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        owner </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newOwner;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* fetches an individual post by the content hash */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fetchPost</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">memory</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hash</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">view</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">returns</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">Post</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">memory</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> hashToPost[</span><span style="color:#79B8FF;">hash</span><span style="color:#E1E4E8;">];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* creates a new post */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createPost</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">memory</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">title</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">memory</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hash</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onlyOwner</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        _postId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> _postId </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        Post </span><span style="color:#F97583;">storage</span><span style="color:#E1E4E8;"> post </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> idToPost[_postId];</span></span>
<span class="line"><span style="color:#E1E4E8;">        post.id </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> _postId;</span></span>
<span class="line"><span style="color:#E1E4E8;">        post.title </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> title;</span></span>
<span class="line"><span style="color:#E1E4E8;">        post.published </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        post.content </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hash</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        hashToPost[</span><span style="color:#79B8FF;">hash</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> post;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">emit</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PostCreated</span><span style="color:#E1E4E8;">(_postId, title, </span><span style="color:#79B8FF;">hash</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* updates an existing post */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">updatePost</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">uint</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">postId</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">memory</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">title</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">memory</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hash</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">bool</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">published</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onlyOwner</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Post </span><span style="color:#F97583;">storage</span><span style="color:#E1E4E8;"> post </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">  idToPost[postId];</span></span>
<span class="line"><span style="color:#E1E4E8;">        post.title </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> title;</span></span>
<span class="line"><span style="color:#E1E4E8;">        post.published </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> published;</span></span>
<span class="line"><span style="color:#E1E4E8;">        post.content </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">hash</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        idToPost[postId] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> post;</span></span>
<span class="line"><span style="color:#E1E4E8;">        hashToPost[</span><span style="color:#79B8FF;">hash</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> post;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">emit</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PostUpdated</span><span style="color:#E1E4E8;">(post.id, title, </span><span style="color:#79B8FF;">hash</span><span style="color:#E1E4E8;">, published);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* fetches all posts */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fetchPosts</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">view</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">returns</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">Post</span><span style="color:#E1E4E8;">[] </span><span style="color:#F97583;">memory</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">uint</span><span style="color:#E1E4E8;"> itemCount </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> _postId;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        Post[] </span><span style="color:#F97583;">memory</span><span style="color:#E1E4E8;"> posts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> Post[](itemCount);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">uint</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> itemCount; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#79B8FF;">uint</span><span style="color:#E1E4E8;"> currentId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">            Post </span><span style="color:#F97583;">storage</span><span style="color:#E1E4E8;"> currentItem </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> idToPost[currentId];</span></span>
<span class="line"><span style="color:#E1E4E8;">            posts[i] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> currentItem;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> posts;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* this modifier means only the contract owner can */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* invoke the function */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">modifier</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onlyOwner</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">msg.sender</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> owner);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">_</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// SPDX-License-Identifier: MIT</span></span>
<span class="line"><span style="color:#D73A49;">pragma</span><span style="color:#24292E;"> </span><span style="color:#22863A;">solidity</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">^0.8.13</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">contract</span><span style="color:#6F42C1;"> Blog</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> name;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">address</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> owner;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">uint</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> _postId;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Post</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">uint</span><span style="color:#24292E;"> id;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> title;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> content;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">bool</span><span style="color:#24292E;"> published;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* mappings can be seen as hash tables */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* here we create lookups for posts by id and posts by ipfs hash */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">mapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">uint</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> Post) </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> idToPost;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">mapping</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> Post) </span><span style="color:#D73A49;">private</span><span style="color:#24292E;"> hashToPost;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* events facilitate communication between smart contracts and their user interfaces  */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* i.e. we can create listeners for events in the client and also use them in The Graph  */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">event</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PostCreated</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">uint</span><span style="color:#24292E;"> </span><span style="color:#E36209;">id</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#E36209;">title</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hash</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">event</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PostUpdated</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">uint</span><span style="color:#24292E;"> </span><span style="color:#E36209;">id</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#E36209;">title</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hash</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">bool</span><span style="color:#24292E;"> </span><span style="color:#E36209;">published</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* when the blog is deployed, give it a name */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* also set the creator as the owner of the contract */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">constructor</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">memory</span><span style="color:#24292E;"> _name) {</span></span>
<span class="line"><span style="color:#24292E;">        name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> _name;</span></span>
<span class="line"><span style="color:#24292E;">        owner </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">msg.sender</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* updates the blog name */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">updateName</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">memory</span><span style="color:#24292E;"> _name) </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> _name;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* transfers ownership of the contract to another address */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">transferOwnership</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">address</span><span style="color:#24292E;"> </span><span style="color:#E36209;">newOwner</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onlyOwner</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        owner </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newOwner;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* fetches an individual post by the content hash */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fetchPost</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">memory</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hash</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">view</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">returns</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">Post</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">memory</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> hashToPost[</span><span style="color:#005CC5;">hash</span><span style="color:#24292E;">];</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* creates a new post */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createPost</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">memory</span><span style="color:#24292E;"> </span><span style="color:#E36209;">title</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">memory</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hash</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onlyOwner</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        _postId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> _postId </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        Post </span><span style="color:#D73A49;">storage</span><span style="color:#24292E;"> post </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> idToPost[_postId];</span></span>
<span class="line"><span style="color:#24292E;">        post.id </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> _postId;</span></span>
<span class="line"><span style="color:#24292E;">        post.title </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> title;</span></span>
<span class="line"><span style="color:#24292E;">        post.published </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        post.content </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hash</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        hashToPost[</span><span style="color:#005CC5;">hash</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> post;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">emit</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PostCreated</span><span style="color:#24292E;">(_postId, title, </span><span style="color:#005CC5;">hash</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* updates an existing post */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">updatePost</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">uint</span><span style="color:#24292E;"> </span><span style="color:#E36209;">postId</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">memory</span><span style="color:#24292E;"> </span><span style="color:#E36209;">title</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">memory</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hash</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">bool</span><span style="color:#24292E;"> </span><span style="color:#E36209;">published</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onlyOwner</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        Post </span><span style="color:#D73A49;">storage</span><span style="color:#24292E;"> post </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  idToPost[postId];</span></span>
<span class="line"><span style="color:#24292E;">        post.title </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> title;</span></span>
<span class="line"><span style="color:#24292E;">        post.published </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> published;</span></span>
<span class="line"><span style="color:#24292E;">        post.content </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">hash</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        idToPost[postId] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> post;</span></span>
<span class="line"><span style="color:#24292E;">        hashToPost[</span><span style="color:#005CC5;">hash</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> post;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">emit</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">PostUpdated</span><span style="color:#24292E;">(post.id, title, </span><span style="color:#005CC5;">hash</span><span style="color:#24292E;">, published);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* fetches all posts */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fetchPosts</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">view</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">returns</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">Post</span><span style="color:#24292E;">[] </span><span style="color:#D73A49;">memory</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">uint</span><span style="color:#24292E;"> itemCount </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> _postId;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        Post[] </span><span style="color:#D73A49;">memory</span><span style="color:#24292E;"> posts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> Post[](itemCount);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">uint</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> itemCount; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#005CC5;">uint</span><span style="color:#24292E;"> currentId </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">            Post </span><span style="color:#D73A49;">storage</span><span style="color:#24292E;"> currentItem </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> idToPost[currentId];</span></span>
<span class="line"><span style="color:#24292E;">            posts[i] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> currentItem;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> posts;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* this modifier means only the contract owner can */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* invoke the function */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">modifier</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onlyOwner</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">require</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">msg.sender</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> owner);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">_</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Next, let&#39;s create a test for this contract.</p><p>Open <code>test/Contract.t.sol</code> and update the code with the following:</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// SPDX-License-Identifier: MIT</span></span>
<span class="line"><span style="color:#F97583;">pragma</span><span style="color:#E1E4E8;"> </span><span style="color:#85E89D;">solidity</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">^0.8.13</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;forge-std/Test.sol&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;src/Contract.sol&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">contract</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ContractTest</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Test</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Blog blog;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setUp</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        blog </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Blog</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Celestia Blog&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testCreatePost</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        blog.</span><span style="color:#B392F0;">createPost</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;My first post&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;12345&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Blog.Post[] </span><span style="color:#F97583;">memory</span><span style="color:#E1E4E8;"> posts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> blog.</span><span style="color:#B392F0;">fetchPosts</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">assertEq</span><span style="color:#E1E4E8;">(posts.length, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testUpdatePost</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        blog.</span><span style="color:#B392F0;">createPost</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;My first post&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;12345&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        blog.</span><span style="color:#B392F0;">updatePost</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;My second post&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;12345&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        Blog.Post </span><span style="color:#F97583;">memory</span><span style="color:#E1E4E8;"> updatedPost </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> blog.</span><span style="color:#B392F0;">fetchPost</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;12345&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">assertEq</span><span style="color:#E1E4E8;">(updatedPost.title, </span><span style="color:#9ECBFF;">&quot;My second post&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testFetchPosts</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        Blog.Post[] </span><span style="color:#F97583;">memory</span><span style="color:#E1E4E8;"> posts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> blog.</span><span style="color:#B392F0;">fetchPosts</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">assertEq</span><span style="color:#E1E4E8;">(posts.length, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        blog.</span><span style="color:#B392F0;">createPost</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;My first post&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;12345&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        posts </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> blog.</span><span style="color:#B392F0;">fetchPosts</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">assertEq</span><span style="color:#E1E4E8;">(posts.length, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testOnlyOwner</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        blog.</span><span style="color:#B392F0;">createPost</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;My first post&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;12345&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">address</span><span style="color:#E1E4E8;"> bob </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">address</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0x1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        vm.</span><span style="color:#B392F0;">startPrank</span><span style="color:#E1E4E8;">(bob);</span></span>
<span class="line"><span style="color:#E1E4E8;">        vm.</span><span style="color:#B392F0;">expectRevert</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        blog.</span><span style="color:#B392F0;">updatePost</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;My second post&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;12345&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// SPDX-License-Identifier: MIT</span></span>
<span class="line"><span style="color:#D73A49;">pragma</span><span style="color:#24292E;"> </span><span style="color:#22863A;">solidity</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">^0.8.13</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;forge-std/Test.sol&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;src/Contract.sol&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">contract</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ContractTest</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    Blog blog;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setUp</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        blog </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Blog</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Celestia Blog&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testCreatePost</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        blog.</span><span style="color:#6F42C1;">createPost</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;My first post&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;12345&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Blog.Post[] </span><span style="color:#D73A49;">memory</span><span style="color:#24292E;"> posts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> blog.</span><span style="color:#6F42C1;">fetchPosts</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">assertEq</span><span style="color:#24292E;">(posts.length, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testUpdatePost</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        blog.</span><span style="color:#6F42C1;">createPost</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;My first post&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;12345&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        blog.</span><span style="color:#6F42C1;">updatePost</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;My second post&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;12345&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        Blog.Post </span><span style="color:#D73A49;">memory</span><span style="color:#24292E;"> updatedPost </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> blog.</span><span style="color:#6F42C1;">fetchPost</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;12345&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">assertEq</span><span style="color:#24292E;">(updatedPost.title, </span><span style="color:#032F62;">&quot;My second post&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testFetchPosts</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        Blog.Post[] </span><span style="color:#D73A49;">memory</span><span style="color:#24292E;"> posts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> blog.</span><span style="color:#6F42C1;">fetchPosts</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">assertEq</span><span style="color:#24292E;">(posts.length, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        blog.</span><span style="color:#6F42C1;">createPost</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;My first post&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;12345&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        posts </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> blog.</span><span style="color:#6F42C1;">fetchPosts</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">assertEq</span><span style="color:#24292E;">(posts.length, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testOnlyOwner</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        blog.</span><span style="color:#6F42C1;">createPost</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;My first post&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;12345&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">address</span><span style="color:#24292E;"> bob </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">address</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0x1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        vm.</span><span style="color:#6F42C1;">startPrank</span><span style="color:#24292E;">(bob);</span></span>
<span class="line"><span style="color:#24292E;">        vm.</span><span style="color:#6F42C1;">expectRevert</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        blog.</span><span style="color:#6F42C1;">updatePost</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;My second post&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;12345&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Foundry uses <a href="https://book.getfoundry.sh/reference/ds-test.html" target="_blank" rel="noreferrer">Dappsys Test</a> to provide basic logging and assertion functionality. It&#39;s included in the Forge Standard Library.</p><p>Here, we are using <code>assertEq</code> to assert equality. You can <a href="https://book.getfoundry.sh/reference/ds-test.html?highlight=log_int#asserting" target="_blank" rel="noreferrer">view all of the assertion functions available</a>.</p><h4 id="running-the-test" tabindex="-1">Running the test <a class="header-anchor" href="#running-the-test" aria-label="Permalink to &quot;Running the test&quot;">​</a></h4><p>We can now run our tests to make sure our contract is working properly:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">forge</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-vv</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">forge</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-vv</span></span></code></pre></div><h4 id="updating-the-deployment-script" tabindex="-1">Updating the deployment script <a class="header-anchor" href="#updating-the-deployment-script" aria-label="Permalink to &quot;Updating the deployment script&quot;">​</a></h4><p>Now that we&#39;ve tested the contract, let&#39;s try deploying it locally using <a href="https://book.getfoundry.sh/tutorials/solidity-scripting.html" target="_blank" rel="noreferrer">Solidity Scripting</a>.</p><p>To do so, update the deployment script at <code>script/Contract.s.sol</code> with the following code:</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// SPDX-License-Identifier: MIT</span></span>
<span class="line"><span style="color:#F97583;">pragma</span><span style="color:#E1E4E8;"> </span><span style="color:#85E89D;">solidity</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">^0.8.13</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;forge-std/Script.sol&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {</span><span style="color:#B392F0;">Blog</span><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;src/Contract.sol&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">contract</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ContractScript</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Script</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setUp</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">run</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        vm.</span><span style="color:#B392F0;">startBroadcast</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Blog</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Celestia Blog&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        vm.</span><span style="color:#B392F0;">stopBroadcast</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// SPDX-License-Identifier: MIT</span></span>
<span class="line"><span style="color:#D73A49;">pragma</span><span style="color:#24292E;"> </span><span style="color:#22863A;">solidity</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">^0.8.13</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;forge-std/Script.sol&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> {</span><span style="color:#6F42C1;">Blog</span><span style="color:#24292E;">} </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;src/Contract.sol&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">contract</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ContractScript</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Script</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setUp</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">run</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        vm.</span><span style="color:#6F42C1;">startBroadcast</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Blog</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Celestia Blog&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        vm.</span><span style="color:#6F42C1;">stopBroadcast</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Now we can use this script to deploy our smart contract to either a live or test network.</p><h4 id="deploying-locally" tabindex="-1">Deploying locally <a class="header-anchor" href="#deploying-locally" aria-label="Permalink to &quot;Deploying locally&quot;">​</a></h4><p>Next start Anvil, the local testnet:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">anvil</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--port</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">9545</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">anvil</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--port</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">9545</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">caution</p><p>We need to use port 9545, because Ethermint will use 8545.</p></div><p>Once started, Anvil will give you a local RPC endpoint as well as a handful of Private Keys and Accounts that you can use.</p><p>We can now use the local RPC along with one of the private keys to deploy locally:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">forge</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">script/Contract.s.sol:ContractScript</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--fork-url</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">http://localhost:9545 </span><span style="color:#79B8FF;">--private-key</span><span style="color:#E1E4E8;"> $PRIVATE_KEY </span><span style="color:#79B8FF;">--broadcast</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">forge</span><span style="color:#24292E;"> </span><span style="color:#032F62;">script</span><span style="color:#24292E;"> </span><span style="color:#032F62;">script/Contract.s.sol:ContractScript</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--fork-url</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">http://localhost:9545 </span><span style="color:#005CC5;">--private-key</span><span style="color:#24292E;"> $PRIVATE_KEY </span><span style="color:#005CC5;">--broadcast</span></span></code></pre></div><p>Once the contract has been deployed locally, Anvil will log out the contract address.</p><p><strong>Take a note of this local contract address as we’ll be using it later in the frontend application.</strong></p><p>Next, set the contract address as an environment variable:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> CONTRACT_ADDRESS</span><span style="color:#F97583;">=&lt;</span><span style="color:#9ECBFF;">contract-addres</span><span style="color:#E1E4E8;">s</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> CONTRACT_ADDRESS</span><span style="color:#D73A49;">=&lt;</span><span style="color:#032F62;">contract-addres</span><span style="color:#24292E;">s</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>We can then test sending transactions to it with <code>cast send</code>.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">cast</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">send</span><span style="color:#E1E4E8;"> $CONTRACT_ADDRESS </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;createPost(string,string)&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;my first post&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;12345&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">--private-key $PRIVATE_KEY</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">cast</span><span style="color:#24292E;"> </span><span style="color:#032F62;">send</span><span style="color:#24292E;"> $CONTRACT_ADDRESS </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#032F62;">&quot;createPost(string,string)&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;my first post&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;12345&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">--private-key $PRIVATE_KEY</span></span></code></pre></div><p>We can then perform read operations with <code>cast call</code>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">cast</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">call</span><span style="color:#E1E4E8;"> $CONTRACT_ADDRESS </span><span style="color:#9ECBFF;">&quot;fetchPosts()&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">cast</span><span style="color:#24292E;"> </span><span style="color:#032F62;">call</span><span style="color:#24292E;"> $CONTRACT_ADDRESS </span><span style="color:#032F62;">&quot;fetchPosts()&quot;</span></span></code></pre></div><p>Once the contract is deployed successfully, <strong>take a note of the contract address as we’ll also be needing it in just a moment when we test the live contract</strong>.</p><h3 id="deploying-to-the-ethermint-sovereign-rollup" tabindex="-1">Deploying to the Ethermint Sovereign Rollup <a class="header-anchor" href="#deploying-to-the-ethermint-sovereign-rollup" aria-label="Permalink to &quot;Deploying to the Ethermint Sovereign Rollup&quot;">​</a></h3><p>First, we will need to follow the setup from the EVM tutorial.</p><div class="danger custom-block"><p class="custom-block-title">Pre-requisites</p><p>It is required that you complete dependency setup, Rollkit installation, and Instantiating and EVM rollup from the EVM tutorial to complete the remainder of the tutorial.</p></div><p>Now that we&#39;ve deployed and tested locally, we can deploy to our Ethermint chain.</p><p>First, we will need to export the private key generated by the ethermint <code>init.sh</code> script:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">PRIVATE_KEY</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">$(</span><span style="color:#B392F0;">ethermintd</span><span style="color:#9ECBFF;"> keys unsafe-export-eth-key mykey </span><span style="color:#79B8FF;">--keyring-backend</span><span style="color:#9ECBFF;"> test)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">PRIVATE_KEY</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">$(</span><span style="color:#6F42C1;">ethermintd</span><span style="color:#032F62;"> keys unsafe-export-eth-key mykey </span><span style="color:#005CC5;">--keyring-backend</span><span style="color:#032F62;"> test)</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>Here, the key name from <code>init.sh</code> is <code>mykey</code> but you can modify the <code>init.sh</code> to change the name of your key.</p></div><p>Now, we can start deploying the smart contract to our Ethermint chain.</p><p>To do so, run the following script in the <code>celestia-dapp</code> directory:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">forge</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">script</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">script/Contract.s.sol:ContractScript</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">--rpc-url </span><span style="color:#9ECBFF;">http://localhost:8545</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--private-key</span><span style="color:#E1E4E8;"> $PRIVATE_KEY </span><span style="color:#79B8FF;">--broadcast</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">forge</span><span style="color:#24292E;"> </span><span style="color:#032F62;">script</span><span style="color:#24292E;"> </span><span style="color:#032F62;">script/Contract.s.sol:ContractScript</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">--rpc-url </span><span style="color:#032F62;">http://localhost:8545</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--private-key</span><span style="color:#24292E;"> $PRIVATE_KEY </span><span style="color:#005CC5;">--broadcast</span></span></code></pre></div><p>Set the contract address in the output as the <code>CONTRACT_ADDRESS</code> variable:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> CONTRACT_ADDRESS</span><span style="color:#F97583;">=&lt;</span><span style="color:#9ECBFF;">new-contract-addres</span><span style="color:#E1E4E8;">s</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> CONTRACT_ADDRESS</span><span style="color:#D73A49;">=&lt;</span><span style="color:#032F62;">new-contract-addres</span><span style="color:#24292E;">s</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>Once the contract has been deployed to the Ethermint rollup, we can use <code>cast send</code> to test sending transactions to it:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">cast</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">send</span><span style="color:#E1E4E8;"> $CONTRACT_ADDRESS </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#9ECBFF;">&quot;createPost(string,string)&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;my first post&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;12345&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">--rpc-url </span><span style="color:#9ECBFF;">http://localhost:8545</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--private-key</span><span style="color:#E1E4E8;"> $PRIVATE_KEY</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">cast</span><span style="color:#24292E;"> </span><span style="color:#032F62;">send</span><span style="color:#24292E;"> $CONTRACT_ADDRESS </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#032F62;">&quot;createPost(string,string)&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;my first post&quot;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;12345&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">--rpc-url </span><span style="color:#032F62;">http://localhost:8545</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--private-key</span><span style="color:#24292E;"> $PRIVATE_KEY</span></span></code></pre></div><p>We can then perform read operations with <code>cast call</code>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">cast</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">call</span><span style="color:#E1E4E8;"> $CONTRACT_ADDRESS </span><span style="color:#9ECBFF;">&quot;fetchPosts()&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--rpc-url</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">http://localhost:8545</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">cast</span><span style="color:#24292E;"> </span><span style="color:#032F62;">call</span><span style="color:#24292E;"> $CONTRACT_ADDRESS </span><span style="color:#032F62;">&quot;fetchPosts()&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--rpc-url</span><span style="color:#24292E;"> </span><span style="color:#032F62;">http://localhost:8545</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>You will want to redeploy the contract for your frontend, because the post is not uploaded to IPFS in the CLI.</p></div><h3 id="building-the-frontend" tabindex="-1">Building the frontend <a class="header-anchor" href="#building-the-frontend" aria-label="Permalink to &quot;Building the frontend&quot;">​</a></h3><p>For the frontend project, we’ll be using the following libraries and frameworks:</p><p><a href="https://reactjs.org" target="_blank" rel="noreferrer">React</a> - JavaScript library for building user interfaces</p><p><a href="https://vitejs.dev" target="_blank" rel="noreferrer">Vite</a> - Project generator / rapid development tool for modern web projects</p><p><a href="https://www.rainbowkit.com" target="_blank" rel="noreferrer">Rainbowkit</a> - Easy and beautiful library to connect a wallet</p><p><a href="https://github.com/wagmi-dev/wagmi" target="_blank" rel="noreferrer">WAGMI</a> - 20+ hooks for working with wallets, ENS, contracts, transactions, signing, etc</p><p>In the root of the Foundry project, create a new React.js application using <a href="https://vitejs.dev" target="_blank" rel="noreferrer">Vite</a>:</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">yarn create vite</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> Project name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> › frontend</span></span>
<span class="line"><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> Select a framework › React</span></span>
<span class="line"><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> Select a variant </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> JavaScript</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">yarn create vite</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">?</span><span style="color:#24292E;"> Project name</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> › frontend</span></span>
<span class="line"><span style="color:#D73A49;">?</span><span style="color:#24292E;"> Select a framework › React</span></span>
<span class="line"><span style="color:#D73A49;">?</span><span style="color:#24292E;"> Select a variant </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> JavaScript</span></span></code></pre></div><p>Next, copy the ABI that was created by Foundry into the <code>frontend</code> directory so that we can have it later (or manually copy it into a file named <code>Blog.json</code> in the <code>frontend</code> directory):</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">cp</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">out/Contract.sol/Blog.json</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">frontend/</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">cp</span><span style="color:#24292E;"> </span><span style="color:#032F62;">out/Contract.sol/Blog.json</span><span style="color:#24292E;"> </span><span style="color:#032F62;">frontend/</span></span></code></pre></div><p>Now, change into the <code>frontend</code> directory and install the <code>node_modules</code>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">frontend</span></span>
<span class="line"><span style="color:#B392F0;">yarn</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">frontend</span></span>
<span class="line"><span style="color:#6F42C1;">yarn</span></span></code></pre></div><h4 id="configuring-environment-variables" tabindex="-1">Configuring environment variables <a class="header-anchor" href="#configuring-environment-variables" aria-label="Permalink to &quot;Configuring environment variables&quot;">​</a></h4><p>Next we need to configure the environment variables for the Infura project ID and secret.</p><p>First, create an Infura account and new project for IPFS.</p><p>Create a file named <code>.env.local</code> in the <code>frontend/</code> directory and add the following configuration with your own credentials:</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">VITE_INFURA_ID=your-project-api-key</span></span>
<span class="line"><span style="color:#e1e4e8;">VITE_INFURA_SECRET=your-project-api-key-secret</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">VITE_INFURA_ID=your-project-api-key</span></span>
<span class="line"><span style="color:#24292e;">VITE_INFURA_SECRET=your-project-api-key-secret</span></span></code></pre></div><p>Now that the project is created, let’s install the additional dependencies using either <strong>NPM</strong>, <strong>Yarn</strong>, or <strong>PNPM</strong>:</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">npm install @rainbow</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">me</span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;">rainbowkit@</span><span style="color:#79B8FF;">0.8</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> wagmi@</span><span style="color:#79B8FF;">0.8</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> ethers ipfs</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">http</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">client react</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">markdown</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">npm install @rainbow</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">me</span><span style="color:#D73A49;">/</span><span style="color:#24292E;">rainbowkit@</span><span style="color:#005CC5;">0.8</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> wagmi@</span><span style="color:#005CC5;">0.8</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> ethers ipfs</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">http</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">client react</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">markdown</span></span></code></pre></div><h3 id="configuring-the-entrypoint" tabindex="-1">Configuring the entrypoint <a class="header-anchor" href="#configuring-the-entrypoint" aria-label="Permalink to &quot;Configuring the entrypoint&quot;">​</a></h3><p>Next we’ll update the entrypoint at <code>src/main.jsx</code>.</p><p>The main things we’re doing here have to do with the configuration of Rainbowkit so that we can have a nice way for the user to connect their wallet.</p><p>Rainbowkit also allows a customizable array of network providers, so we’re creating a new network configuration for <code>Ethermint</code>.</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./polyfills&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> ReactDOM </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;react-dom/client&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> App </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./App&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./index.css&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@rainbow-me/rainbowkit/styles.css&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { RainbowKitProvider } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@rainbow-me/rainbowkit&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { chain, configureChains, createClient, WagmiConfig } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;wagmi&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { publicProvider } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;wagmi/providers/public&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { injectedWallet, metaMaskWallet } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@rainbow-me/rainbowkit/wallets&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { connectorsForWallets } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@rainbow-me/rainbowkit&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* create configuration for Ethermint testnet */</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ethermint</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  id: </span><span style="color:#79B8FF;">9000</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  name: </span><span style="color:#9ECBFF;">&quot;Ethermint&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  network: </span><span style="color:#9ECBFF;">&quot;ethermint&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  nativeCurrency: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    decimals: </span><span style="color:#79B8FF;">18</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&quot;Ethermint&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    symbol: </span><span style="color:#9ECBFF;">&quot;CTE&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  rpcUrls: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    default: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      http: [</span><span style="color:#9ECBFF;">&quot;http://localhost:8545/&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  testnet: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// remove chain.localhost or ethermint depending on which you want to connect to</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">chains</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">provider</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">configureChains</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  [chain.localhost, ethermint],</span></span>
<span class="line"><span style="color:#E1E4E8;">  [</span><span style="color:#B392F0;">publicProvider</span><span style="color:#E1E4E8;">()],</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">connectors</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">connectorsForWallets</span><span style="color:#E1E4E8;">([</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    groupName: </span><span style="color:#9ECBFF;">&quot;Recommended&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    wallets: [</span><span style="color:#B392F0;">metaMaskWallet</span><span style="color:#E1E4E8;">({ chains }), </span><span style="color:#B392F0;">injectedWallet</span><span style="color:#E1E4E8;">({ chains })],</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">wagmiClient</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createClient</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  autoConnect: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  connectors,</span></span>
<span class="line"><span style="color:#E1E4E8;">  provider,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">containerStyle</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  width: </span><span style="color:#9ECBFF;">&quot;900px&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  margin: </span><span style="color:#9ECBFF;">&quot;0 auto&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ReactDOM.</span><span style="color:#B392F0;">createRoot</span><span style="color:#E1E4E8;">(document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;root&quot;</span><span style="color:#E1E4E8;">)).</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;</span><span style="color:#79B8FF;">WagmiConfig</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">client</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{wagmiClient}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#79B8FF;">RainbowKitProvider</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">chains</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{chains}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">style</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{containerStyle}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#79B8FF;">App</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#79B8FF;">RainbowKitProvider</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  &lt;/</span><span style="color:#79B8FF;">WagmiConfig</span><span style="color:#E1E4E8;">&gt;,</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./polyfills&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> ReactDOM </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;react-dom/client&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> App </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./App&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./index.css&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@rainbow-me/rainbowkit/styles.css&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { RainbowKitProvider } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@rainbow-me/rainbowkit&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { chain, configureChains, createClient, WagmiConfig } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;wagmi&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { publicProvider } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;wagmi/providers/public&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { injectedWallet, metaMaskWallet } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@rainbow-me/rainbowkit/wallets&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { connectorsForWallets } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@rainbow-me/rainbowkit&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* create configuration for Ethermint testnet */</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ethermint</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  id: </span><span style="color:#005CC5;">9000</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&quot;Ethermint&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  network: </span><span style="color:#032F62;">&quot;ethermint&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  nativeCurrency: {</span></span>
<span class="line"><span style="color:#24292E;">    decimals: </span><span style="color:#005CC5;">18</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&quot;Ethermint&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    symbol: </span><span style="color:#032F62;">&quot;CTE&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  rpcUrls: {</span></span>
<span class="line"><span style="color:#24292E;">    default: {</span></span>
<span class="line"><span style="color:#24292E;">      http: [</span><span style="color:#032F62;">&quot;http://localhost:8545/&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  testnet: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// remove chain.localhost or ethermint depending on which you want to connect to</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">chains</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">provider</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">configureChains</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  [chain.localhost, ethermint],</span></span>
<span class="line"><span style="color:#24292E;">  [</span><span style="color:#6F42C1;">publicProvider</span><span style="color:#24292E;">()],</span></span>
<span class="line"><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">connectors</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">connectorsForWallets</span><span style="color:#24292E;">([</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    groupName: </span><span style="color:#032F62;">&quot;Recommended&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    wallets: [</span><span style="color:#6F42C1;">metaMaskWallet</span><span style="color:#24292E;">({ chains }), </span><span style="color:#6F42C1;">injectedWallet</span><span style="color:#24292E;">({ chains })],</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">wagmiClient</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createClient</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  autoConnect: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  connectors,</span></span>
<span class="line"><span style="color:#24292E;">  provider,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">containerStyle</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  width: </span><span style="color:#032F62;">&quot;900px&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  margin: </span><span style="color:#032F62;">&quot;0 auto&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">ReactDOM.</span><span style="color:#6F42C1;">createRoot</span><span style="color:#24292E;">(document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;root&quot;</span><span style="color:#24292E;">)).</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  &lt;</span><span style="color:#005CC5;">WagmiConfig</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">client</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{wagmiClient}&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#005CC5;">RainbowKitProvider</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">chains</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{chains}&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">style</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{containerStyle}&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#005CC5;">App</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#005CC5;">RainbowKitProvider</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  &lt;/</span><span style="color:#005CC5;">WagmiConfig</span><span style="color:#24292E;">&gt;,</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="creating-and-reading-posts" tabindex="-1">Creating and reading posts <a class="header-anchor" href="#creating-and-reading-posts" aria-label="Permalink to &quot;Creating and reading posts&quot;">​</a></h3><p>Now that the base configuration is set up we’ll create a view that allows users to create and view posts.</p><p>We’ll be using IPFS to upload the content of the post, then anchoring the hash of the post on chain. When we retrieve the post, we can then read the value from IPFS to view the post.</p><p>Update App.jsx with the following code:</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useState, useEffect } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;react&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ConnectButton } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;@rainbow-me/rainbowkit&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { ethers } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;ethers&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { create } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;ipfs-http-client&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Buffer } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;buffer&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Blog </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;../Blog.json&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { useAccount } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;wagmi&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* configure authorization for Infura and IPFS */</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">auth</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;Basic &quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span></span>
<span class="line"><span style="color:#E1E4E8;">  Buffer.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">meta</span><span style="color:#E1E4E8;">.env.</span><span style="color:#79B8FF;">VITE_INFURA_ID</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;:&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">import</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">meta</span><span style="color:#E1E4E8;">.env.</span><span style="color:#79B8FF;">VITE_INFURA_SECRET</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  ).</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;base64&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* create an IPFS client */</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">client</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  host: </span><span style="color:#9ECBFF;">&quot;ipfs.infura.io&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  port: </span><span style="color:#79B8FF;">5001</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  protocol: </span><span style="color:#9ECBFF;">&quot;https&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  headers: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    authorization: auth,</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">contractAddress</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;your-ethermint-contract-address&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">App</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">useEffect</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">fetchPosts</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }, []);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">viewState</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">setViewState</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useState</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;view-posts&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">posts</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">setPosts</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useState</span><span style="color:#E1E4E8;">([]);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">title</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">setTitle</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useState</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">content</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">setContent</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useState</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">address</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useAccount</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/* when the component loads, useEffect will call this function */</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fetchPosts</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">provider</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ethers.providers.</span><span style="color:#B392F0;">Web3Provider</span><span style="color:#E1E4E8;">(window.ethereum);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">contract</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ethers.</span><span style="color:#B392F0;">Contract</span><span style="color:#E1E4E8;">(contractAddress, Blog.abi, provider);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> contract.</span><span style="color:#B392F0;">fetchPosts</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* once the data is returned from the network we map over it and */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* transform the data into a more readable format  */</span></span>
<span class="line"><span style="color:#E1E4E8;">    data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">d</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> ({</span></span>
<span class="line"><span style="color:#E1E4E8;">      content: d[</span><span style="color:#9ECBFF;">&quot;content&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">      title: d[</span><span style="color:#9ECBFF;">&quot;title&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">      published: d[</span><span style="color:#9ECBFF;">&quot;published&quot;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">      id: d[</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">].</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">    }));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* we then fetch the post content from IPFS and add it to the post objects */</span></span>
<span class="line"><span style="color:#E1E4E8;">    data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">all</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">      data.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">d</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">endpoint</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`https://infura-ipfs.io/ipfs/\${</span><span style="color:#E1E4E8;">d</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">content</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">options</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          mode: </span><span style="color:#9ECBFF;">&quot;no-cors&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        };</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">response</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">fetch</span><span style="color:#E1E4E8;">(endpoint, options);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> response.</span><span style="color:#B392F0;">text</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        d.postContent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> d;</span></span>
<span class="line"><span style="color:#E1E4E8;">      }),</span></span>
<span class="line"><span style="color:#E1E4E8;">    );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setPosts</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createPost</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">added</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> client.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(content);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">provider</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ethers.providers.</span><span style="color:#B392F0;">Web3Provider</span><span style="color:#E1E4E8;">(window.ethereum);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">signer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> provider.</span><span style="color:#B392F0;">getSigner</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">contract</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> ethers.</span><span style="color:#B392F0;">Contract</span><span style="color:#E1E4E8;">(contractAddress, Blog.abi, signer);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">tx</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> contract.</span><span style="color:#B392F0;">createPost</span><span style="color:#E1E4E8;">(title, added.path);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> tx.</span><span style="color:#B392F0;">wait</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setViewState</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;view-posts&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toggleView</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">setViewState</span><span style="color:#E1E4E8;">(value);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (value </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;view-posts&quot;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#B392F0;">fetchPosts</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">style</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{outerContainerStyle}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">style</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{innerContainerStyle}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;Modular Rollup Blog&lt;/</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          This allows users to securely create and share blog posts on the</span></span>
<span class="line"><span style="color:#E1E4E8;">          blockchain without the need for a centralized server or authority.</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">address </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">          &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">h3</span><span style="color:#E1E4E8;">&gt;Getting Started&lt;/</span><span style="color:#85E89D;">h3</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">              First, you will need to connect your Ethereum wallet to Ethermint</span></span>
<span class="line"><span style="color:#E1E4E8;">              to display the posts from the smart contract and make posts.</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        ) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">br</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">h3</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">style</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{{ justifyContent: </span><span style="color:#9ECBFF;">&quot;right&quot;</span><span style="color:#E1E4E8;">, textAlign: </span><span style="color:#9ECBFF;">&quot;right&quot;</span><span style="color:#E1E4E8;"> }}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          Connect your Ethereum wallet to begin ✨</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">h3</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">style</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{buttonContainerStyle}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          &lt;</span><span style="color:#79B8FF;">ConnectButton</span><span style="color:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        {address </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">          &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">style</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{buttonContainerStyle}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">button</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#B392F0;">onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toggleView</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;view-posts&quot;</span><span style="color:#E1E4E8;">)}</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#B392F0;">style</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{buttonStyle}</span></span>
<span class="line"><span style="color:#E1E4E8;">            &gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">              View Posts</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">button</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#B392F0;">onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">toggleView</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;create-post&quot;</span><span style="color:#E1E4E8;">)}</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#B392F0;">style</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{buttonStyle}</span></span>
<span class="line"><span style="color:#E1E4E8;">            &gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">              Create Post</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        ) </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">        {viewState </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;view-posts&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> address </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">          &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">style</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{postContainerStyle}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">              &lt;</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;Posts&lt;/</span><span style="color:#85E89D;">h1</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">              {posts.</span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">post</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">index</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">                &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">key</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{index}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                  &lt;</span><span style="color:#85E89D;">h2</span><span style="color:#E1E4E8;">&gt;{post.title}&lt;/</span><span style="color:#85E89D;">h2</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                  &lt;</span><span style="color:#85E89D;">button</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">style</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{{ fontSize: </span><span style="color:#9ECBFF;">&quot;16px&quot;</span><span style="color:#E1E4E8;"> }}</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{() </span><span style="color:#F97583;">=&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                      window.</span><span style="color:#B392F0;">open</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`https://infura-ipfs.io/ipfs/\${</span><span style="color:#E1E4E8;">post</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">content</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">                  &gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                    Read on IPFS</span></span>
<span class="line"><span style="color:#E1E4E8;">                  &lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                  {</span><span style="color:#6A737D;">/* &lt;ReactMarkdown&gt;</span></span>
<span class="line"><span style="color:#6A737D;">                    {post.postContent}</span></span>
<span class="line"><span style="color:#6A737D;">                  &lt;/ReactMarkdown&gt; */</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">                  &lt;</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">style</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{mbidStyle}&gt;GMID: {post.id}&lt;/</span><span style="color:#85E89D;">p</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">                &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">              ))}</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        )}</span></span>
<span class="line"><span style="color:#E1E4E8;">        {viewState </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;create-post&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">          &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">style</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{formContainerStyle}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">h2</span><span style="color:#E1E4E8;">&gt;Create Post&lt;/</span><span style="color:#85E89D;">h2</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">input</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#B392F0;">placeholder</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Title&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#B392F0;">onChange</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{(</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setTitle</span><span style="color:#E1E4E8;">(e.target.value)}</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#B392F0;">style</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{inputStyle}</span></span>
<span class="line"><span style="color:#E1E4E8;">            /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">textarea</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#B392F0;">placeholder</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;Content&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#B392F0;">onChange</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{(</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setContent</span><span style="color:#E1E4E8;">(e.target.value)}</span></span>
<span class="line"><span style="color:#E1E4E8;">              </span><span style="color:#B392F0;">style</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{inputStyle}</span></span>
<span class="line"><span style="color:#E1E4E8;">            /&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">            &lt;</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">onClick</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{createPost}&gt;Create Post&lt;/</span><span style="color:#85E89D;">button</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">          &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        )}</span></span>
<span class="line"><span style="color:#E1E4E8;">      &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">outerContainerStyle</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  width: </span><span style="color:#9ECBFF;">&quot;90vw&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  height: </span><span style="color:#9ECBFF;">&quot;100vh&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  padding: </span><span style="color:#9ECBFF;">&quot;50px 0px&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">innerContainerStyle</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  width: </span><span style="color:#9ECBFF;">&quot;100%&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  maxWidth: </span><span style="color:#9ECBFF;">&quot;800px&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  margin: </span><span style="color:#9ECBFF;">&quot;0 auto&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">formContainerStyle</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  display: </span><span style="color:#9ECBFF;">&quot;flex&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  flexDirection: </span><span style="color:#9ECBFF;">&quot;column&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  alignItems: </span><span style="color:#9ECBFF;">&quot;center&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">inputStyle</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  width: </span><span style="color:#9ECBFF;">&quot;400px&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  marginBottom: </span><span style="color:#9ECBFF;">&quot;10px&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  padding: </span><span style="color:#9ECBFF;">&quot;10px&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  height: </span><span style="color:#9ECBFF;">&quot;40px&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">postContainerStyle</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  margin: </span><span style="color:#9ECBFF;">&quot;0 auto&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  padding: </span><span style="color:#9ECBFF;">&quot;1em&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  width: </span><span style="color:#9ECBFF;">&quot;90%&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  maxWidth: </span><span style="color:#9ECBFF;">&quot;800px&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  display: </span><span style="color:#9ECBFF;">&quot;flex&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  flexDirection: </span><span style="color:#9ECBFF;">&quot;column&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  alignItems: </span><span style="color:#9ECBFF;">&quot;start&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  justifyContent: </span><span style="color:#9ECBFF;">&quot;center&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mbidStyle</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  fontSize: </span><span style="color:#9ECBFF;">&quot;10px&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  textAlign: </span><span style="color:#9ECBFF;">&quot;start&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">buttonStyle</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  marginTop: </span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  marginRight: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  border: </span><span style="color:#9ECBFF;">&quot;1px solid rgba(255, 255, 255, .2)&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">buttonContainerStyle</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  marginTop: </span><span style="color:#79B8FF;">15</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  marginRight: </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  display: </span><span style="color:#9ECBFF;">&quot;flex&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  justifyContent: </span><span style="color:#9ECBFF;">&quot;right&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> App;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { useState, useEffect } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;react&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { ConnectButton } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;@rainbow-me/rainbowkit&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { ethers } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;ethers&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { create } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;ipfs-http-client&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Buffer } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;buffer&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Blog </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;../Blog.json&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { useAccount } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;wagmi&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* configure authorization for Infura and IPFS */</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">auth</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;Basic &quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span></span>
<span class="line"><span style="color:#24292E;">  Buffer.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">import</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">meta</span><span style="color:#24292E;">.env.</span><span style="color:#005CC5;">VITE_INFURA_ID</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;:&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">import</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">meta</span><span style="color:#24292E;">.env.</span><span style="color:#005CC5;">VITE_INFURA_SECRET</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  ).</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;base64&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* create an IPFS client */</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">client</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  host: </span><span style="color:#032F62;">&quot;ipfs.infura.io&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  port: </span><span style="color:#005CC5;">5001</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  protocol: </span><span style="color:#032F62;">&quot;https&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  headers: {</span></span>
<span class="line"><span style="color:#24292E;">    authorization: auth,</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">contractAddress</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;your-ethermint-contract-address&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">App</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">useEffect</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">fetchPosts</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }, []);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">viewState</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">setViewState</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useState</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;view-posts&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">posts</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">setPosts</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useState</span><span style="color:#24292E;">([]);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">title</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">setTitle</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useState</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">content</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">setContent</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useState</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">address</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useAccount</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/* when the component loads, useEffect will call this function */</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fetchPosts</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">provider</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ethers.providers.</span><span style="color:#6F42C1;">Web3Provider</span><span style="color:#24292E;">(window.ethereum);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">contract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ethers.</span><span style="color:#6F42C1;">Contract</span><span style="color:#24292E;">(contractAddress, Blog.abi, provider);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> contract.</span><span style="color:#6F42C1;">fetchPosts</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* once the data is returned from the network we map over it and */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* transform the data into a more readable format  */</span></span>
<span class="line"><span style="color:#24292E;">    data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> data.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">d</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> ({</span></span>
<span class="line"><span style="color:#24292E;">      content: d[</span><span style="color:#032F62;">&quot;content&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">      title: d[</span><span style="color:#032F62;">&quot;title&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">      published: d[</span><span style="color:#032F62;">&quot;published&quot;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">      id: d[</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">].</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">    }));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* we then fetch the post content from IPFS and add it to the post objects */</span></span>
<span class="line"><span style="color:#24292E;">    data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">all</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">      data.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">d</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">endpoint</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`https://infura-ipfs.io/ipfs/\${</span><span style="color:#24292E;">d</span><span style="color:#032F62;">.</span><span style="color:#24292E;">content</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">options</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">          mode: </span><span style="color:#032F62;">&quot;no-cors&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        };</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">response</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">fetch</span><span style="color:#24292E;">(endpoint, options);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">value</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> response.</span><span style="color:#6F42C1;">text</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        d.postContent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> d;</span></span>
<span class="line"><span style="color:#24292E;">      }),</span></span>
<span class="line"><span style="color:#24292E;">    );</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setPosts</span><span style="color:#24292E;">(data);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createPost</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">added</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> client.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(content);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">provider</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ethers.providers.</span><span style="color:#6F42C1;">Web3Provider</span><span style="color:#24292E;">(window.ethereum);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">signer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> provider.</span><span style="color:#6F42C1;">getSigner</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">contract</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> ethers.</span><span style="color:#6F42C1;">Contract</span><span style="color:#24292E;">(contractAddress, Blog.abi, signer);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">tx</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> contract.</span><span style="color:#6F42C1;">createPost</span><span style="color:#24292E;">(title, added.path);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> tx.</span><span style="color:#6F42C1;">wait</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setViewState</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;view-posts&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toggleView</span><span style="color:#24292E;">(</span><span style="color:#E36209;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">setViewState</span><span style="color:#24292E;">(value);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (value </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;view-posts&quot;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6F42C1;">fetchPosts</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">style</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{outerContainerStyle}&gt;</span></span>
<span class="line"><span style="color:#24292E;">      &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">style</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{innerContainerStyle}&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;Modular Rollup Blog&lt;/</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">          This allows users to securely create and share blog posts on the</span></span>
<span class="line"><span style="color:#24292E;">          blockchain without the need for a centralized server or authority.</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        {</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">address </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">          &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">h3</span><span style="color:#24292E;">&gt;Getting Started&lt;/</span><span style="color:#22863A;">h3</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">              First, you will need to connect your Ethereum wallet to Ethermint</span></span>
<span class="line"><span style="color:#24292E;">              to display the posts from the smart contract and make posts.</span></span>
<span class="line"><span style="color:#24292E;">            &lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">          &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        ) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">br</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">h3</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">style</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{{ justifyContent: </span><span style="color:#032F62;">&quot;right&quot;</span><span style="color:#24292E;">, textAlign: </span><span style="color:#032F62;">&quot;right&quot;</span><span style="color:#24292E;"> }}&gt;</span></span>
<span class="line"><span style="color:#24292E;">          Connect your Ethereum wallet to begin ✨</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">h3</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">style</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{buttonContainerStyle}&gt;</span></span>
<span class="line"><span style="color:#24292E;">          &lt;</span><span style="color:#005CC5;">ConnectButton</span><span style="color:#24292E;"> /&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        {address </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">          &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">style</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{buttonContainerStyle}&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">button</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6F42C1;">onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toggleView</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;view-posts&quot;</span><span style="color:#24292E;">)}</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6F42C1;">style</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{buttonStyle}</span></span>
<span class="line"><span style="color:#24292E;">            &gt;</span></span>
<span class="line"><span style="color:#24292E;">              View Posts</span></span>
<span class="line"><span style="color:#24292E;">            &lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">button</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6F42C1;">onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">toggleView</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;create-post&quot;</span><span style="color:#24292E;">)}</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6F42C1;">style</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{buttonStyle}</span></span>
<span class="line"><span style="color:#24292E;">            &gt;</span></span>
<span class="line"><span style="color:#24292E;">              Create Post</span></span>
<span class="line"><span style="color:#24292E;">            &lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">          &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        ) </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">        {viewState </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;view-posts&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> address </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">          &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">style</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{postContainerStyle}&gt;</span></span>
<span class="line"><span style="color:#24292E;">              &lt;</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;Posts&lt;/</span><span style="color:#22863A;">h1</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">              {posts.</span><span style="color:#6F42C1;">map</span><span style="color:#24292E;">((</span><span style="color:#E36209;">post</span><span style="color:#24292E;">, </span><span style="color:#E36209;">index</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">                &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">key</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{index}&gt;</span></span>
<span class="line"><span style="color:#24292E;">                  &lt;</span><span style="color:#22863A;">h2</span><span style="color:#24292E;">&gt;{post.title}&lt;/</span><span style="color:#22863A;">h2</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                  &lt;</span><span style="color:#22863A;">button</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">style</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{{ fontSize: </span><span style="color:#032F62;">&quot;16px&quot;</span><span style="color:#24292E;"> }}</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{() </span><span style="color:#D73A49;">=&gt;</span></span>
<span class="line"><span style="color:#24292E;">                      window.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`https://infura-ipfs.io/ipfs/\${</span><span style="color:#24292E;">post</span><span style="color:#032F62;">.</span><span style="color:#24292E;">content</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">                  &gt;</span></span>
<span class="line"><span style="color:#24292E;">                    Read on IPFS</span></span>
<span class="line"><span style="color:#24292E;">                  &lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                  {</span><span style="color:#6A737D;">/* &lt;ReactMarkdown&gt;</span></span>
<span class="line"><span style="color:#6A737D;">                    {post.postContent}</span></span>
<span class="line"><span style="color:#6A737D;">                  &lt;/ReactMarkdown&gt; */</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">                  &lt;</span><span style="color:#22863A;">p</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">style</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{mbidStyle}&gt;GMID: {post.id}&lt;/</span><span style="color:#22863A;">p</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">                &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">              ))}</span></span>
<span class="line"><span style="color:#24292E;">            &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">          &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        )}</span></span>
<span class="line"><span style="color:#24292E;">        {viewState </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;create-post&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">          &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">style</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{formContainerStyle}&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">h2</span><span style="color:#24292E;">&gt;Create Post&lt;/</span><span style="color:#22863A;">h2</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">input</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6F42C1;">placeholder</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Title&quot;</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6F42C1;">onChange</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{(</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setTitle</span><span style="color:#24292E;">(e.target.value)}</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6F42C1;">style</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{inputStyle}</span></span>
<span class="line"><span style="color:#24292E;">            /&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">textarea</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6F42C1;">placeholder</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;Content&quot;</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6F42C1;">onChange</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{(</span><span style="color:#E36209;">e</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setContent</span><span style="color:#24292E;">(e.target.value)}</span></span>
<span class="line"><span style="color:#24292E;">              </span><span style="color:#6F42C1;">style</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{inputStyle}</span></span>
<span class="line"><span style="color:#24292E;">            /&gt;</span></span>
<span class="line"><span style="color:#24292E;">            &lt;</span><span style="color:#22863A;">button</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">onClick</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{createPost}&gt;Create Post&lt;/</span><span style="color:#22863A;">button</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">          &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        )}</span></span>
<span class="line"><span style="color:#24292E;">      &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  );</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">outerContainerStyle</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  width: </span><span style="color:#032F62;">&quot;90vw&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  height: </span><span style="color:#032F62;">&quot;100vh&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  padding: </span><span style="color:#032F62;">&quot;50px 0px&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">innerContainerStyle</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  width: </span><span style="color:#032F62;">&quot;100%&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  maxWidth: </span><span style="color:#032F62;">&quot;800px&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  margin: </span><span style="color:#032F62;">&quot;0 auto&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">formContainerStyle</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  display: </span><span style="color:#032F62;">&quot;flex&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  flexDirection: </span><span style="color:#032F62;">&quot;column&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  alignItems: </span><span style="color:#032F62;">&quot;center&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">inputStyle</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  width: </span><span style="color:#032F62;">&quot;400px&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  marginBottom: </span><span style="color:#032F62;">&quot;10px&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  padding: </span><span style="color:#032F62;">&quot;10px&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  height: </span><span style="color:#032F62;">&quot;40px&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">postContainerStyle</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  margin: </span><span style="color:#032F62;">&quot;0 auto&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  padding: </span><span style="color:#032F62;">&quot;1em&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  width: </span><span style="color:#032F62;">&quot;90%&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  maxWidth: </span><span style="color:#032F62;">&quot;800px&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  display: </span><span style="color:#032F62;">&quot;flex&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  flexDirection: </span><span style="color:#032F62;">&quot;column&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  alignItems: </span><span style="color:#032F62;">&quot;start&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  justifyContent: </span><span style="color:#032F62;">&quot;center&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">mbidStyle</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  fontSize: </span><span style="color:#032F62;">&quot;10px&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  textAlign: </span><span style="color:#032F62;">&quot;start&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">buttonStyle</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  marginTop: </span><span style="color:#005CC5;">15</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  marginRight: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  border: </span><span style="color:#032F62;">&quot;1px solid rgba(255, 255, 255, .2)&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">buttonContainerStyle</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  marginTop: </span><span style="color:#005CC5;">15</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  marginRight: </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  display: </span><span style="color:#032F62;">&quot;flex&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  justifyContent: </span><span style="color:#032F62;">&quot;right&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> App;</span></span></code></pre></div><h3 id="adding-ethermint-chain-to-metamask" tabindex="-1">Adding Ethermint Chain to MetaMask <a class="header-anchor" href="#adding-ethermint-chain-to-metamask" aria-label="Permalink to &quot;Adding Ethermint Chain to MetaMask&quot;">​</a></h3><p>Before we can test out our dapp, we&#39;ll need to configure the chains on MetaMask if we&#39;re deploying our rollup any</p><ol><li>Open your MetaMask wallet and click &quot;Ethereum Mainnet&quot; to open the dropdown.</li><li>Select &quot;Add network&quot;</li><li>Then &quot;Add network manually&quot;</li><li>Enter the following details:</li></ol><ul><li>Network Name: <code>Ethermint</code></li><li>New RPC URL: <code>http://localhost:8545</code> <strong>or</strong> <code>https://your.custom.ip.address:port</code></li><li>Chain ID: <code>9000</code></li><li>Currency symbol: <code>CTE</code></li></ul><h3 id="testing-it-out-on-ethermint" tabindex="-1">Testing it out on Ethermint <a class="header-anchor" href="#testing-it-out-on-ethermint" aria-label="Permalink to &quot;Testing it out on Ethermint&quot;">​</a></h3><p>Now we’re ready to run the app.</p><p>Right now, the app is configured to be using <code>localhost:8545</code> using the Ethermint rollup we&#39;re running with Rollkit.</p><p>First, you&#39;ll need to <a href="https://metamask.io" target="_blank" rel="noreferrer">install MetaMask</a>.</p><p>To use the test account, you will need to import the private key from Ethermint to MetaMask. First, run the following command:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">PRIVATE_KEY</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">$(</span><span style="color:#B392F0;">ethermintd</span><span style="color:#9ECBFF;"> keys unsafe-export-eth-key mykey </span><span style="color:#79B8FF;">--keyring-backend</span><span style="color:#9ECBFF;"> test)</span></span>
<span class="line"><span style="color:#E1E4E8;">&amp;&amp; </span><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> $PRIVATE_KEY </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">pbcopy</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">PRIVATE_KEY</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">$(</span><span style="color:#6F42C1;">ethermintd</span><span style="color:#032F62;"> keys unsafe-export-eth-key mykey </span><span style="color:#005CC5;">--keyring-backend</span><span style="color:#032F62;"> test)</span></span>
<span class="line"><span style="color:#24292E;">&amp;&amp; </span><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> $PRIVATE_KEY </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">pbcopy</span></span></code></pre></div><p>Now, <a href="https://metamask.zendesk.com/hc/en-us/articles/360015489331-How-to-import-an-account#h_01G01W07NV7Q94M7P1EBD5BYM4" target="_blank" rel="noreferrer">import the private key to MetaMask</a> and switch to that account.</p><p>Next, let’s run it on your Ethermint rollup.</p><p>To do so, first update the <code>contractAddress</code> variable with the contract address deployed to Ethermint:</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/* src/App.jsx */</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">contractAddress</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;your-ethermint-contract-address&quot;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/* src/App.jsx */</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">contractAddress</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;your-ethermint-contract-address&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>Next, run the React application:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">dev</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">dev</span></span></code></pre></div><p>When you run the app, you should now be connected to and using the Ethermint rollup.</p><p>If you imported the address that started the chain, you&#39;ll see quite a large balance.</p><h3 id="now-give-it-a-spin-🌀" tabindex="-1">Now give it a spin 🌀 <a class="header-anchor" href="#now-give-it-a-spin-🌀" aria-label="Permalink to &quot;Now give it a spin 🌀&quot;">​</a></h3><p>Now that you have your dapp running, go ahead and test out a new post on your Ethermint sovereign rollup. If you enjoyed this tutorial, be sure to share your example <a href="https://discord.com/invite/je7UVpDuDu" target="_blank" rel="noreferrer">in our Discord</a>!</p>`,113),e=[o];function t(c,r,E,y,i,F){return n(),a("div",null,e)}const h=s(p,[["render",t]]);export{u as __pageData,h as default};
