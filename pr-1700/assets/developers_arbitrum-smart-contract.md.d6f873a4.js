import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.b99d2f27.js";const F=JSON.parse('{"title":"Deploy a smart contract to your Arbitrum rollup","description":"A tutorial that guides you through the process of deploying a smart contract to your Arbitrum rollup using a L2 Nitro devnet, including setting up the environment, creating and testing the smart contract, and interacting with the deployed contract.","frontmatter":{"description":"A tutorial that guides you through the process of deploying a smart contract to your Arbitrum rollup using a L2 Nitro devnet, including setting up the environment, creating and testing the smart contract, and interacting with the deployed contract.","head":[["meta",{"name":"og:title","content":"Deploy a smart contract to your Arbitrum rollup | Celestia Docs"},{"name":"og:description","content":false}]]},"headers":[],"relativePath":"developers/arbitrum-smart-contract.md","filePath":"developers/arbitrum-smart-contract.md","lastUpdated":1725903224000}'),l={name:"developers/arbitrum-smart-contract.md"},p=o(`<h1 id="deploy-a-smart-contract-to-your-arbitrum-rollup" tabindex="-1">Deploy a smart contract to your Arbitrum rollup <a class="header-anchor" href="#deploy-a-smart-contract-to-your-arbitrum-rollup" aria-label="Permalink to &quot;Deploy a smart contract to your Arbitrum rollup&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>Welcome to the guide on deploying a smart contract to your Arbitrum rollup. In this tutorial, you will learn how to deploy a smart contract using the L2 Nitro devnet and the provided public and private keys for testing purposes.</p><h2 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h2><ul><li><a href="./arbitrum-deploy">Nitro rollup devnet</a> running</li><li><a href="https://getfoundry.sh/" target="_blank" rel="noreferrer">Foundry</a> installed on your machine</li><li><a href="https://nodejs.org/en" target="_blank" rel="noreferrer">Node.js</a></li><li>Basic understanding of Ethereum</li><li>Basic understanding of Solidity and Node.js</li></ul><h2 id="setup" tabindex="-1">Setup <a class="header-anchor" href="#setup" aria-label="Permalink to &quot;Setup&quot;">​</a></h2><p>First, in your <code>$HOME</code> directory, set up a new project folder for this tutorial and init the project with npm:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> $HOME</span></span>
<span class="line"><span style="color:#B392F0;">mkdir</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">counter-project</span><span style="color:#E1E4E8;"> &amp;&amp; </span><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">counter-project</span><span style="color:#E1E4E8;"> &amp;&amp; </span><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-y</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> $HOME</span></span>
<span class="line"><span style="color:#6F42C1;">mkdir</span><span style="color:#24292E;"> </span><span style="color:#032F62;">counter-project</span><span style="color:#24292E;"> &amp;&amp; </span><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">counter-project</span><span style="color:#24292E;"> &amp;&amp; </span><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-y</span></span></code></pre></div><p>Next, initialize a Foundry project with the following command:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">forge</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">counter_contract</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">forge</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span><span style="color:#24292E;"> </span><span style="color:#032F62;">counter_contract</span></span></code></pre></div><h2 id="create-your-smart-contract" tabindex="-1">Create your smart contract <a class="header-anchor" href="#create-your-smart-contract" aria-label="Permalink to &quot;Create your smart contract&quot;">​</a></h2><p>Take a look at the <code>Counter.sol</code> file in your <code>counter-project/counter_contract/src</code> directory:</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// SPDX-License-Identifier: UNLICENSED</span></span>
<span class="line"><span style="color:#F97583;">pragma</span><span style="color:#E1E4E8;"> </span><span style="color:#85E89D;">solidity</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">^0.8.13</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">contract</span><span style="color:#B392F0;"> Counter</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">uint256</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> number;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setNumber</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">uint256</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">newNumber</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        number </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> newNumber;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">increment</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        number</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// SPDX-License-Identifier: UNLICENSED</span></span>
<span class="line"><span style="color:#D73A49;">pragma</span><span style="color:#24292E;"> </span><span style="color:#22863A;">solidity</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">^0.8.13</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">contract</span><span style="color:#6F42C1;"> Counter</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">uint256</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> number;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setNumber</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">uint256</span><span style="color:#24292E;"> </span><span style="color:#E36209;">newNumber</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        number </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> newNumber;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">increment</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        number</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>The contract contains a public unsigned integer variable named &quot;number&quot;. There are two public functions in this contract. The <code>setNumber</code> function allows anyone to set a new value for the &quot;number&quot; variable, while the <code>increment</code> function increases the value of &quot;number&quot; by one each time it&#39;s called.</p><p>You can <a href="https://ethereum.org/en/developers/learning-tools/" target="_blank" rel="noreferrer">learn more about Solidity and smart contract programming</a>.</p><p>To compile the contract, run the following forge command from the <code>$HOME/counter-project/counter_contract/</code> directory:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">forge</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">build</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">forge</span><span style="color:#24292E;"> </span><span style="color:#032F62;">build</span></span></code></pre></div><p>Your output should look similar to the following:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[⠢] Compiling...</span></span>
<span class="line"><span style="color:#E1E4E8;">[⠔] Compiling 21 files with 0.8.19</span></span>
<span class="line"><span style="color:#E1E4E8;">[⠑] Solc 0.8.19 finished </span><span style="color:#F97583;">in</span><span style="color:#E1E4E8;"> 1.24s</span></span>
<span class="line"><span style="color:#B392F0;">Compiler</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">successful</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[⠢] Compiling...</span></span>
<span class="line"><span style="color:#24292E;">[⠔] Compiling 21 files with 0.8.19</span></span>
<span class="line"><span style="color:#24292E;">[⠑] Solc 0.8.19 finished </span><span style="color:#D73A49;">in</span><span style="color:#24292E;"> 1.24s</span></span>
<span class="line"><span style="color:#6F42C1;">Compiler</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">successful</span></span></code></pre></div><h2 id="test-your-smart-contract" tabindex="-1">Test your smart contract <a class="header-anchor" href="#test-your-smart-contract" aria-label="Permalink to &quot;Test your smart contract&quot;">​</a></h2><p>Now, open the <code>test/Counter.t.sol</code> file:</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// SPDX-License-Identifier: UNLICENSED</span></span>
<span class="line"><span style="color:#F97583;">pragma</span><span style="color:#E1E4E8;"> </span><span style="color:#85E89D;">solidity</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">^0.8.13</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;forge-std/Test.sol&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;../src/Counter.sol&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">contract</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">CounterTest</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">is</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Test</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    Counter </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> counter;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">setUp</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        counter </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Counter</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        counter.</span><span style="color:#B392F0;">setNumber</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testIncrement</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        counter.</span><span style="color:#B392F0;">increment</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">assertEq</span><span style="color:#E1E4E8;">(counter.</span><span style="color:#B392F0;">number</span><span style="color:#E1E4E8;">(), </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">testSetNumber</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">uint256</span><span style="color:#E1E4E8;"> </span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">public</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        counter.</span><span style="color:#B392F0;">setNumber</span><span style="color:#E1E4E8;">(x);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">assertEq</span><span style="color:#E1E4E8;">(counter.</span><span style="color:#B392F0;">number</span><span style="color:#E1E4E8;">(), x);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// SPDX-License-Identifier: UNLICENSED</span></span>
<span class="line"><span style="color:#D73A49;">pragma</span><span style="color:#24292E;"> </span><span style="color:#22863A;">solidity</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">^0.8.13</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;forge-std/Test.sol&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;../src/Counter.sol&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">contract</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">CounterTest</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">is</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Test</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    Counter </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> counter;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">setUp</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        counter </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Counter</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        counter.</span><span style="color:#6F42C1;">setNumber</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testIncrement</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        counter.</span><span style="color:#6F42C1;">increment</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">assertEq</span><span style="color:#24292E;">(counter.</span><span style="color:#6F42C1;">number</span><span style="color:#24292E;">(), </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">testSetNumber</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">uint256</span><span style="color:#24292E;"> </span><span style="color:#E36209;">x</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">public</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        counter.</span><span style="color:#6F42C1;">setNumber</span><span style="color:#24292E;">(x);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">assertEq</span><span style="color:#24292E;">(counter.</span><span style="color:#6F42C1;">number</span><span style="color:#24292E;">(), x);</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>This file performs unit testing on the contract we created in the previous section. Here&#39;s what the test is doing:</p><ul><li><p>The contract includes a public &quot;Counter&quot; type variable called &quot;counter&quot;. In the <code>setUp</code> function, it initializes a new instance of the &quot;Counter&quot; contract and sets the &quot;number&quot; variable to 0.</p></li><li><p>There are two test functions in the contract: <code>testIncrement</code> and <code>testSetNumber</code>.</p></li><li><p>The <code>testIncrement</code> function tests the &quot;increment&quot; function of the &quot;Counter&quot; contract by calling it and then asserting that the &quot;number&quot; in the &quot;Counter&quot; contract is 1. It verifies if the increment operation correctly increases the number by one.</p></li><li><p>The <code>testSetNumber</code> function is more generic. It takes an unsigned integer argument &#39;x&#39; and tests the &quot;setNumber&quot; function of the &quot;Counter&quot; contract. After calling the &quot;setNumber&quot; function with &#39;x&#39;, it asserts that the &quot;number&quot; in the &quot;Counter&quot; contract is equal to &#39;x&#39;. This verifies that the &quot;setNumber&quot; function correctly updates the &quot;number&quot; in the &quot;Counter&quot; contract.</p></li></ul><p>Now, to test your code, run the following:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">forge</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">forge</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span></span></code></pre></div><p>If the test is successful, your output should be similar to this:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[⠆] Compiling...</span></span>
<span class="line"><span style="color:#B392F0;">No</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">files</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">changed,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">compilation</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">skipped</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">Running</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tests</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">for</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test/Counter.t.sol:CounterTest</span></span>
<span class="line"><span style="color:#E1E4E8;">[PASS] </span><span style="color:#B392F0;">testIncrement</span><span style="color:#E1E4E8;">() (</span><span style="color:#B392F0;">gas:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">28334</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">[PASS] testSetNumber(</span><span style="color:#B392F0;">uint256</span><span style="color:#E1E4E8;">) (</span><span style="color:#B392F0;">runs:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">256</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">μ:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">27709</span><span style="color:#9ECBFF;">,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">~:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">28409</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">Test</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">result:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ok.</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">passed</span><span style="color:#E1E4E8;">; </span><span style="color:#B392F0;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">failed</span><span style="color:#E1E4E8;">; </span><span style="color:#B392F0;">finished</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">in</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">8.96</span><span style="color:#9ECBFF;">ms</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[⠆] Compiling...</span></span>
<span class="line"><span style="color:#6F42C1;">No</span><span style="color:#24292E;"> </span><span style="color:#032F62;">files</span><span style="color:#24292E;"> </span><span style="color:#032F62;">changed,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">compilation</span><span style="color:#24292E;"> </span><span style="color:#032F62;">skipped</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">Running</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tests</span><span style="color:#24292E;"> </span><span style="color:#032F62;">for</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test/Counter.t.sol:CounterTest</span></span>
<span class="line"><span style="color:#24292E;">[PASS] </span><span style="color:#6F42C1;">testIncrement</span><span style="color:#24292E;">() (</span><span style="color:#6F42C1;">gas:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">28334</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">[PASS] testSetNumber(</span><span style="color:#6F42C1;">uint256</span><span style="color:#24292E;">) (</span><span style="color:#6F42C1;">runs:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">256</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">μ:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">27709</span><span style="color:#032F62;">,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">~:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">28409</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">Test</span><span style="color:#24292E;"> </span><span style="color:#032F62;">result:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ok.</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> </span><span style="color:#032F62;">passed</span><span style="color:#24292E;">; </span><span style="color:#6F42C1;">0</span><span style="color:#24292E;"> </span><span style="color:#032F62;">failed</span><span style="color:#24292E;">; </span><span style="color:#6F42C1;">finished</span><span style="color:#24292E;"> </span><span style="color:#032F62;">in</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">8.96</span><span style="color:#032F62;">ms</span></span></code></pre></div><h2 id="deploying-your-smart-contract" tabindex="-1">Deploying your smart contract <a class="header-anchor" href="#deploying-your-smart-contract" aria-label="Permalink to &quot;Deploying your smart contract&quot;">​</a></h2><h3 id="funded-accounts" tabindex="-1">Funded accounts <a class="header-anchor" href="#funded-accounts" aria-label="Permalink to &quot;Funded accounts&quot;">​</a></h3><p>Your L2 Nitro devnet will have a <a href="https://docs.arbitrum.io/node-running/how-tos/local-dev-node#default-endpoints-and-addresses" target="_blank" rel="noreferrer">public and private key funded as a faucet to use for testing</a>:</p><ul><li>On both L1 and L2 <ul><li>Public key: <code>0x3f1Eae7D46d88F08fc2F8ed27FCb2AB183EB2d0E</code></li><li>Private key: <code>0xb6b15c8cb491557369f3c7d2c287b053eb229daa9c22138887752191c9520659</code></li></ul></li></ul><p>Alternatively, you can <a href="https://docs.arbitrum.io/node-running/how-tos/local-dev-node#helper-scripts" target="_blank" rel="noreferrer">fund other addresses by using the scripts <code>send-l1</code> and <code>send-l2</code></a>.</p><p>The L1 Geth devnet will be running at <code>http://localhost:8545</code> and the L2 Nitro devnet will be on <code>http://localhost:8547</code> and <code>ws://localhost:8548</code>.</p><h3 id="using-our-arbitrum-devnet" tabindex="-1">Using our Arbitrum devnet <a class="header-anchor" href="#using-our-arbitrum-devnet" aria-label="Permalink to &quot;Using our Arbitrum devnet&quot;">​</a></h3><p>We will use the local RPC endpoint (<code>http://localhost:8547</code>) and accounts above to test with.</p><p>Let&#39;s deploy the contract now. First, set a private key from anvil:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> L2_PRIVATE_KEY</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0xe887f7d17d07cc7b8004053fb8826f6657084e88904bb61590e498ca04704cf2</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> ARB_RPC_URL</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">http://localhost:8547</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> L2_PRIVATE_KEY</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0xe887f7d17d07cc7b8004053fb8826f6657084e88904bb61590e498ca04704cf2</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> ARB_RPC_URL</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">http://localhost:8547</span></span></code></pre></div><p>Now, deploy the contract:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">forge</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">create</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--rpc-url</span><span style="color:#E1E4E8;"> $ARB_RPC_URL </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">--private-key</span><span style="color:#E1E4E8;"> $L2_PRIVATE_KEY </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">src/Counter.sol:Counter</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">forge</span><span style="color:#24292E;"> </span><span style="color:#032F62;">create</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--rpc-url</span><span style="color:#24292E;"> $ARB_RPC_URL </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">--private-key</span><span style="color:#24292E;"> $L2_PRIVATE_KEY </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">src/Counter.sol:Counter</span></span></code></pre></div><p>A successful deployment will return output similar to below:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">[⠆] Compiling...</span></span>
<span class="line"><span style="color:#B392F0;">No</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">files</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">changed,</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">compilation</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">skipped</span></span>
<span class="line"><span style="color:#B392F0;">Deployer:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266</span></span>
<span class="line"><span style="color:#B392F0;">Deployed</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">to:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0x5FbDB2315678afecb367f032d93F642f64180aa3</span></span>
<span class="line"><span style="color:#B392F0;">Transaction</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">hash:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0xf1a793a793cd9fc588f5132d99008565ea361eb3535d66499575e9e1908200b2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">[⠆] Compiling...</span></span>
<span class="line"><span style="color:#6F42C1;">No</span><span style="color:#24292E;"> </span><span style="color:#032F62;">files</span><span style="color:#24292E;"> </span><span style="color:#032F62;">changed,</span><span style="color:#24292E;"> </span><span style="color:#032F62;">compilation</span><span style="color:#24292E;"> </span><span style="color:#032F62;">skipped</span></span>
<span class="line"><span style="color:#6F42C1;">Deployer:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266</span></span>
<span class="line"><span style="color:#6F42C1;">Deployed</span><span style="color:#24292E;"> </span><span style="color:#032F62;">to:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0x5FbDB2315678afecb367f032d93F642f64180aa3</span></span>
<span class="line"><span style="color:#6F42C1;">Transaction</span><span style="color:#24292E;"> </span><span style="color:#032F62;">hash:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0xf1a793a793cd9fc588f5132d99008565ea361eb3535d66499575e9e1908200b2</span></span></code></pre></div><p>Once you&#39;ve deployed the contract, you&#39;re ready to interact with it!</p><p>First, we&#39;ll set it as a variable:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> CONTRACT_ADDRESS</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">0x5FbDB2315678afecb367f032d93F642f64180aa3</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> CONTRACT_ADDRESS</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">0x5FbDB2315678afecb367f032d93F642f64180aa3</span></span></code></pre></div><h2 id="interacting-with-your-smart-contract" tabindex="-1">Interacting with your smart contract <a class="header-anchor" href="#interacting-with-your-smart-contract" aria-label="Permalink to &quot;Interacting with your smart contract&quot;">​</a></h2><p>Foundry uses <code>cast</code>, a CLI for performing Ethereum RPC calls.</p><p>To write to the contract, we&#39;ll use the <code>cast send</code> command:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">cast</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">send</span><span style="color:#E1E4E8;"> $CONTRACT_ADDRESS </span><span style="color:#9ECBFF;">&quot;setNumber(uint256)&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">--rpc-url</span><span style="color:#E1E4E8;"> $ARB_RPC_URL </span><span style="color:#79B8FF;">--private-key</span><span style="color:#E1E4E8;"> $L2_PRIVATE_KEY</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">cast</span><span style="color:#24292E;"> </span><span style="color:#032F62;">send</span><span style="color:#24292E;"> $CONTRACT_ADDRESS </span><span style="color:#032F62;">&quot;setNumber(uint256)&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">--rpc-url</span><span style="color:#24292E;"> $ARB_RPC_URL </span><span style="color:#005CC5;">--private-key</span><span style="color:#24292E;"> $L2_PRIVATE_KEY</span></span></code></pre></div><p>Your output will look similar:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">blockHash</span><span style="color:#E1E4E8;">               </span><span style="color:#79B8FF;">0x131822bef6eb59656d7e1387c19b75be667e587006710365ec5cf58030786c42</span></span>
<span class="line"><span style="color:#B392F0;">blockNumber</span><span style="color:#E1E4E8;">             </span><span style="color:#79B8FF;">3</span></span>
<span class="line"><span style="color:#B392F0;">contractAddress</span></span>
<span class="line"><span style="color:#B392F0;">cumulativeGasUsed</span><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">43494</span></span>
<span class="line"><span style="color:#B392F0;">effectiveGasPrice</span><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">3767182372</span></span>
<span class="line"><span style="color:#B392F0;">gasUsed</span><span style="color:#E1E4E8;">                 </span><span style="color:#79B8FF;">43494</span></span>
<span class="line"><span style="color:#B392F0;">logs</span><span style="color:#E1E4E8;">                    []</span></span>
<span class="line"><span style="color:#B392F0;">logsBloom</span><span style="color:#E1E4E8;">               </span><span style="color:#79B8FF;">0xspan></span>
<span class="line"><span style="color:#B392F0;">root</span></span>
<span class="line"><span style="color:#B392F0;">status</span><span style="color:#E1E4E8;">                  </span><span style="color:#79B8FF;">1</span></span>
<span class="line"><span style="color:#B392F0;">transactionHash</span><span style="color:#E1E4E8;">         </span><span style="color:#79B8FF;">0x8f15d6004598f0662dd673a9898dceef77be8cc28408cecc284b28d7be32307d</span></span>
<span class="line"><span style="color:#B392F0;">transactionIndex</span><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#79B8FF;">type</span><span style="color:#E1E4E8;">                    </span><span style="color:#79B8FF;">2</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">blockHash</span><span style="color:#24292E;">               </span><span style="color:#005CC5;">0x131822bef6eb59656d7e1387c19b75be667e587006710365ec5cf58030786c42</span></span>
<span class="line"><span style="color:#6F42C1;">blockNumber</span><span style="color:#24292E;">             </span><span style="color:#005CC5;">3</span></span>
<span class="line"><span style="color:#6F42C1;">contractAddress</span></span>
<span class="line"><span style="color:#6F42C1;">cumulativeGasUsed</span><span style="color:#24292E;">       </span><span style="color:#005CC5;">43494</span></span>
<span class="line"><span style="color:#6F42C1;">effectiveGasPrice</span><span style="color:#24292E;">       </span><span style="color:#005CC5;">3767182372</span></span>
<span class="line"><span style="color:#6F42C1;">gasUsed</span><span style="color:#24292E;">                 </span><span style="color:#005CC5;">43494</span></span>
<span class="line"><span style="color:#6F42C1;">logs</span><span style="color:#24292E;">                    []</span></span>
<span class="line"><span style="color:#6F42C1;">logsBloom</span><span style="color:#24292E;">               </span><span style="color:#005CC5;">0xspan></span>
<span class="line"><span style="color:#6F42C1;">root</span></span>
<span class="line"><span style="color:#6F42C1;">status</span><span style="color:#24292E;">                  </span><span style="color:#005CC5;">1</span></span>
<span class="line"><span style="color:#6F42C1;">transactionHash</span><span style="color:#24292E;">         </span><span style="color:#005CC5;">0x8f15d6004598f0662dd673a9898dceef77be8cc28408cecc284b28d7be32307d</span></span>
<span class="line"><span style="color:#6F42C1;">transactionIndex</span><span style="color:#24292E;">        </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#005CC5;">type</span><span style="color:#24292E;">                    </span><span style="color:#005CC5;">2</span></span></code></pre></div><p>Now, we can make a read call to view the state of the number variable, using the <code>cast call</code> command:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">cast</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">call</span><span style="color:#E1E4E8;"> $CONTRACT_ADDRESS </span><span style="color:#9ECBFF;">&quot;number()&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--rpc-url</span><span style="color:#E1E4E8;"> $ARB_RPC_URL</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">cast</span><span style="color:#24292E;"> </span><span style="color:#032F62;">call</span><span style="color:#24292E;"> $CONTRACT_ADDRESS </span><span style="color:#032F62;">&quot;number()&quot;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--rpc-url</span><span style="color:#24292E;"> $ARB_RPC_URL</span></span></code></pre></div><p>The result will look similar:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">0x000000000000000000000000000000000000000000000000000000000000000a</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">0x000000000000000000000000000000000000000000000000000000000000000a</span></span></code></pre></div><p>Convert the result from hexadecimal to a base 10 value with:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">$((</span><span style="color:#79B8FF;">0x000000000000000000000000000000000000000000000000000000000000000a</span><span style="color:#9ECBFF;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">$((</span><span style="color:#005CC5;">0x000000000000000000000000000000000000000000000000000000000000000a</span><span style="color:#032F62;">))</span></span></code></pre></div><h2 id="next-steps" tabindex="-1">Next steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next steps&quot;">​</a></h2><p>Congratulations! You&#39;ve learned how to deploy a smart contract to your Arbitrum rollup devnet.</p><p>What will you build next? In our next tutorial, we will be going over how to deploy a dapp to your Arbitrum rollup.</p>`,60),e=[p];function t(c,r,i,y,E,u){return a(),n("div",null,e)}const h=s(l,[["render",t]]);export{F as __pageData,h as default};
