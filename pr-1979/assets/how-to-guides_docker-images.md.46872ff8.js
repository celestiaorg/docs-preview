import{a as l}from"./chunks/arabica_versions.2d976aad.js";import{m as t}from"./chunks/mocha_versions.7ac23927.js";import{m as p}from"./chunks/mainnet_versions.c3ae594b.js";import{o as c,c as r,k as s,a,t as n,l as e,Q as o}from"./chunks/framework.5ad9fb18.js";const _=o('<h1 id="üê≥-docker-setup" tabindex="-1">üê≥ Docker setup <a class="header-anchor" href="#üê≥-docker-setup" aria-label="Permalink to &quot;üê≥ Docker setup&quot;">‚Äã</a></h1><p>This page has instructions to run celestia-node using Docker. If you are looking for instructions to run celestia-node using a binary, please refer to the <a href="/docs-preview/pr-1979/how-to-guides/celestia-node">celestia-node page</a>.</p><p>Using Docker is the easiest way to run celestia-node for most users. Docker is a containerization platform that allows you to run celestia-node in an isolated environment.</p><p>This means that you can run celestia-node on your machine without having to worry about installing and configuring all of the dependencies required to run the node.</p><p>If you would like to learn more about key management in Docker, visit the <a href="/docs-preview/pr-1979/tutorials/celestia-node-key#docker-and-cel-key">Docker and <code>cel-key</code> section</a>.</p><p>The easiest way to install Docker is to use the Docker Desktop installer or Ubuntu. You can <a href="https://docs.docker.com/engine/install" target="_blank" rel="noreferrer">follow the instructions for your operating system</a>.</p><h2 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">‚Äã</a></h2><ul><li><a href="https://docs.docker.com/get-docker" target="_blank" rel="noreferrer">Docker Desktop for Mac or Windows</a> and a basic understanding of Docker</li><li><a href="https://docs.docker.com/engine/install/" target="_blank" rel="noreferrer">Docker Engine for Linux</a> and a basic understanding of Docker</li></ul><h2 id="quick-start" tabindex="-1">Quick start <a class="header-anchor" href="#quick-start" aria-label="Permalink to &quot;Quick start&quot;">‚Äã</a></h2>',9),i=o('<li><p>Set <a href="/docs-preview/pr-1979/how-to-guides/participate">the network</a> you would like to run your node on:</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-YI9ZL" id="tab-z_la3v3" checked="checked"><label for="tab-z_la3v3">Mainnet Beta</label><input type="radio" name="group-YI9ZL" id="tab-_aRRvKH"><label for="tab-_aRRvKH">Mocha</label><input type="radio" name="group-YI9ZL" id="tab-jO3Koer"><label for="tab-jO3Koer">Arabica</label></div><div class="blocks"><div class="language-bash vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> NETWORK</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">celestia</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> NETWORK</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">celestia</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> NETWORK</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">mocha</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> NETWORK</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">mocha</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> NETWORK</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">arabica</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> NETWORK</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">arabica</span></span></code></pre></div></div></div></li><li><p>Set the node type</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-89Fbu" id="tab-ezXKp_2" checked="checked"><label for="tab-ezXKp_2">Light</label><input type="radio" name="group-89Fbu" id="tab-XRwZOY5"><label for="tab-XRwZOY5">Bridge</label><input type="radio" name="group-89Fbu" id="tab-J0yl7BH"><label for="tab-J0yl7BH">Full</label></div><div class="blocks"><div class="language-bash vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> NODE_TYPE</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">light</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> NODE_TYPE</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">light</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> NODE_TYPE</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">bridge</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> NODE_TYPE</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">bridge</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> NODE_TYPE</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">full</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> NODE_TYPE</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">full</span></span></code></pre></div></div></div></li><li><p>Set an RPC endpoint for either <a href="/docs-preview/pr-1979/how-to-guides/mainnet#integrations">Mainnet Beta</a>, <a href="/docs-preview/pr-1979/how-to-guides/mocha-testnet#integrations">Mocha</a>, or <a href="/docs-preview/pr-1979/how-to-guides/arabica-devnet#integrations">Arabica</a> using the bare URL (without http or https):</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> RPC_URL</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">this-is-an-rpc-url.com</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> RPC_URL</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">this-is-an-rpc-url.com</span></span></code></pre></div><p>Then set the port for the RPC_URL:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> RPC_PORT</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">9090</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> RPC_PORT</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">9090</span></span></code></pre></div></li>',3),E=s("p",null,"Run the image from the command line:",-1),y={class:"vp-code-group vp-adaptive-theme"},d=o('<div class="tabs"><input type="radio" name="group-_L1yR" id="tab-TNCwrAl" checked="checked"><label for="tab-TNCwrAl">Mainnet Beta</label><input type="radio" name="group-_L1yR" id="tab-DrrNxep"><label for="tab-DrrNxep">Mocha</label><input type="radio" name="group-_L1yR" id="tab-GioAQUC"><label for="tab-GioAQUC">Arabica</label></div>',1),h={class:"blocks"},T={class:"language-bash vp-adaptive-theme active"},F=s("button",{title:"Copy Code",class:"copy"},null,-1),C=s("span",{class:"lang"},"bash",-1),u={class:"shiki github-dark vp-code-dark"},g=o('<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">NODE_TYPE=</span><span style="color:#E1E4E8;">$NODE_TYPE </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">P2P_NETWORK=</span><span style="color:#E1E4E8;">$NETWORK </span><span style="color:#79B8FF;">\\</span></span>',1),b={class:"line"},P=s("span",{style:{color:"#E1E4E8"}},"    ",-1),v={style:{color:"#9ECBFF"}},k=s("span",{style:{color:"#E1E4E8"}}," ",-1),A=s("span",{style:{color:"#79B8FF"}},"\\",-1),m=o('<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">celestia</span><span style="color:#E1E4E8;"> $NODE_TYPE </span><span style="color:#9ECBFF;">start</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--core.ip</span><span style="color:#E1E4E8;"> $RPC_URL </span><span style="color:#79B8FF;">--core.port</span><span style="color:#E1E4E8;"> $RPC_PORT </span><span style="color:#79B8FF;">--p2p.network</span><span style="color:#E1E4E8;"> $NETWORK</span></span>',1),R={class:"shiki github-light vp-code-light"},S=o('<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">NODE_TYPE=</span><span style="color:#24292E;">$NODE_TYPE </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">P2P_NETWORK=</span><span style="color:#24292E;">$NETWORK </span><span style="color:#005CC5;">\\</span></span>',1),B={class:"line"},N=s("span",{style:{color:"#24292E"}},"    ",-1),D={style:{color:"#032F62"}},O=s("span",{style:{color:"#24292E"}}," ",-1),I=s("span",{style:{color:"#005CC5"}},"\\",-1),V=o('<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">celestia</span><span style="color:#24292E;"> $NODE_TYPE </span><span style="color:#032F62;">start</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--core.ip</span><span style="color:#24292E;"> $RPC_URL </span><span style="color:#005CC5;">--core.port</span><span style="color:#24292E;"> $RPC_PORT </span><span style="color:#005CC5;">--p2p.network</span><span style="color:#24292E;"> $NETWORK</span></span>',1),$={class:"language-bash vp-adaptive-theme"},f=s("button",{title:"Copy Code",class:"copy"},null,-1),w=s("span",{class:"lang"},"bash",-1),K={class:"shiki github-dark vp-code-dark"},W=o('<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">NODE_TYPE=</span><span style="color:#E1E4E8;">$NODE_TYPE </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">P2P_NETWORK=</span><span style="color:#E1E4E8;">$NETWORK </span><span style="color:#79B8FF;">\\</span></span>',1),Y={class:"line"},x=s("span",{style:{color:"#E1E4E8"}},"    ",-1),M={style:{color:"#9ECBFF"}},L=s("span",{style:{color:"#E1E4E8"}}," ",-1),q=s("span",{style:{color:"#79B8FF"}},"\\",-1),H=o('<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">celestia</span><span style="color:#E1E4E8;"> $NODE_TYPE </span><span style="color:#9ECBFF;">start</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--core.ip</span><span style="color:#E1E4E8;"> $RPC_URL </span><span style="color:#79B8FF;">--core.port</span><span style="color:#E1E4E8;"> $RPC_PORT </span><span style="color:#79B8FF;">--p2p.network</span><span style="color:#E1E4E8;"> $NETWORK</span></span>',1),U={class:"shiki github-light vp-code-light"},z=o('<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">NODE_TYPE=</span><span style="color:#24292E;">$NODE_TYPE </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">P2P_NETWORK=</span><span style="color:#24292E;">$NETWORK </span><span style="color:#005CC5;">\\</span></span>',1),Q={class:"line"},Z=s("span",{style:{color:"#24292E"}},"    ",-1),G={style:{color:"#032F62"}},j=s("span",{style:{color:"#24292E"}}," ",-1),J=s("span",{style:{color:"#005CC5"}},"\\",-1),X=o('<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">celestia</span><span style="color:#24292E;"> $NODE_TYPE </span><span style="color:#032F62;">start</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--core.ip</span><span style="color:#24292E;"> $RPC_URL </span><span style="color:#005CC5;">--core.port</span><span style="color:#24292E;"> $RPC_PORT </span><span style="color:#005CC5;">--p2p.network</span><span style="color:#24292E;"> $NETWORK</span></span>',1),ss={class:"language-bash vp-adaptive-theme"},os=s("button",{title:"Copy Code",class:"copy"},null,-1),as=s("span",{class:"lang"},"bash",-1),ns={class:"shiki github-dark vp-code-dark"},es=o('<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">NODE_TYPE=</span><span style="color:#E1E4E8;">$NODE_TYPE </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">P2P_NETWORK=</span><span style="color:#E1E4E8;">$NETWORK </span><span style="color:#79B8FF;">\\</span></span>',1),ls={class:"line"},ts=s("span",{style:{color:"#E1E4E8"}},"    ",-1),ps={style:{color:"#9ECBFF"}},cs=s("span",{style:{color:"#E1E4E8"}}," ",-1),rs=s("span",{style:{color:"#79B8FF"}},"\\",-1),_s=o('<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">celestia</span><span style="color:#E1E4E8;"> $NODE_TYPE </span><span style="color:#9ECBFF;">start</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--core.ip</span><span style="color:#E1E4E8;"> $RPC_URL </span><span style="color:#79B8FF;">--core.port</span><span style="color:#E1E4E8;"> $RPC_PORT </span><span style="color:#79B8FF;">--p2p.network</span><span style="color:#E1E4E8;"> $NETWORK</span></span>',1),is={class:"shiki github-light vp-code-light"},Es=o('<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">NODE_TYPE=</span><span style="color:#24292E;">$NODE_TYPE </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">P2P_NETWORK=</span><span style="color:#24292E;">$NETWORK </span><span style="color:#005CC5;">\\</span></span>',1),ys={class:"line"},ds=s("span",{style:{color:"#24292E"}},"    ",-1),hs={style:{color:"#032F62"}},Ts=s("span",{style:{color:"#24292E"}}," ",-1),Fs=s("span",{style:{color:"#005CC5"}},"\\",-1),Cs=o('<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">celestia</span><span style="color:#24292E;"> $NODE_TYPE </span><span style="color:#032F62;">start</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--core.ip</span><span style="color:#24292E;"> $RPC_URL </span><span style="color:#005CC5;">--core.port</span><span style="color:#24292E;"> $RPC_PORT </span><span style="color:#005CC5;">--p2p.network</span><span style="color:#24292E;"> $NETWORK</span></span>',1),us=o(`<p>Congratulations! You now have a celestia-node running!</p><p>If you would like to run the node with custom flags, you can refer to the <a href="/docs-preview/pr-1979/tutorials/node-tutorial#connect-to-a-core-endpoint">celestia-node tutorial</a> page. Refer to <a href="/docs-preview/pr-1979/how-to-guides/celestia-node-troubleshooting#ports">the ports section of the celestia-node troubleshooting page</a> for information on which ports are required to be open on your machine.</p><h2 id="light-node-setup-with-persistent-storage" tabindex="-1">Light node setup with persistent storage <a class="header-anchor" href="#light-node-setup-with-persistent-storage" aria-label="Permalink to &quot;Light node setup with persistent storage&quot;">‚Äã</a></h2><p>If you delete a container that you started above, all data will be lost. To avoid this, you can mount a volume to the container. This will allow you to persist data even after the container is deleted.</p><p>First, you will need to create a directory on your host machine. This directory will be used to store the data for the container. Create a directory on your host machine and give it a name. For example, you can name it <code>my-node-store</code>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> $HOME</span></span>
<span class="line"><span style="color:#B392F0;">mkdir</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">my-node-store</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> $HOME</span></span>
<span class="line"><span style="color:#6F42C1;">mkdir</span><span style="color:#24292E;"> </span><span style="color:#032F62;">my-node-store</span></span></code></pre></div><p>Now, you can mount this directory to the container. Before mounting a volume, you <em>may</em> need to set permissions for the user on the host machine by running:</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-Cq4nl" id="tab-IlltcBz" checked="checked"><label for="tab-IlltcBz">Docker Engine on Linux</label><input type="radio" name="group-Cq4nl" id="tab-wkQ0ad4"><label for="tab-wkQ0ad4">Docker Desktop on Mac</label></div><div class="blocks"><div class="language-bash vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">chown</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10001</span><span style="color:#9ECBFF;">:10001</span><span style="color:#E1E4E8;"> $HOME</span><span style="color:#9ECBFF;">/my-node-store</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">chown</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10001</span><span style="color:#032F62;">:10001</span><span style="color:#24292E;"> $HOME</span><span style="color:#032F62;">/my-node-store</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># you&#39;re good to go üòé</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># you&#39;re good to go üòé</span></span></code></pre></div></div></div><h3 id="initialize-the-node-store-and-key" tabindex="-1">Initialize the node store and key <a class="header-anchor" href="#initialize-the-node-store-and-key" aria-label="Permalink to &quot;Initialize the node store and key&quot;">‚Äã</a></h3><p>In order to mount a volume to the container, you need to specify the path to the volume. When you run your container, you can specify the path to the volume using the <code>--volume</code> (or <code>-v</code> for short) flag. In this command, we&#39;ll create our key and initialize the node store, using the variables we set in the <a href="#quick-start">quick start</a> section:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># --volume == -v [local path]:[container path]</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> [args...] -v $HOME/my-node-store:/home/celestia \\</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">celestia</span><span style="color:#E1E4E8;"> $NODE_TYPE </span><span style="color:#9ECBFF;">init</span><span style="color:#E1E4E8;"> [args...]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># --volume == -v [local path]:[container path]</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> [args...] -v $HOME/my-node-store:/home/celestia \\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">celestia</span><span style="color:#24292E;"> $NODE_TYPE </span><span style="color:#032F62;">init</span><span style="color:#24292E;"> [args...]</span></span></code></pre></div><p>An example init command will look similar to below:</p>`,12),gs={class:"vp-code-group vp-adaptive-theme"},bs=o('<div class="tabs"><input type="radio" name="group-QKiLK" id="tab-k4hxFei" checked="checked"><label for="tab-k4hxFei">Mainnet Beta</label><input type="radio" name="group-QKiLK" id="tab-SOP5MTL"><label for="tab-SOP5MTL">Mocha</label><input type="radio" name="group-QKiLK" id="tab-i7jAtAt"><label for="tab-i7jAtAt">Arabica</label></div>',1),Ps={class:"blocks"},vs={class:"language-bash vp-adaptive-theme active"},ks=s("button",{title:"Copy Code",class:"copy"},null,-1),As=s("span",{class:"lang"},"bash",-1),ms={class:"shiki github-dark vp-code-dark"},Rs=o('<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">NODE_TYPE=</span><span style="color:#E1E4E8;">$NODE_TYPE </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">P2P_NETWORK=</span><span style="color:#E1E4E8;">$NETWORK </span><span style="color:#79B8FF;">\\</span></span>',1),Ss=o('<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> $HOME</span><span style="color:#9ECBFF;">/my-node-store:/home/celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>',1),Bs={class:"line"},Ns=s("span",{style:{color:"#E1E4E8"}},"    ",-1),Ds={style:{color:"#9ECBFF"}},Os=s("span",{style:{color:"#E1E4E8"}}," ",-1),Is=s("span",{style:{color:"#79B8FF"}},"\\",-1),Vs=o('<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">light</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--p2p.network</span><span style="color:#E1E4E8;"> $NETWORK</span></span>',1),$s={class:"shiki github-light vp-code-light"},fs=o('<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">NODE_TYPE=</span><span style="color:#24292E;">$NODE_TYPE </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">P2P_NETWORK=</span><span style="color:#24292E;">$NETWORK </span><span style="color:#005CC5;">\\</span></span>',1),ws=o('<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> $HOME</span><span style="color:#032F62;">/my-node-store:/home/celestia</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>',1),Ks={class:"line"},Ws=s("span",{style:{color:"#24292E"}},"    ",-1),Ys={style:{color:"#032F62"}},xs=s("span",{style:{color:"#24292E"}}," ",-1),Ms=s("span",{style:{color:"#005CC5"}},"\\",-1),Ls=o('<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">celestia</span><span style="color:#24292E;"> </span><span style="color:#032F62;">light</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--p2p.network</span><span style="color:#24292E;"> $NETWORK</span></span>',1),qs={class:"language-bash vp-adaptive-theme"},Hs=s("button",{title:"Copy Code",class:"copy"},null,-1),Us=s("span",{class:"lang"},"bash",-1),zs={class:"shiki github-dark vp-code-dark"},Qs=o('<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">NODE_TYPE=</span><span style="color:#E1E4E8;">$NODE_TYPE </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">P2P_NETWORK=</span><span style="color:#E1E4E8;">$NETWORK </span><span style="color:#79B8FF;">\\</span></span>',1),Zs=o('<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> $HOME</span><span style="color:#9ECBFF;">/my-node-store:/home/celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>',1),Gs={class:"line"},js=s("span",{style:{color:"#E1E4E8"}},"    ",-1),Js={style:{color:"#9ECBFF"}},Xs=s("span",{style:{color:"#E1E4E8"}}," ",-1),so=s("span",{style:{color:"#79B8FF"}},"\\",-1),oo=o('<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">light</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--p2p.network</span><span style="color:#E1E4E8;"> $NETWORK</span></span>',1),ao={class:"shiki github-light vp-code-light"},no=o('<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">NODE_TYPE=</span><span style="color:#24292E;">$NODE_TYPE </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">P2P_NETWORK=</span><span style="color:#24292E;">$NETWORK </span><span style="color:#005CC5;">\\</span></span>',1),eo=o('<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> $HOME</span><span style="color:#032F62;">/my-node-store:/home/celestia</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>',1),lo={class:"line"},to=s("span",{style:{color:"#24292E"}},"    ",-1),po={style:{color:"#032F62"}},co=s("span",{style:{color:"#24292E"}}," ",-1),ro=s("span",{style:{color:"#005CC5"}},"\\",-1),_o=o('<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">celestia</span><span style="color:#24292E;"> </span><span style="color:#032F62;">light</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--p2p.network</span><span style="color:#24292E;"> $NETWORK</span></span>',1),io={class:"language-bash vp-adaptive-theme"},Eo=s("button",{title:"Copy Code",class:"copy"},null,-1),yo=s("span",{class:"lang"},"bash",-1),ho={class:"shiki github-dark vp-code-dark"},To=o('<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">NODE_TYPE=</span><span style="color:#E1E4E8;">$NODE_TYPE </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">P2P_NETWORK=</span><span style="color:#E1E4E8;">$NETWORK </span><span style="color:#79B8FF;">\\</span></span>',1),Fo=o('<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> $HOME</span><span style="color:#9ECBFF;">/my-node-store:/home/celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>',1),Co={class:"line"},uo=s("span",{style:{color:"#E1E4E8"}},"    ",-1),go={style:{color:"#9ECBFF"}},bo=s("span",{style:{color:"#E1E4E8"}}," ",-1),Po=s("span",{style:{color:"#79B8FF"}},"\\",-1),vo=o('<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">light</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--p2p.network</span><span style="color:#E1E4E8;"> $NETWORK</span></span>',1),ko={class:"shiki github-light vp-code-light"},Ao=o('<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">NODE_TYPE=</span><span style="color:#24292E;">$NODE_TYPE </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">P2P_NETWORK=</span><span style="color:#24292E;">$NETWORK </span><span style="color:#005CC5;">\\</span></span>',1),mo=o('<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> $HOME</span><span style="color:#032F62;">/my-node-store:/home/celestia</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>',1),Ro={class:"line"},So=s("span",{style:{color:"#24292E"}},"    ",-1),Bo={style:{color:"#032F62"}},No=s("span",{style:{color:"#24292E"}}," ",-1),Do=s("span",{style:{color:"#005CC5"}},"\\",-1),Oo=o('<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">celestia</span><span style="color:#24292E;"> </span><span style="color:#032F62;">light</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--p2p.network</span><span style="color:#24292E;"> $NETWORK</span></span>',1),Io=o(`<h3 id="start-the-node" tabindex="-1">Start the node <a class="header-anchor" href="#start-the-node" aria-label="Permalink to &quot;Start the node&quot;">‚Äã</a></h3><p>Run the following command to start the node:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># --volume == -v [local path]:[container path]</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> [...args] -v $HOME/my-node-store:/home/celestia \\</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">node-typ</span><span style="color:#E1E4E8;">e</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">start</span><span style="color:#E1E4E8;"> [...args]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># --volume == -v [local path]:[container path]</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> [...args] -v $HOME/my-node-store:/home/celestia \\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">celestia</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">node-typ</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">start</span><span style="color:#24292E;"> [...args]</span></span></code></pre></div><p>A full start command will look similar to below.</p>`,4),Vo={class:"vp-code-group vp-adaptive-theme"},$o=o('<div class="tabs"><input type="radio" name="group-4IGTC" id="tab-nfYcYpI" checked="checked"><label for="tab-nfYcYpI">Mainnet Beta</label><input type="radio" name="group-4IGTC" id="tab-9kJkaVS"><label for="tab-9kJkaVS">Mocha</label><input type="radio" name="group-4IGTC" id="tab-SUSThFZ"><label for="tab-SUSThFZ">Arabica</label></div>',1),fo={class:"blocks"},wo={class:"language-bash vp-adaptive-theme active"},Ko=s("button",{title:"Copy Code",class:"copy"},null,-1),Wo=s("span",{class:"lang"},"bash",-1),Yo={class:"shiki github-dark vp-code-dark"},xo=o('<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">NODE_TYPE=</span><span style="color:#E1E4E8;">$NODE_TYPE </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">P2P_NETWORK=</span><span style="color:#E1E4E8;">$NETWORK </span><span style="color:#79B8FF;">\\</span></span>',1),Mo=o('<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> $HOME</span><span style="color:#9ECBFF;">/my-node-store:/home/celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>',1),Lo={class:"line"},qo=s("span",{style:{color:"#E1E4E8"}},"    ",-1),Ho={style:{color:"#9ECBFF"}},Uo=s("span",{style:{color:"#E1E4E8"}}," ",-1),zo=s("span",{style:{color:"#79B8FF"}},"\\",-1),Qo=o('<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">light</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">start</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--core.ip</span><span style="color:#E1E4E8;"> $RPC_URL </span><span style="color:#79B8FF;">--core.port</span><span style="color:#E1E4E8;"> $RPC_PORT </span><span style="color:#79B8FF;">--p2p.network</span><span style="color:#E1E4E8;"> $NETWORK</span></span>',1),Zo={class:"shiki github-light vp-code-light"},Go=o('<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">NODE_TYPE=</span><span style="color:#24292E;">$NODE_TYPE </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">P2P_NETWORK=</span><span style="color:#24292E;">$NETWORK </span><span style="color:#005CC5;">\\</span></span>',1),jo=o('<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> $HOME</span><span style="color:#032F62;">/my-node-store:/home/celestia</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>',1),Jo={class:"line"},Xo=s("span",{style:{color:"#24292E"}},"    ",-1),sa={style:{color:"#032F62"}},oa=s("span",{style:{color:"#24292E"}}," ",-1),aa=s("span",{style:{color:"#005CC5"}},"\\",-1),na=o('<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">celestia</span><span style="color:#24292E;"> </span><span style="color:#032F62;">light</span><span style="color:#24292E;"> </span><span style="color:#032F62;">start</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--core.ip</span><span style="color:#24292E;"> $RPC_URL </span><span style="color:#005CC5;">--core.port</span><span style="color:#24292E;"> $RPC_PORT </span><span style="color:#005CC5;">--p2p.network</span><span style="color:#24292E;"> $NETWORK</span></span>',1),ea={class:"language-bash vp-adaptive-theme"},la=s("button",{title:"Copy Code",class:"copy"},null,-1),ta=s("span",{class:"lang"},"bash",-1),pa={class:"shiki github-dark vp-code-dark"},ca=o('<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">NODE_TYPE=</span><span style="color:#E1E4E8;">$NODE_TYPE </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">P2P_NETWORK=</span><span style="color:#E1E4E8;">$NETWORK </span><span style="color:#79B8FF;">\\</span></span>',1),ra=o('<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> $HOME</span><span style="color:#9ECBFF;">/my-node-store:/home/celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>',1),_a={class:"line"},ia=s("span",{style:{color:"#E1E4E8"}},"    ",-1),Ea={style:{color:"#9ECBFF"}},ya=s("span",{style:{color:"#E1E4E8"}}," ",-1),da=s("span",{style:{color:"#79B8FF"}},"\\",-1),ha=o('<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">light</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">start</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--core.ip</span><span style="color:#E1E4E8;"> $RPC_URL </span><span style="color:#79B8FF;">--core.port</span><span style="color:#E1E4E8;"> $RPC_PORT </span><span style="color:#79B8FF;">--p2p.network</span><span style="color:#E1E4E8;"> $NETWORK</span></span>',1),Ta={class:"shiki github-light vp-code-light"},Fa=o('<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">NODE_TYPE=</span><span style="color:#24292E;">$NODE_TYPE </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">P2P_NETWORK=</span><span style="color:#24292E;">$NETWORK </span><span style="color:#005CC5;">\\</span></span>',1),Ca=o('<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> $HOME</span><span style="color:#032F62;">/my-node-store:/home/celestia</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>',1),ua={class:"line"},ga=s("span",{style:{color:"#24292E"}},"    ",-1),ba={style:{color:"#032F62"}},Pa=s("span",{style:{color:"#24292E"}}," ",-1),va=s("span",{style:{color:"#005CC5"}},"\\",-1),ka=o('<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">celestia</span><span style="color:#24292E;"> </span><span style="color:#032F62;">light</span><span style="color:#24292E;"> </span><span style="color:#032F62;">start</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--core.ip</span><span style="color:#24292E;"> $RPC_URL </span><span style="color:#005CC5;">--core.port</span><span style="color:#24292E;"> $RPC_PORT </span><span style="color:#005CC5;">--p2p.network</span><span style="color:#24292E;"> $NETWORK</span></span>',1),Aa={class:"language-bash vp-adaptive-theme"},ma=s("button",{title:"Copy Code",class:"copy"},null,-1),Ra=s("span",{class:"lang"},"bash",-1),Sa={class:"shiki github-dark vp-code-dark"},Ba=o('<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">NODE_TYPE=</span><span style="color:#E1E4E8;">$NODE_TYPE </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">P2P_NETWORK=</span><span style="color:#E1E4E8;">$NETWORK </span><span style="color:#79B8FF;">\\</span></span>',1),Na=o('<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> $HOME</span><span style="color:#9ECBFF;">/my-node-store:/home/celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>',1),Da={class:"line"},Oa=s("span",{style:{color:"#E1E4E8"}},"    ",-1),Ia={style:{color:"#9ECBFF"}},Va=s("span",{style:{color:"#E1E4E8"}}," ",-1),$a=s("span",{style:{color:"#79B8FF"}},"\\",-1),fa=o('<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">light</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">start</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--core.ip</span><span style="color:#E1E4E8;"> $RPC_URL </span><span style="color:#79B8FF;">--core.port</span><span style="color:#E1E4E8;"> $RPC_PORT </span><span style="color:#79B8FF;">--p2p.network</span><span style="color:#E1E4E8;"> $NETWORK</span></span>',1),wa={class:"shiki github-light vp-code-light"},Ka=o('<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">NODE_TYPE=</span><span style="color:#24292E;">$NODE_TYPE </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">P2P_NETWORK=</span><span style="color:#24292E;">$NETWORK </span><span style="color:#005CC5;">\\</span></span>',1),Wa=o('<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> $HOME</span><span style="color:#032F62;">/my-node-store:/home/celestia</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>',1),Ya={class:"line"},xa=s("span",{style:{color:"#24292E"}},"    ",-1),Ma={style:{color:"#032F62"}},La=s("span",{style:{color:"#24292E"}}," ",-1),qa=s("span",{style:{color:"#005CC5"}},"\\",-1),Ha=o('<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">celestia</span><span style="color:#24292E;"> </span><span style="color:#032F62;">light</span><span style="color:#24292E;"> </span><span style="color:#032F62;">start</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--core.ip</span><span style="color:#24292E;"> $RPC_URL </span><span style="color:#005CC5;">--core.port</span><span style="color:#24292E;"> $RPC_PORT </span><span style="color:#005CC5;">--p2p.network</span><span style="color:#24292E;"> $NETWORK</span></span>',1),Ua=s("p",null,"Congratulations! You now have a node running with persistent storage.",-1),za=s("h2",{id:"video-walkthrough",tabindex:"-1"},[a("Video walkthrough "),s("a",{class:"header-anchor",href:"#video-walkthrough","aria-label":'Permalink to "Video walkthrough"'},"‚Äã")],-1),Qa=s("div",{class:"youtube-wrapper"},[s("iframe",{class:"youtube-video",title:"Running a Celestia light node",src:"https://youtube.com/embed/WFubhQc8tGk",allowfullscreen:""})],-1),Za=s("h3",{id:"_2-5-minute-version",tabindex:"-1"},[a("2.5 minute version "),s("a",{class:"header-anchor",href:"#_2-5-minute-version","aria-label":'Permalink to "2.5 minute version"'},"‚Äã")],-1),Ga=s("div",{class:"youtube-wrapper"},[s("iframe",{class:"youtube-video",title:"Running a Celestia light node",src:"https://youtube.com/embed/ROZv871Q7RM",allowfullscreen:""})],-1),ja=s("h2",{id:"troubleshooting",tabindex:"-1"},[a("Troubleshooting "),s("a",{class:"header-anchor",href:"#troubleshooting","aria-label":'Permalink to "Troubleshooting"'},"‚Äã")],-1),Ja=s("p",null,[a("For security purposes Celestia expects to interact with your node's keys in a read-only manner. This is enforced using linux style permissions on the filesystem. Windows NTFS does not support these types of permissions. As a result the recommended path for Windows users to mount a persisted volume is to do so within WSL. You can find "),s("a",{href:"https://learn.microsoft.com/en-us/windows/wsl/install",target:"_blank",rel:"noreferrer"},"instructions for installing WSL"),a(".")],-1),pn=JSON.parse('{"title":"üê≥ Docker setup","description":"Running Celestia Node using Docker.","frontmatter":{"sidebar_label":"Docker images","description":"Running Celestia Node using Docker.","head":[["meta",{"property":"og:title","content":"üê≥ Docker setup | Celestia Docs"}],["meta",{"property":"og:description","content":"Running Celestia Node using Docker."}]]},"headers":[],"relativePath":"how-to-guides/docker-images.md","filePath":"how-to-guides/docker-images.md","lastUpdated":1744342074000}'),Xa={name:"how-to-guides/docker-images.md"},cn=Object.assign(Xa,{setup(sn){return(on,an)=>(c(),r("div",null,[_,s("ol",null,[i,s("li",null,[E,s("div",y,[d,s("div",h,[s("div",T,[F,C,s("pre",u,[s("code",null,[g,a(`
`),s("span",b,[P,s("span",v,"ghcr.io/celestiaorg/celestia-node:"+n(e(p)["node-latest-tag"]),1),k,A]),a(`
`),m])]),s("pre",R,[s("code",null,[S,a(`
`),s("span",B,[N,s("span",D,"ghcr.io/celestiaorg/celestia-node:"+n(e(p)["node-latest-tag"]),1),O,I]),a(`
`),V])])]),s("div",$,[f,w,s("pre",K,[s("code",null,[W,a(`
`),s("span",Y,[x,s("span",M,"ghcr.io/celestiaorg/celestia-node:"+n(e(t)["node-latest-tag"]),1),L,q]),a(`
`),H])]),s("pre",U,[s("code",null,[z,a(`
`),s("span",Q,[Z,s("span",G,"ghcr.io/celestiaorg/celestia-node:"+n(e(t)["node-latest-tag"]),1),j,J]),a(`
`),X])])]),s("div",ss,[os,as,s("pre",ns,[s("code",null,[es,a(`
`),s("span",ls,[ts,s("span",ps,"ghcr.io/celestiaorg/celestia-node:"+n(e(l)["node-latest-tag"]),1),cs,rs]),a(`
`),_s])]),s("pre",is,[s("code",null,[Es,a(`
`),s("span",ys,[ds,s("span",hs,"ghcr.io/celestiaorg/celestia-node:"+n(e(l)["node-latest-tag"]),1),Ts,Fs]),a(`
`),Cs])])])])])])]),us,s("div",gs,[bs,s("div",Ps,[s("div",vs,[ks,As,s("pre",ms,[s("code",null,[Rs,a(`
`),Ss,a(`
`),s("span",Bs,[Ns,s("span",Ds,"ghcr.io/celestiaorg/celestia-node:"+n(e(p)["node-latest-tag"]),1),Os,Is]),a(`
`),Vs])]),s("pre",$s,[s("code",null,[fs,a(`
`),ws,a(`
`),s("span",Ks,[Ws,s("span",Ys,"ghcr.io/celestiaorg/celestia-node:"+n(e(p)["node-latest-tag"]),1),xs,Ms]),a(`
`),Ls])])]),s("div",qs,[Hs,Us,s("pre",zs,[s("code",null,[Qs,a(`
`),Zs,a(`
`),s("span",Gs,[js,s("span",Js,"ghcr.io/celestiaorg/celestia-node:"+n(e(t)["node-latest-tag"]),1),Xs,so]),a(`
`),oo])]),s("pre",ao,[s("code",null,[no,a(`
`),eo,a(`
`),s("span",lo,[to,s("span",po,"ghcr.io/celestiaorg/celestia-node:"+n(e(t)["node-latest-tag"]),1),co,ro]),a(`
`),_o])])]),s("div",io,[Eo,yo,s("pre",ho,[s("code",null,[To,a(`
`),Fo,a(`
`),s("span",Co,[uo,s("span",go,"ghcr.io/celestiaorg/celestia-node:"+n(e(l)["node-latest-tag"]),1),bo,Po]),a(`
`),vo])]),s("pre",ko,[s("code",null,[Ao,a(`
`),mo,a(`
`),s("span",Ro,[So,s("span",Bo,"ghcr.io/celestiaorg/celestia-node:"+n(e(l)["node-latest-tag"]),1),No,Do]),a(`
`),Oo])])])])]),Io,s("div",Vo,[$o,s("div",fo,[s("div",wo,[Ko,Wo,s("pre",Yo,[s("code",null,[xo,a(`
`),Mo,a(`
`),s("span",Lo,[qo,s("span",Ho,"ghcr.io/celestiaorg/celestia-node:"+n(e(p)["node-latest-tag"]),1),Uo,zo]),a(`
`),Qo])]),s("pre",Zo,[s("code",null,[Go,a(`
`),jo,a(`
`),s("span",Jo,[Xo,s("span",sa,"ghcr.io/celestiaorg/celestia-node:"+n(e(p)["node-latest-tag"]),1),oa,aa]),a(`
`),na])])]),s("div",ea,[la,ta,s("pre",pa,[s("code",null,[ca,a(`
`),ra,a(`
`),s("span",_a,[ia,s("span",Ea,"ghcr.io/celestiaorg/celestia-node:"+n(e(t)["node-latest-tag"]),1),ya,da]),a(`
`),ha])]),s("pre",Ta,[s("code",null,[Fa,a(`
`),Ca,a(`
`),s("span",ua,[ga,s("span",ba,"ghcr.io/celestiaorg/celestia-node:"+n(e(t)["node-latest-tag"]),1),Pa,va]),a(`
`),ka])])]),s("div",Aa,[ma,Ra,s("pre",Sa,[s("code",null,[Ba,a(`
`),Na,a(`
`),s("span",Da,[Oa,s("span",Ia,"ghcr.io/celestiaorg/celestia-node:"+n(e(l)["node-latest-tag"]),1),Va,$a]),a(`
`),fa])]),s("pre",wa,[s("code",null,[Ka,a(`
`),Wa,a(`
`),s("span",Ya,[xa,s("span",Ma,"ghcr.io/celestiaorg/celestia-node:"+n(e(l)["node-latest-tag"]),1),La,qa]),a(`
`),Ha])])])])]),Ua,za,Qa,Za,Ga,ja,Ja]))}});export{pn as __pageData,cn as default};
