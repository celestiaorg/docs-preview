import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.6b95a6f6.js";const h=JSON.parse('{"title":"Prompt scavenger","description":"Learn how to interact with the Celestia Node API with this tutorial.","frontmatter":{"description":"Learn how to interact with the Celestia Node API with this tutorial.","prev":{"text":"Rust client tutorial","link":"/tutorials/rust-client-tutorial"},"head":[["meta",{"property":"og:title","content":"Prompt scavenger | Celestia Docs"}],["meta",{"property":"og:description","content":"Learn how to interact with the Celestia Node API with this tutorial."}]]},"headers":[],"relativePath":"tutorials/prompt-scavenger.md","filePath":"tutorials/prompt-scavenger.md","lastUpdated":1744642638000}'),p={name:"tutorials/prompt-scavenger.md"},o=l(`<h1 id="prompt-scavenger" tabindex="-1">Prompt scavenger <a class="header-anchor" href="#prompt-scavenger" aria-label="Permalink to &quot;Prompt scavenger&quot;">​</a></h1><p>Welcome to the world of Prompt Scavenger, a game where you’ll be using Celestia’s Node API and OpenAI’s GPT-3.5 to decode hidden messages scattered throughout Celestia’s blockchain. In this tutorial, we’ll be using Golang to write the code for the game.</p><p>Through this tutorial, you’ll gain experience using Celestia’s Node API to fetch data from the blockchain, process it, and submit new transactions with that data. You’ll also learn how to integrate OpenAI’s GPT-3.5 API to generate fun responses based on the data you’ve found.</p><p>So if you’re ready to embark on an adventure that combines blockchain technology with the power of AI, and learn some Golang along the way, let’s get started!</p><h2 id="dependencies" tabindex="-1">Dependencies <a class="header-anchor" href="#dependencies" aria-label="Permalink to &quot;Dependencies&quot;">​</a></h2><p>The following dependencies are needed to be installed or obtained:</p><ul><li>Golang, see <a href="/docs-preview/pr-1983/how-to-guides/environment">setting up environment</a></li><li>Celestia <a href="/docs-preview/pr-1983/how-to-guides/light-node">light node</a></li><li>Getting an OpenAI API Key for GPT-3.5</li></ul><h3 id="install-celestia-node-and-run-a-light-node" tabindex="-1">Install Celestia Node and run a light node <a class="header-anchor" href="#install-celestia-node-and-run-a-light-node" aria-label="Permalink to &quot;Install Celestia Node and run a light node&quot;">​</a></h3><p>First, <a href="/docs-preview/pr-1983/how-to-guides/celestia-node">install the celestia-node binary</a>.</p><p>Let&#39;s start by initializing our light node and funding our account with some tokens. We will be using the Arabica testnet for this tutorial.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">light</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--p2p.network</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">arabica</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">celestia</span><span style="color:#24292E;"> </span><span style="color:#032F62;">light</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--p2p.network</span><span style="color:#24292E;"> </span><span style="color:#032F62;">arabica</span></span></code></pre></div><p>You will see an output ending with something looking like this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">2024-05-22T14:15:49.554+0200	INFO	node	nodebuilder/init.go:211	NO KEY FOUND IN STORE, GENERATING NEW KEY...</span></span>
<span class="line"><span style="color:#e1e4e8;">2024-05-22T14:15:49.564+0200	INFO	node	nodebuilder/init.go:216	NEW KEY GENERATED...</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">NAME: my_celes_key</span></span>
<span class="line"><span style="color:#e1e4e8;">ADDRESS: celestia1hn25k7gkfq0fy5a0vmphs6mjma2de74gsn36ef</span></span>
<span class="line"><span style="color:#e1e4e8;">MNEMONIC (save this somewhere safe!!!):</span></span>
<span class="line"><span style="color:#e1e4e8;">**** **** **** ****</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">2024-05-22T14:15:49.554+0200	INFO	node	nodebuilder/init.go:211	NO KEY FOUND IN STORE, GENERATING NEW KEY...</span></span>
<span class="line"><span style="color:#24292e;">2024-05-22T14:15:49.564+0200	INFO	node	nodebuilder/init.go:216	NEW KEY GENERATED...</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">NAME: my_celes_key</span></span>
<span class="line"><span style="color:#24292e;">ADDRESS: celestia1hn25k7gkfq0fy5a0vmphs6mjma2de74gsn36ef</span></span>
<span class="line"><span style="color:#24292e;">MNEMONIC (save this somewhere safe!!!):</span></span>
<span class="line"><span style="color:#24292e;">**** **** **** ****</span></span></code></pre></div><p>To fund your account, copy the address from the &quot;ADDRESS&quot; log and paste it in the <a href="https://faucet.celestia-arabica-11.com/" target="_blank" rel="noreferrer">Arabica Faucet</a> to request tokens.</p><p>While waiting for our account to be funded, we can start our light node.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">light</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">start</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--core.ip</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">validator-1.celestia-arabica-11.com</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--core.port</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">9090</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--p2p.network</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">arabica</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--rpc.skip-auth</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">celestia</span><span style="color:#24292E;"> </span><span style="color:#032F62;">light</span><span style="color:#24292E;"> </span><span style="color:#032F62;">start</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--core.ip</span><span style="color:#24292E;"> </span><span style="color:#032F62;">validator-1.celestia-arabica-11.com</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--core.port</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">9090</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--p2p.network</span><span style="color:#24292E;"> </span><span style="color:#032F62;">arabica</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--rpc.skip-auth</span></span></code></pre></div><p>You should now have a running light node on your machine. The rest of the tutorial will assume you will be building the script and running it where the light node is in your localhost.</p><p>We can now check if your account has been successfully funded by running the following command. If your balance is still 0, wait a few seconds and try again.</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">state</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">balance</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--node.store</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">~/.celestia-light-arabica-11</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">celestia</span><span style="color:#24292E;"> </span><span style="color:#032F62;">state</span><span style="color:#24292E;"> </span><span style="color:#032F62;">balance</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--node.store</span><span style="color:#24292E;"> </span><span style="color:#032F62;">~/.celestia-light-arabica-11</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Make sure you run this command in a different terminal window because the node has to be running for it to work.</p></div><h3 id="openai-key" tabindex="-1">OpenAI key <a class="header-anchor" href="#openai-key" aria-label="Permalink to &quot;OpenAI key&quot;">​</a></h3><p>Visit <a href="https://platform.openai.com/signup" target="_blank" rel="noreferrer">OpenAI</a> to sign up for an account and generate an API key. In order to sign up for an account and generate an OpenAI API key. The key will be needed to communicate with OpenAI.</p><p>Once you have created an API key, set it as an environment variable with the following command, pasting in your own key:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> OPENAI_KEY</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">sk-proj-xxxxxxxxxxxxxxxxxxxxxxxx</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> OPENAI_KEY</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">sk-proj-xxxxxxxxxxxxxxxxxxxxxxxx</span></span></code></pre></div><h2 id="building-the-prompt-scavenger" tabindex="-1">Building the Prompt Scavenger <a class="header-anchor" href="#building-the-prompt-scavenger" aria-label="Permalink to &quot;Building the Prompt Scavenger&quot;">​</a></h2><h3 id="initialize-your-go-project" tabindex="-1">Initialize your Go project <a class="header-anchor" href="#initialize-your-go-project" aria-label="Permalink to &quot;Initialize your Go project&quot;">​</a></h3><p>To initialize your go project, run the following commands:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">mkdir</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_scavenger</span></span>
<span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_scavenger</span></span>
<span class="line"><span style="color:#B392F0;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mod</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">prompt-scavenger</span></span>
<span class="line"><span style="color:#B392F0;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">github.com/celestiaorg/celestia-openrpc</span></span>
<span class="line"><span style="color:#B392F0;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">github.com/sashabaranov/go-openai</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">mkdir</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_scavenger</span></span>
<span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_scavenger</span></span>
<span class="line"><span style="color:#6F42C1;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span><span style="color:#24292E;"> </span><span style="color:#032F62;">prompt-scavenger</span></span>
<span class="line"><span style="color:#6F42C1;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">github.com/celestiaorg/celestia-openrpc</span></span>
<span class="line"><span style="color:#6F42C1;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">github.com/sashabaranov/go-openai</span></span></code></pre></div><p>This will set up a go project in a new directory and download the required modules.</p><h3 id="build-your-import-statements" tabindex="-1">Build your import statements <a class="header-anchor" href="#build-your-import-statements" aria-label="Permalink to &quot;Build your import statements&quot;">​</a></h3><p>Inside the directory, create a <code>main.go</code> file and setup the import statements:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">context</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">encoding/hex</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">fmt</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">log</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">os</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#B392F0;">nodeclient</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/celestiaorg/celestia-openrpc</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/celestiaorg/celestia-openrpc/types/blob</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/celestiaorg/celestia-openrpc/types/share</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	 </span><span style="color:#B392F0;">openai</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/sashabaranov/go-openai</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// TODO:</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// - [ ] Load program arguments</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// - [ ] Initialize the node API client</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// - [ ] Create a namespace ID</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// - [ ] Create and submit a blob</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// - [ ] Retrieve the blob from the network</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// - [ ] Prompt chatgpt with the retrieved blob data</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">context</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">encoding/hex</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">fmt</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">log</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">os</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6F42C1;">nodeclient</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/celestiaorg/celestia-openrpc</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/celestiaorg/celestia-openrpc/types/blob</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/celestiaorg/celestia-openrpc/types/share</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	 </span><span style="color:#6F42C1;">openai</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/sashabaranov/go-openai</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// TODO:</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// - [ ] Load program arguments</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// - [ ] Initialize the node API client</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// - [ ] Create a namespace ID</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// - [ ] Create and submit a blob</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// - [ ] Retrieve the blob from the network</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// - [ ] Prompt chatgpt with the retrieved blob data</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Here we set up all required libraries we need to use plus the <code>main</code> function that we will use for our program. function that we will use for our program.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Depending on your IDE, unused import statements may be removed every time you save the file. If this is the case, come back to this section and add them one by one as they come up in the code snippets.</p></div><h3 id="main-function" tabindex="-1">Main function <a class="header-anchor" href="#main-function" aria-label="Permalink to &quot;Main function&quot;">​</a></h3><p>Let&#39;s start populating our main function. To begin, we need to load the arguments we pass to the program. and do some sanity checks. We will then initialize the node API client.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	ctx, cancel </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#79B8FF;">WithCancel</span><span style="color:#E1E4E8;">(context.</span><span style="color:#79B8FF;">Background</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cancel</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Get IP, namespace, and prompt from program arguments</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(os.Args) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		log.</span><span style="color:#79B8FF;">Fatal</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Usage: go run main.go &lt;nodeIP&gt; &lt;namespace&gt; &lt;prompt&gt;&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	nodeIP, namespaceHex, prompt </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> os.Args[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">], os.Args[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">], os.Args[</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// We pass an empty string as the jwt token, since we</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// disabled auth with the --rpc.skip-auth flag</span></span>
<span class="line"><span style="color:#E1E4E8;">	client, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> nodeclient.</span><span style="color:#79B8FF;">NewClient</span><span style="color:#E1E4E8;">(ctx, nodeIP, </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		log.</span><span style="color:#79B8FF;">Fatalf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Failed to create client: </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> client.</span><span style="color:#79B8FF;">Close</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// TODO:</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// - [X] Load program arguments</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// - [X] Initialize the node API client</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// - [ ] Create a namespace ID</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// - [ ] Create and submit a blob</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// - [ ] Retrieve the blob from the network</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// - [ ] Prompt chatgpt with the retrieved blob data</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	ctx, cancel </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> context.</span><span style="color:#005CC5;">WithCancel</span><span style="color:#24292E;">(context.</span><span style="color:#005CC5;">Background</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cancel</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Get IP, namespace, and prompt from program arguments</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(os.Args) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		log.</span><span style="color:#005CC5;">Fatal</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Usage: go run main.go &lt;nodeIP&gt; &lt;namespace&gt; &lt;prompt&gt;&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	nodeIP, namespaceHex, prompt </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> os.Args[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], os.Args[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">], os.Args[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// We pass an empty string as the jwt token, since we</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// disabled auth with the --rpc.skip-auth flag</span></span>
<span class="line"><span style="color:#24292E;">	client, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> nodeclient.</span><span style="color:#005CC5;">NewClient</span><span style="color:#24292E;">(ctx, nodeIP, </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		log.</span><span style="color:#005CC5;">Fatalf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Failed to create client: </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> client.</span><span style="color:#005CC5;">Close</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// TODO:</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// - [X] Load program arguments</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// - [X] Initialize the node API client</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// - [ ] Create a namespace ID</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// - [ ] Create and submit a blob</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// - [ ] Retrieve the blob from the network</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// - [ ] Prompt chatgpt with the retrieved blob data</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Next, we need to create some utility functions that will help us with our next TODO items.</p><h3 id="utility-functions" tabindex="-1">Utility functions <a class="header-anchor" href="#utility-functions" aria-label="Permalink to &quot;Utility functions&quot;">​</a></h3><p>First, we need a function to convert a hex string to a <code>NamespaceID</code> type that is used for blob creation. This is needed because the namespace we pass in the program arguments will be in hexadecimal format.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// createNamespaceID converts a hex string to a NamespaceID</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createNamespaceID</span><span style="color:#E1E4E8;">(nIDString </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) (share.Namespace, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// First, we parse the passed hex string into a []byte slice</span></span>
<span class="line"><span style="color:#E1E4E8;">	namespaceBytes, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> hex.</span><span style="color:#79B8FF;">DecodeString</span><span style="color:#E1E4E8;">(nIDString)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;error decoding hex string: </span><span style="color:#79B8FF;">%w</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Next, we create a new NamespaceID using the parsed bytes</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> share.</span><span style="color:#79B8FF;">NewBlobNamespaceV0</span><span style="color:#E1E4E8;">(namespaceBytes)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// createNamespaceID converts a hex string to a NamespaceID</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createNamespaceID</span><span style="color:#24292E;">(nIDString </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) (share.Namespace, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// First, we parse the passed hex string into a []byte slice</span></span>
<span class="line"><span style="color:#24292E;">	namespaceBytes, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> hex.</span><span style="color:#005CC5;">DecodeString</span><span style="color:#24292E;">(nIDString)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;error decoding hex string: </span><span style="color:#005CC5;">%w</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Next, we create a new NamespaceID using the parsed bytes</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> share.</span><span style="color:#005CC5;">NewBlobNamespaceV0</span><span style="color:#24292E;">(namespaceBytes)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Next, we need a utility that takes the namespace generated by <code>createNamespaceID</code> and constructs and submits a blob to the network.</p><p>If successful, it returns the created blob, the height at which it was posted, and an empty error. Otherwise, only the error field is populated.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// createAndSubmitBlob creates a new blob and submits it to the network.</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createAndSubmitBlob</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">	ctx context.Context,</span></span>
<span class="line"><span style="color:#E1E4E8;">	client </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">nodeclient.Client,</span></span>
<span class="line"><span style="color:#E1E4E8;">	ns share.Namespace,</span></span>
<span class="line"><span style="color:#E1E4E8;">	payload </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">blob.Blob, </span><span style="color:#F97583;">uint64</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// First we can create the blob using the namespace and payload.</span></span>
<span class="line"><span style="color:#E1E4E8;">	createdBlob, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> blob.</span><span style="color:#79B8FF;">NewBlobV0</span><span style="color:#E1E4E8;">(ns, []</span><span style="color:#79B8FF;">byte</span><span style="color:#E1E4E8;">(payload))</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Failed to create blob: </span><span style="color:#79B8FF;">%w</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// After we&#39;ve created the blob, we can submit it to the network.</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Here we use the default gas price.</span></span>
<span class="line"><span style="color:#E1E4E8;">	height, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> client.Blob.</span><span style="color:#79B8FF;">Submit</span><span style="color:#E1E4E8;">(ctx, []</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">blob.Blob{createdBlob}, blob.</span><span style="color:#79B8FF;">DefaultGasPrice</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Failed to submit blob: </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	log.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Blob submitted successfully at height: </span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">! </span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, height)</span></span>
<span class="line"><span style="color:#E1E4E8;">	log.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Explorer link: https://arabica.celenium.io/block/</span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, height)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> createdBlob, height, </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// createAndSubmitBlob creates a new blob and submits it to the network.</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createAndSubmitBlob</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">	ctx context.Context,</span></span>
<span class="line"><span style="color:#24292E;">	client </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">nodeclient.Client,</span></span>
<span class="line"><span style="color:#24292E;">	ns share.Namespace,</span></span>
<span class="line"><span style="color:#24292E;">	payload </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">blob.Blob, </span><span style="color:#D73A49;">uint64</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// First we can create the blob using the namespace and payload.</span></span>
<span class="line"><span style="color:#24292E;">	createdBlob, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> blob.</span><span style="color:#005CC5;">NewBlobV0</span><span style="color:#24292E;">(ns, []</span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(payload))</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Failed to create blob: </span><span style="color:#005CC5;">%w</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// After we&#39;ve created the blob, we can submit it to the network.</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Here we use the default gas price.</span></span>
<span class="line"><span style="color:#24292E;">	height, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> client.Blob.</span><span style="color:#005CC5;">Submit</span><span style="color:#24292E;">(ctx, []</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">blob.Blob{createdBlob}, blob.</span><span style="color:#005CC5;">DefaultGasPrice</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Failed to submit blob: </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	log.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Blob submitted successfully at height: </span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">! </span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, height)</span></span>
<span class="line"><span style="color:#24292E;">	log.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Explorer link: https://arabica.celenium.io/block/</span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> </span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, height)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> createdBlob, height, </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>With our updated main function, we can now call these utility functions to check off our next TODO items.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	ctx, cancel </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#79B8FF;">WithCancel</span><span style="color:#E1E4E8;">(context.</span><span style="color:#79B8FF;">Background</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cancel</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Get IP, namespace, and prompt from program arguments</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(os.Args) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		log.</span><span style="color:#79B8FF;">Fatal</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Usage: go run main.go &lt;nodeIP&gt; &lt;namespace&gt; &lt;prompt&gt;&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	nodeIP, namespaceHex, prompt </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> os.Args[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">], os.Args[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">], os.Args[</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// We pass an empty string as the jwt token, since we</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// disabled auth with the --rpc.skip-auth flag</span></span>
<span class="line"><span style="color:#E1E4E8;">	client, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> nodeclient.</span><span style="color:#79B8FF;">NewClient</span><span style="color:#E1E4E8;">(ctx, nodeIP, </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		log.</span><span style="color:#79B8FF;">Fatalf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Failed to create client: </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> client.</span><span style="color:#79B8FF;">Close</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Next, we convert the namespace hex string to the</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// concrete NamespaceID type</span></span>
<span class="line"><span style="color:#E1E4E8;">	namespaceID, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">createNamespaceID</span><span style="color:#E1E4E8;">(namespaceHex)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		log.</span><span style="color:#79B8FF;">Fatalf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Failed to decode namespace: </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// We can then create and submit a blob using the NamespaceID and our prompt.</span></span>
<span class="line"><span style="color:#E1E4E8;">	createdBlob, height, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">createAndSubmitBlob</span><span style="color:#E1E4E8;">(ctx, client, namespaceID, prompt)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		log.</span><span style="color:#79B8FF;">Fatal</span><span style="color:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Now we will fetch the blob back from the network, using the height, namespace, and blob commitment.</span></span>
<span class="line"><span style="color:#E1E4E8;">	fetchedBlob, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> client.Blob.</span><span style="color:#79B8FF;">Get</span><span style="color:#E1E4E8;">(ctx, height, namespaceID, createdBlob.Commitment)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		log.</span><span style="color:#79B8FF;">Fatalf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Failed to fetch blob: </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	log.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Fetched blob: </span><span style="color:#79B8FF;">%s\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">(fetchedBlob.Data))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// TODO:</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// - [X] Load program arguments</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// - [X] Initialize the node API client</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// - [X] Create a namespace ID</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// - [X] Create and submit a blob</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// - [X] Retrieve the blob from the network</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// - [ ] Prompt chatgpt with the retrieved blob data</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	ctx, cancel </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> context.</span><span style="color:#005CC5;">WithCancel</span><span style="color:#24292E;">(context.</span><span style="color:#005CC5;">Background</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cancel</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Get IP, namespace, and prompt from program arguments</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(os.Args) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		log.</span><span style="color:#005CC5;">Fatal</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Usage: go run main.go &lt;nodeIP&gt; &lt;namespace&gt; &lt;prompt&gt;&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	nodeIP, namespaceHex, prompt </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> os.Args[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], os.Args[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">], os.Args[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// We pass an empty string as the jwt token, since we</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// disabled auth with the --rpc.skip-auth flag</span></span>
<span class="line"><span style="color:#24292E;">	client, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> nodeclient.</span><span style="color:#005CC5;">NewClient</span><span style="color:#24292E;">(ctx, nodeIP, </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		log.</span><span style="color:#005CC5;">Fatalf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Failed to create client: </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> client.</span><span style="color:#005CC5;">Close</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Next, we convert the namespace hex string to the</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// concrete NamespaceID type</span></span>
<span class="line"><span style="color:#24292E;">	namespaceID, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">createNamespaceID</span><span style="color:#24292E;">(namespaceHex)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		log.</span><span style="color:#005CC5;">Fatalf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Failed to decode namespace: </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// We can then create and submit a blob using the NamespaceID and our prompt.</span></span>
<span class="line"><span style="color:#24292E;">	createdBlob, height, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">createAndSubmitBlob</span><span style="color:#24292E;">(ctx, client, namespaceID, prompt)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		log.</span><span style="color:#005CC5;">Fatal</span><span style="color:#24292E;">(err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Now we will fetch the blob back from the network, using the height, namespace, and blob commitment.</span></span>
<span class="line"><span style="color:#24292E;">	fetchedBlob, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> client.Blob.</span><span style="color:#005CC5;">Get</span><span style="color:#24292E;">(ctx, height, namespaceID, createdBlob.Commitment)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		log.</span><span style="color:#005CC5;">Fatalf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Failed to fetch blob: </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	log.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Fetched blob: </span><span style="color:#005CC5;">%s\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">(fetchedBlob.Data))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// TODO:</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// - [X] Load program arguments</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// - [X] Initialize the node API client</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// - [X] Create a namespace ID</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// - [X] Create and submit a blob</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// - [X] Retrieve the blob from the network</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// - [ ] Prompt chatgpt with the retrieved blob data</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Alternatively to <code>client.Blob.Get</code>, you could also use <code>client.Blob.GetAll(ctx, height, []share.Namespace{namespaceID})</code> which fetches all blobs in the namespace at the given height.</p></div><p>Now our program is able to create the namespace and blob, then submit and fetch it from the arabica network. The next step is to prompt ChatGPT with the fetched blob data.</p><h3 id="prompting-chatgpt" tabindex="-1">Prompting ChatGPT <a class="header-anchor" href="#prompting-chatgpt" aria-label="Permalink to &quot;Prompting ChatGPT&quot;">​</a></h3><p>First, we need one more utility function to help us prompt GPT-3.5. It reads the <code>OPENAI_KEY</code> environment variable and uses it to create a new GPT-3 client, which it uses to prompt and retrieve the answer.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// gpt3 processes a given message using GPT-3 and returns the response.</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">gpt3</span><span style="color:#E1E4E8;">(ctx context.Context, msg </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) (</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Set the authentication header</span></span>
<span class="line"><span style="color:#E1E4E8;">    openAIKey </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> os.</span><span style="color:#79B8FF;">Getenv</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;OPENAI_KEY&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">   	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> openAIKey </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">, fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;OPENAI_KEY environment variable not set&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    client </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> openai.</span><span style="color:#79B8FF;">NewClient</span><span style="color:#E1E4E8;">(openAIKey)</span></span>
<span class="line"><span style="color:#E1E4E8;">    resp, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#79B8FF;">CreateChatCompletion</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">		ctx,</span></span>
<span class="line"><span style="color:#E1E4E8;">        openai.ChatCompletionRequest{</span></span>
<span class="line"><span style="color:#E1E4E8;">            Model: openai.GPT3Dot5Turbo,</span></span>
<span class="line"><span style="color:#E1E4E8;">            Messages: []openai.ChatCompletionMessage{</span></span>
<span class="line"><span style="color:#E1E4E8;">                {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    Role:    openai.ChatMessageRoleUser,</span></span>
<span class="line"><span style="color:#E1E4E8;">                    Content: msg,</span></span>
<span class="line"><span style="color:#E1E4E8;">                },</span></span>
<span class="line"><span style="color:#E1E4E8;">            },</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">       	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">, fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ChatCompletion error: </span><span style="color:#79B8FF;">%w</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> resp.Choices[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].Message.Content, </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// gpt3 processes a given message using GPT-3 and returns the response.</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">gpt3</span><span style="color:#24292E;">(ctx context.Context, msg </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) (</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Set the authentication header</span></span>
<span class="line"><span style="color:#24292E;">    openAIKey </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> os.</span><span style="color:#005CC5;">Getenv</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;OPENAI_KEY&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">   	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> openAIKey </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">, fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;OPENAI_KEY environment variable not set&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    client </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> openai.</span><span style="color:#005CC5;">NewClient</span><span style="color:#24292E;">(openAIKey)</span></span>
<span class="line"><span style="color:#24292E;">    resp, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> client.</span><span style="color:#005CC5;">CreateChatCompletion</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">		ctx,</span></span>
<span class="line"><span style="color:#24292E;">        openai.ChatCompletionRequest{</span></span>
<span class="line"><span style="color:#24292E;">            Model: openai.GPT3Dot5Turbo,</span></span>
<span class="line"><span style="color:#24292E;">            Messages: []openai.ChatCompletionMessage{</span></span>
<span class="line"><span style="color:#24292E;">                {</span></span>
<span class="line"><span style="color:#24292E;">                    Role:    openai.ChatMessageRoleUser,</span></span>
<span class="line"><span style="color:#24292E;">                    Content: msg,</span></span>
<span class="line"><span style="color:#24292E;">                },</span></span>
<span class="line"><span style="color:#24292E;">            },</span></span>
<span class="line"><span style="color:#24292E;">        },</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">       	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">, fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ChatCompletion error: </span><span style="color:#005CC5;">%w</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> resp.Choices[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].Message.Content, </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="wrapping-things-up" tabindex="-1">Wrapping things up <a class="header-anchor" href="#wrapping-things-up" aria-label="Permalink to &quot;Wrapping things up&quot;">​</a></h3><p>Now, we will update our <code>main</code> function to finish our last TODO item: prompting CHATGPT with the fetched blob data.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	ctx, cancel </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#79B8FF;">WithCancel</span><span style="color:#E1E4E8;">(context.</span><span style="color:#79B8FF;">Background</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cancel</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Get IP, namespace, and prompt from program arguments</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(os.Args) </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		log.</span><span style="color:#79B8FF;">Fatal</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Usage: go run main.go &lt;nodeIP&gt; &lt;namespace&gt; &lt;prompt&gt;&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	nodeIP, namespaceHex, prompt </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> os.Args[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">], os.Args[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">], os.Args[</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// We pass an empty string as the jwt token, since we</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// disabled auth with the --rpc.skip-auth flag</span></span>
<span class="line"><span style="color:#E1E4E8;">	client, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> nodeclient.</span><span style="color:#79B8FF;">NewClient</span><span style="color:#E1E4E8;">(ctx, nodeIP, </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		log.</span><span style="color:#79B8FF;">Fatalf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Failed to create client: </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> client.</span><span style="color:#79B8FF;">Close</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Next, we convert the namespace hex string to the</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// concrete NamespaceID type</span></span>
<span class="line"><span style="color:#E1E4E8;">	namespaceID, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">createNamespaceID</span><span style="color:#E1E4E8;">(namespaceHex)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		log.</span><span style="color:#79B8FF;">Fatalf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Failed to decode namespace: </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// We can then create and submit a blob using the NamespaceID and our prompt.</span></span>
<span class="line"><span style="color:#E1E4E8;">	createdBlob, height, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">createAndSubmitBlob</span><span style="color:#E1E4E8;">(ctx, client, namespaceID, prompt)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		log.</span><span style="color:#79B8FF;">Fatal</span><span style="color:#E1E4E8;">(err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Now we will fetch the blob back from the network.</span></span>
<span class="line"><span style="color:#E1E4E8;">	fetchedBlob, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> client.Blob.</span><span style="color:#79B8FF;">Get</span><span style="color:#E1E4E8;">(ctx, height, namespaceID, createdBlob.Commitment)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		log.</span><span style="color:#79B8FF;">Fatalf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Failed to fetch blob: </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	log.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Fetched blob: </span><span style="color:#79B8FF;">%s\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">(fetchedBlob.Data))</span></span>
<span class="line"><span style="color:#E1E4E8;">	promptAnswer, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">gpt3</span><span style="color:#E1E4E8;">(ctx, </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">(fetchedBlob.Data))</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		log.</span><span style="color:#79B8FF;">Fatalf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Failed to process message with GPT-3: </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	log.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;GPT-3 response: </span><span style="color:#79B8FF;">%s\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, promptAnswer)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	ctx, cancel </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> context.</span><span style="color:#005CC5;">WithCancel</span><span style="color:#24292E;">(context.</span><span style="color:#005CC5;">Background</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cancel</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Get IP, namespace, and prompt from program arguments</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(os.Args) </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		log.</span><span style="color:#005CC5;">Fatal</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Usage: go run main.go &lt;nodeIP&gt; &lt;namespace&gt; &lt;prompt&gt;&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	nodeIP, namespaceHex, prompt </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> os.Args[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">], os.Args[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">], os.Args[</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// We pass an empty string as the jwt token, since we</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// disabled auth with the --rpc.skip-auth flag</span></span>
<span class="line"><span style="color:#24292E;">	client, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> nodeclient.</span><span style="color:#005CC5;">NewClient</span><span style="color:#24292E;">(ctx, nodeIP, </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		log.</span><span style="color:#005CC5;">Fatalf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Failed to create client: </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> client.</span><span style="color:#005CC5;">Close</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Next, we convert the namespace hex string to the</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// concrete NamespaceID type</span></span>
<span class="line"><span style="color:#24292E;">	namespaceID, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">createNamespaceID</span><span style="color:#24292E;">(namespaceHex)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		log.</span><span style="color:#005CC5;">Fatalf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Failed to decode namespace: </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// We can then create and submit a blob using the NamespaceID and our prompt.</span></span>
<span class="line"><span style="color:#24292E;">	createdBlob, height, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">createAndSubmitBlob</span><span style="color:#24292E;">(ctx, client, namespaceID, prompt)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		log.</span><span style="color:#005CC5;">Fatal</span><span style="color:#24292E;">(err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Now we will fetch the blob back from the network.</span></span>
<span class="line"><span style="color:#24292E;">	fetchedBlob, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> client.Blob.</span><span style="color:#005CC5;">Get</span><span style="color:#24292E;">(ctx, height, namespaceID, createdBlob.Commitment)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		log.</span><span style="color:#005CC5;">Fatalf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Failed to fetch blob: </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	log.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Fetched blob: </span><span style="color:#005CC5;">%s\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">(fetchedBlob.Data))</span></span>
<span class="line"><span style="color:#24292E;">	promptAnswer, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">gpt3</span><span style="color:#24292E;">(ctx, </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">(fetchedBlob.Data))</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		log.</span><span style="color:#005CC5;">Fatalf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Failed to process message with GPT-3: </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	log.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;GPT-3 response: </span><span style="color:#005CC5;">%s\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, promptAnswer)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>And now you have the final version of the prompt scavenger!</p><p>Run the golang script with the following command:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">main.go</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">nodeI</span><span style="color:#E1E4E8;">P</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">namespac</span><span style="color:#E1E4E8;">e</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">promp</span><span style="color:#E1E4E8;">t</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">main.go</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">nodeI</span><span style="color:#24292E;">P</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">namespac</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">promp</span><span style="color:#24292E;">t</span><span style="color:#D73A49;">&gt;</span></span></code></pre></div><p>For example, you could run:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">main.go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ws://localhost:26658</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">ce1e5714</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;What is a modular blockchain?&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">main.go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ws://localhost:26658</span><span style="color:#24292E;"> </span><span style="color:#032F62;">ce1e5714</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;What is a modular blockchain?&#39;</span></span></code></pre></div><p>After some time, it’ll post the output of the prompt you submitted to OpenAI that you pulled from Celestia’s blockchain.</p><h2 id="next-steps" tabindex="-1">Next steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next steps&quot;">​</a></h2><p>With this tutorial, you were able to construct a blob, submit it to Celestia, get it back from Celestia, decode its contents, then for added bonus, submit the message to GPT-3.5.</p><p>If you&#39;re up for a challenge, you can refer to the Node API <a href="/docs-preview/pr-1983/tutorials/golang-client-tutorial">client guide</a> and try to implement more advanced features, such as:</p><ul><li>Subscribing to new prompts inside the <code>ce1e5714</code> namespace, submitting each one to GPT-3.5</li><li>Posting the responses back to Celestia under a different namespace.</li></ul>`,64),e=[o];function t(c,r,E,y,i,F){return n(),a("div",null,e)}const u=s(p,[["render",t]]);export{h as __pageData,u as default};
