import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.718fdbd3.js";const d=JSON.parse('{"title":"Golang client library tutorial","description":"","frontmatter":{"head":[["meta",{"property":"og:title","content":"Golang client library tutorial | Celestia Docs"}],["meta",{"property":"og:description","content":"The first modular blockchain network."}]]},"headers":[],"relativePath":"tutorials/golang-client-tutorial.md","filePath":"tutorials/golang-client-tutorial.md","lastUpdated":1745512425000}'),p={name:"tutorials/golang-client-tutorial.md"},o=l(`<h1 id="golang-client-library" tabindex="-1">Golang client library tutorial <a class="header-anchor" href="#golang-client-library" aria-label="Permalink to &quot;Golang client library tutorial {#golang-client-library}&quot;">​</a></h1><p>This tutorial section will guide you through using the most common RPC endpoints with the golang client library.</p><p>Install <a href="/docs-preview/pr-2008/how-to-guides/environment">dependencies</a> and <a href="/docs-preview/pr-2008/how-to-guides/celestia-node">celestia-node</a> if you have not already.</p><h2 id="project-setup" tabindex="-1">Project setup <a class="header-anchor" href="#project-setup" aria-label="Permalink to &quot;Project setup&quot;">​</a></h2><p><strong>Note:</strong> The previously documented <code>celestia-openrpc</code> library is deprecated. The recommended approach is to use the RPC client from <a href="https://github.com/celestiaorg/celestia-node/blob/main/api/rpc/client/client.go" target="_blank" rel="noreferrer"><code>celestia-node/api/rpc/client</code></a> until the new Celestia client SDK is released.</p><p>You have two options for interacting with Celestia in Go:</p><ol><li>Using the official client libraries (covered in the first part of this tutorial)</li><li>Using direct HTTP JSON-RPC calls (covered in the second part)</li></ol><hr><h2 id="project-setup-1" tabindex="-1">Project setup <a class="header-anchor" href="#project-setup-1" aria-label="Permalink to &quot;Project setup&quot;">​</a></h2><p>First, add the following dependencies to your Go project:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">github.com/celestiaorg/celestia-node/api/rpc/client</span></span>
<span class="line"><span style="color:#B392F0;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">github.com/celestiaorg/celestia-node/nodebuilder/blob</span></span>
<span class="line"><span style="color:#B392F0;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">get</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">github.com/celestiaorg/celestia-node/nodebuilder/share</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">github.com/celestiaorg/celestia-node/api/rpc/client</span></span>
<span class="line"><span style="color:#6F42C1;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">github.com/celestiaorg/celestia-node/nodebuilder/blob</span></span>
<span class="line"><span style="color:#6F42C1;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">get</span><span style="color:#24292E;"> </span><span style="color:#032F62;">github.com/celestiaorg/celestia-node/nodebuilder/share</span></span></code></pre></div><p>You will also need your node URL and an auth token. See the <a href="/docs-preview/pr-2008/tutorials/node-tutorial#auth-token">auth token guide</a>.<br> To run your node without an auth token, use the <code>--rpc.skip-auth</code> flag.</p><p>The default URL is <code>http://localhost:26658</code>.</p><h2 id="submitting-and-retrieving-blobs" tabindex="-1">Submitting and retrieving blobs <a class="header-anchor" href="#submitting-and-retrieving-blobs" aria-label="Permalink to &quot;Submitting and retrieving blobs&quot;">​</a></h2><p>Here is how to submit and retrieve blobs using the RPC client from celestia-node:</p><h3 id="submitting-a-blob" tabindex="-1">Submitting a blob <a class="header-anchor" href="#submitting-a-blob" aria-label="Permalink to &quot;Submitting a blob&quot;">​</a></h3><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">context</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">fmt</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/celestiaorg/celestia-node/api/rpc/client</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/celestiaorg/celestia-node/nodebuilder/share</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/celestiaorg/celestia-node/nodebuilder/blob</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SubmitBlob</span><span style="color:#E1E4E8;">(ctx context.Context, url, token </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Create the RPC client</span></span>
<span class="line"><span style="color:#E1E4E8;">    c, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#79B8FF;">NewClient</span><span style="color:#E1E4E8;">(ctx, url, token)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failed to create RPC client: </span><span style="color:#79B8FF;">%w</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> c.</span><span style="color:#79B8FF;">Close</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Create a namespace (e.g., 0xDEADBEEF)</span></span>
<span class="line"><span style="color:#E1E4E8;">    namespace, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> share.</span><span style="color:#79B8FF;">NewBlobNamespaceV0</span><span style="color:#E1E4E8;">([]</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">{</span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">DE</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">AD</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">BE</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">EF</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failed to create namespace: </span><span style="color:#79B8FF;">%w</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Create a blob</span></span>
<span class="line"><span style="color:#E1E4E8;">    b, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> blob.</span><span style="color:#79B8FF;">NewBlobV0</span><span style="color:#E1E4E8;">(namespace, []</span><span style="color:#79B8FF;">byte</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Hello, World!&quot;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failed to create blob: </span><span style="color:#79B8FF;">%w</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Submit the blob using the Blob API</span></span>
<span class="line"><span style="color:#E1E4E8;">    height, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> c.Blob.</span><span style="color:#79B8FF;">Submit</span><span style="color:#E1E4E8;">(ctx, []</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">blob.Blob{b}, </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failed to submit blob: </span><span style="color:#79B8FF;">%w</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Blob submitted at height: </span><span style="color:#79B8FF;">%d\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, height)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">context</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">fmt</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/celestiaorg/celestia-node/api/rpc/client</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/celestiaorg/celestia-node/nodebuilder/share</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/celestiaorg/celestia-node/nodebuilder/blob</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SubmitBlob</span><span style="color:#24292E;">(ctx context.Context, url, token </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Create the RPC client</span></span>
<span class="line"><span style="color:#24292E;">    c, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> client.</span><span style="color:#005CC5;">NewClient</span><span style="color:#24292E;">(ctx, url, token)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failed to create RPC client: </span><span style="color:#005CC5;">%w</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> c.</span><span style="color:#005CC5;">Close</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Create a namespace (e.g., 0xDEADBEEF)</span></span>
<span class="line"><span style="color:#24292E;">    namespace, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> share.</span><span style="color:#005CC5;">NewBlobNamespaceV0</span><span style="color:#24292E;">([]</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">{</span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">DE</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">AD</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">BE</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">EF</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failed to create namespace: </span><span style="color:#005CC5;">%w</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Create a blob</span></span>
<span class="line"><span style="color:#24292E;">    b, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> blob.</span><span style="color:#005CC5;">NewBlobV0</span><span style="color:#24292E;">(namespace, []</span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Hello, World!&quot;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failed to create blob: </span><span style="color:#005CC5;">%w</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Submit the blob using the Blob API</span></span>
<span class="line"><span style="color:#24292E;">    height, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> c.Blob.</span><span style="color:#005CC5;">Submit</span><span style="color:#24292E;">(ctx, []</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">blob.Blob{b}, </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failed to submit blob: </span><span style="color:#005CC5;">%w</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Blob submitted at height: </span><span style="color:#005CC5;">%d\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, height)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="retrieving-blobs" tabindex="-1">Retrieving blobs <a class="header-anchor" href="#retrieving-blobs" aria-label="Permalink to &quot;Retrieving blobs&quot;">​</a></h3><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GetBlobs</span><span style="color:#E1E4E8;">(ctx context.Context, url, token </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">, height </span><span style="color:#F97583;">uint64</span><span style="color:#E1E4E8;">, namespace </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">share.Namespace) ([]</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">blob.Blob, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    c, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#79B8FF;">NewClient</span><span style="color:#E1E4E8;">(ctx, url, token)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failed to create RPC client: </span><span style="color:#79B8FF;">%w</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> c.</span><span style="color:#79B8FF;">Close</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">	blobs, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> c.Blob.</span><span style="color:#79B8FF;">GetAll</span><span style="color:#E1E4E8;">(ctx, height, []</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">share.Namespace{namespace})</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failed to get blobs: </span><span style="color:#79B8FF;">%w</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> blobs, </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetBlobs</span><span style="color:#24292E;">(ctx context.Context, url, token </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">, height </span><span style="color:#D73A49;">uint64</span><span style="color:#24292E;">, namespace </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">share.Namespace) ([]</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">blob.Blob, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    c, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> client.</span><span style="color:#005CC5;">NewClient</span><span style="color:#24292E;">(ctx, url, token)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failed to create RPC client: </span><span style="color:#005CC5;">%w</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> c.</span><span style="color:#005CC5;">Close</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">	blobs, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> c.Blob.</span><span style="color:#005CC5;">GetAll</span><span style="color:#24292E;">(ctx, height, []</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">share.Namespace{namespace})</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failed to get blobs: </span><span style="color:#005CC5;">%w</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> blobs, </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><hr><h2 id="notes" tabindex="-1">Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;Notes&quot;">​</a></h2><ul><li><p>This approach directly uses the RPC client from <code>celestia-node</code> and may introduce additional dependencies.</p></li><li><p>This is a temporary solution until the new Celestia client SDK is released.</p></li><li><p>For more advanced usage (e.g., custom gas, key management), refer to the <a href="https://github.com/celestiaorg/celestia-node/blob/main/nodebuilder/blob/api.go" target="_blank" rel="noreferrer">celestia-node/blob API</a>.</p><p>helloWorldBlob, err := blob.NewBlobV0(namespace, []byte(&quot;Hello, World!&quot;)) if err != nil { return err }</p><p>// submit the blob to the network height, err := client.Blob.Submit(ctx, []*blob.Blob{helloWorldBlob}, blob.NewSubmitOptions()) if err != nil { return err }</p><p>fmt.Printf(&quot;Blob was included at height %d\\n&quot;, height)</p><p>// fetch the blob back from the network retrievedBlobs, err := client.Blob.GetAll(ctx, height, []share.Namespace{namespace}) if err != nil { return err }</p><p>fmt.Printf(&quot;Blobs are equal? %v\\n&quot;, bytes.Equal(helloWorldBlob.Commitment, retrievedBlobs[0].Commitment)) return nil }</p></li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">---</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">## Using direct HTTP JSON-RPC calls</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">If you prefer not to use the official client libraries or want more control over the network calls, you can interact with Celestia nodes directly using HTTP JSON-RPC. This section provides a complete example of submitting and retrieving blobs using standard Go libraries.</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">### Project setup for direct HTTP JSON-RPC</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">Create a new Go module:</span></span>
<span class="line"><span style="color:#e1e4e8;"></span></span>
<span class="line"><span style="color:#e1e4e8;">\`\`\`bash</span></span>
<span class="line"><span style="color:#e1e4e8;">mkdir celestia-direct-client</span></span>
<span class="line"><span style="color:#e1e4e8;">cd celestia-direct-client</span></span>
<span class="line"><span style="color:#e1e4e8;">go mod init celestia-direct-client</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">---</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">## Using direct HTTP JSON-RPC calls</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">If you prefer not to use the official client libraries or want more control over the network calls, you can interact with Celestia nodes directly using HTTP JSON-RPC. This section provides a complete example of submitting and retrieving blobs using standard Go libraries.</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">### Project setup for direct HTTP JSON-RPC</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">Create a new Go module:</span></span>
<span class="line"><span style="color:#24292e;"></span></span>
<span class="line"><span style="color:#24292e;">\`\`\`bash</span></span>
<span class="line"><span style="color:#24292e;">mkdir celestia-direct-client</span></span>
<span class="line"><span style="color:#24292e;">cd celestia-direct-client</span></span>
<span class="line"><span style="color:#24292e;">go mod init celestia-direct-client</span></span></code></pre></div><p>Create a file named <code>main.go</code> with the following content:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">bytes</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">encoding/base64</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">encoding/hex</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">encoding/json</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">fmt</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">io</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">log</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">net/http</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">	NodeURL </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;http://localhost:26658&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	AuthToken </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// Set your auth token if needed</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Namespace represents a Celestia namespace</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Namespace</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	Version </span><span style="color:#F97583;">uint8</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">\`json:&quot;version&quot;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">	ID      </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`json:&quot;id&quot;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Blob represents a Celestia blob</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Blob</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	Namespace    </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`json:&quot;namespace&quot;\`</span><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// base64 encoded</span></span>
<span class="line"><span style="color:#E1E4E8;">	Data         </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`json:&quot;data&quot;\`</span><span style="color:#E1E4E8;">         </span><span style="color:#6A737D;">// base64 encoded</span></span>
<span class="line"><span style="color:#E1E4E8;">	ShareVersion </span><span style="color:#F97583;">uint8</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">\`json:&quot;share_version&quot;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">	Commitment   </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`json:&quot;commitment&quot;\`</span><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// base64 encoded</span></span>
<span class="line"><span style="color:#E1E4E8;">	Index        </span><span style="color:#F97583;">int</span><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">\`json:&quot;index&quot;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// SubmitBlobRequest is the request for submitting blobs</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SubmitBlobRequest</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	NamespaceID </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`json:&quot;namespace_id&quot;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">	Data        </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`json:&quot;data&quot;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">	GasLimit    </span><span style="color:#F97583;">int64</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">\`json:&quot;gas_limit,omitempty&quot;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">	Fee         </span><span style="color:#F97583;">int64</span><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">\`json:&quot;fee,omitempty&quot;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// SubmitBlobResponse is the response from submitting blobs</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SubmitBlobResponse</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	Height </span><span style="color:#F97583;">int64</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`json:&quot;height&quot;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// GetBlobsResponse is the response from getting blobs</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GetBlobsResponse</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">	Blobs []Blob </span><span style="color:#9ECBFF;">\`json:&quot;blobs&quot;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Create a namespace ID (0xDEADBEEF)</span></span>
<span class="line"><span style="color:#E1E4E8;">	namespaceID </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;deadbeef&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Create blob data</span></span>
<span class="line"><span style="color:#E1E4E8;">	data </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;Hello, Celestia!&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Submit the blob</span></span>
<span class="line"><span style="color:#E1E4E8;">	height, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">submitBlob</span><span style="color:#E1E4E8;">(namespaceID, data)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		log.</span><span style="color:#79B8FF;">Fatalf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Failed to submit blob: </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Blob submitted at height: </span><span style="color:#79B8FF;">%d\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, height)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Retrieve the blob</span></span>
<span class="line"><span style="color:#E1E4E8;">	blobs, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">getBlobs</span><span style="color:#E1E4E8;">(height, namespaceID)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		log.</span><span style="color:#79B8FF;">Fatalf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Failed to get blobs: </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(blobs) </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#6A737D;">// Decode the base64 data</span></span>
<span class="line"><span style="color:#E1E4E8;">		decodedData, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> base64.StdEncoding.</span><span style="color:#79B8FF;">DecodeString</span><span style="color:#E1E4E8;">(blobs[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].Data)</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">			log.</span><span style="color:#79B8FF;">Fatalf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Failed to decode blob data: </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">		}</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Retrieved blob: </span><span style="color:#79B8FF;">%s\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">(decodedData))</span></span>
<span class="line"><span style="color:#E1E4E8;">	} </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;No blobs found&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// submitBlob submits a blob to the Celestia network</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">submitBlob</span><span style="color:#E1E4E8;">(namespaceID, data </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) (</span><span style="color:#F97583;">int64</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Convert namespace ID from hex to bytes</span></span>
<span class="line"><span style="color:#E1E4E8;">	namespaceBytes, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> hex.</span><span style="color:#79B8FF;">DecodeString</span><span style="color:#E1E4E8;">(namespaceID)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failed to decode namespace ID: </span><span style="color:#79B8FF;">%w</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// For namespace version 0, the format is:</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// - First byte: version (0)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// - Next 10 bytes: 0 (reserved)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// - Next 18 bytes: namespace ID with leading zeros if needed</span></span>
<span class="line"><span style="color:#E1E4E8;">	paddedNamespace </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">make</span><span style="color:#E1E4E8;">([]</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">29</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	paddedNamespace[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// Version 0</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// The ID must start with 18 leading zeros and then our namespace ID</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Copy our namespace bytes to the end of the namespace field</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">copy</span><span style="color:#E1E4E8;">(paddedNamespace[</span><span style="color:#79B8FF;">29</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(namespaceBytes):], namespaceBytes)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Prepare the request body</span></span>
<span class="line"><span style="color:#E1E4E8;">	reqBody </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">map</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;">{}{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#9ECBFF;">&quot;jsonrpc&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;2.0&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">:      </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#9ECBFF;">&quot;method&quot;</span><span style="color:#E1E4E8;">:  </span><span style="color:#9ECBFF;">&quot;blob.Submit&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#9ECBFF;">&quot;params&quot;</span><span style="color:#E1E4E8;">: []</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;">{}{</span></span>
<span class="line"><span style="color:#E1E4E8;">			[]</span><span style="color:#F97583;">map</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;">{}{</span></span>
<span class="line"><span style="color:#E1E4E8;">				{</span></span>
<span class="line"><span style="color:#E1E4E8;">					</span><span style="color:#9ECBFF;">&quot;namespace&quot;</span><span style="color:#E1E4E8;">: base64.StdEncoding.</span><span style="color:#79B8FF;">EncodeToString</span><span style="color:#E1E4E8;">(paddedNamespace),</span></span>
<span class="line"><span style="color:#E1E4E8;">					</span><span style="color:#9ECBFF;">&quot;data&quot;</span><span style="color:#E1E4E8;">:      base64.StdEncoding.</span><span style="color:#79B8FF;">EncodeToString</span><span style="color:#E1E4E8;">([]</span><span style="color:#79B8FF;">byte</span><span style="color:#E1E4E8;">(data)),</span></span>
<span class="line"><span style="color:#E1E4E8;">					</span><span style="color:#9ECBFF;">&quot;share_version&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">				},</span></span>
<span class="line"><span style="color:#E1E4E8;">			},</span></span>
<span class="line"><span style="color:#E1E4E8;">			</span><span style="color:#F97583;">map</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;">{}{}, </span><span style="color:#6A737D;">// Empty options</span></span>
<span class="line"><span style="color:#E1E4E8;">		},</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Convert to JSON</span></span>
<span class="line"><span style="color:#E1E4E8;">	jsonData, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> json.</span><span style="color:#79B8FF;">Marshal</span><span style="color:#E1E4E8;">(reqBody)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failed to marshal request: </span><span style="color:#79B8FF;">%w</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Create the HTTP request</span></span>
<span class="line"><span style="color:#E1E4E8;">	req, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> http.</span><span style="color:#79B8FF;">NewRequest</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;POST&quot;</span><span style="color:#E1E4E8;">, NodeURL, bytes.</span><span style="color:#79B8FF;">NewBuffer</span><span style="color:#E1E4E8;">(jsonData))</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failed to create request: </span><span style="color:#79B8FF;">%w</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Set headers</span></span>
<span class="line"><span style="color:#E1E4E8;">	req.Header.</span><span style="color:#79B8FF;">Set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Content-Type&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;application/json&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> AuthToken </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		req.Header.</span><span style="color:#79B8FF;">Set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Authorization&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Bearer &quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">AuthToken)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Send the request</span></span>
<span class="line"><span style="color:#E1E4E8;">	client </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">http.Client{}</span></span>
<span class="line"><span style="color:#E1E4E8;">	resp, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#79B8FF;">Do</span><span style="color:#E1E4E8;">(req)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failed to send request: </span><span style="color:#79B8FF;">%w</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> resp.Body.</span><span style="color:#79B8FF;">Close</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Read the response</span></span>
<span class="line"><span style="color:#E1E4E8;">	respBody, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> io.</span><span style="color:#79B8FF;">ReadAll</span><span style="color:#E1E4E8;">(resp.Body)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failed to read response: </span><span style="color:#79B8FF;">%w</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Check for errors</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> resp.StatusCode </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> http.StatusOK {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;request failed with status </span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">: </span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, resp.StatusCode, </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">(respBody))</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Parse the response</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		Result </span><span style="color:#F97583;">int64</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`json:&quot;result&quot;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> json.</span><span style="color:#79B8FF;">Unmarshal</span><span style="color:#E1E4E8;">(respBody, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">result); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failed to parse response: </span><span style="color:#79B8FF;">%w</span><span style="color:#9ECBFF;">, body: </span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err, </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">(respBody))</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result.Result, </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// getBlobs retrieves blobs from the Celestia network</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getBlobs</span><span style="color:#E1E4E8;">(height </span><span style="color:#F97583;">int64</span><span style="color:#E1E4E8;">, namespaceID </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) ([]Blob, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Convert namespace ID from hex to bytes</span></span>
<span class="line"><span style="color:#E1E4E8;">	namespaceBytes, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> hex.</span><span style="color:#79B8FF;">DecodeString</span><span style="color:#E1E4E8;">(namespaceID)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failed to decode namespace ID: </span><span style="color:#79B8FF;">%w</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// For namespace version 0, the format is:</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// - First byte: version (0)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// - Next 10 bytes: 0 (reserved)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// - Next 18 bytes: namespace ID with leading zeros if needed</span></span>
<span class="line"><span style="color:#E1E4E8;">	paddedNamespace </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">make</span><span style="color:#E1E4E8;">([]</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">29</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	paddedNamespace[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// Version 0</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// The ID must start with 18 leading zeros and then our namespace ID</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Copy our namespace bytes to the end of the namespace field</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#79B8FF;">copy</span><span style="color:#E1E4E8;">(paddedNamespace[</span><span style="color:#79B8FF;">29</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(namespaceBytes):], namespaceBytes)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Prepare the request body</span></span>
<span class="line"><span style="color:#E1E4E8;">	reqBody </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">map</span><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;">{}{</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#9ECBFF;">&quot;jsonrpc&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;2.0&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#9ECBFF;">&quot;id&quot;</span><span style="color:#E1E4E8;">:      </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#9ECBFF;">&quot;method&quot;</span><span style="color:#E1E4E8;">:  </span><span style="color:#9ECBFF;">&quot;blob.GetAll&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#9ECBFF;">&quot;params&quot;</span><span style="color:#E1E4E8;">: []</span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;">{}{</span></span>
<span class="line"><span style="color:#E1E4E8;">			height,</span></span>
<span class="line"><span style="color:#E1E4E8;">			[]</span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">{base64.StdEncoding.</span><span style="color:#79B8FF;">EncodeToString</span><span style="color:#E1E4E8;">(paddedNamespace)},</span></span>
<span class="line"><span style="color:#E1E4E8;">		},</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Convert to JSON</span></span>
<span class="line"><span style="color:#E1E4E8;">	jsonData, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> json.</span><span style="color:#79B8FF;">Marshal</span><span style="color:#E1E4E8;">(reqBody)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failed to marshal request: </span><span style="color:#79B8FF;">%w</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Create the HTTP request</span></span>
<span class="line"><span style="color:#E1E4E8;">	req, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> http.</span><span style="color:#79B8FF;">NewRequest</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;POST&quot;</span><span style="color:#E1E4E8;">, NodeURL, bytes.</span><span style="color:#79B8FF;">NewBuffer</span><span style="color:#E1E4E8;">(jsonData))</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failed to create request: </span><span style="color:#79B8FF;">%w</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Set headers</span></span>
<span class="line"><span style="color:#E1E4E8;">	req.Header.</span><span style="color:#79B8FF;">Set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Content-Type&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;application/json&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> AuthToken </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;&quot;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		req.Header.</span><span style="color:#79B8FF;">Set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Authorization&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;Bearer &quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">AuthToken)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Send the request</span></span>
<span class="line"><span style="color:#E1E4E8;">	client </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">http.Client{}</span></span>
<span class="line"><span style="color:#E1E4E8;">	resp, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#79B8FF;">Do</span><span style="color:#E1E4E8;">(req)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failed to send request: </span><span style="color:#79B8FF;">%w</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> resp.Body.</span><span style="color:#79B8FF;">Close</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Read the response</span></span>
<span class="line"><span style="color:#E1E4E8;">	respBody, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> io.</span><span style="color:#79B8FF;">ReadAll</span><span style="color:#E1E4E8;">(resp.Body)</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failed to read response: </span><span style="color:#79B8FF;">%w</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Check for errors</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> resp.StatusCode </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> http.StatusOK {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;request failed with status </span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;">: </span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, resp.StatusCode, </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">(respBody))</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#6A737D;">// Parse the response</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		Result []Blob </span><span style="color:#9ECBFF;">\`json:&quot;result&quot;\`</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> json.</span><span style="color:#79B8FF;">Unmarshal</span><span style="color:#E1E4E8;">(respBody, </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;">result); err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">		</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, fmt.</span><span style="color:#79B8FF;">Errorf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;failed to parse response: </span><span style="color:#79B8FF;">%w</span><span style="color:#9ECBFF;">, body: </span><span style="color:#79B8FF;">%s</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err, </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">(respBody))</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span></span>
<span class="line"><span style="color:#E1E4E8;">	</span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> result.Result, </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">bytes</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">encoding/base64</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">encoding/hex</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">encoding/json</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">fmt</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">io</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">log</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">net/http</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">	NodeURL </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;http://localhost:26658&quot;</span></span>
<span class="line"><span style="color:#24292E;">	AuthToken </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// Set your auth token if needed</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Namespace represents a Celestia namespace</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Namespace</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	Version </span><span style="color:#D73A49;">uint8</span><span style="color:#24292E;">  </span><span style="color:#032F62;">\`json:&quot;version&quot;\`</span></span>
<span class="line"><span style="color:#24292E;">	ID      </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`json:&quot;id&quot;\`</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Blob represents a Celestia blob</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Blob</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	Namespace    </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`json:&quot;namespace&quot;\`</span><span style="color:#24292E;">    </span><span style="color:#6A737D;">// base64 encoded</span></span>
<span class="line"><span style="color:#24292E;">	Data         </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`json:&quot;data&quot;\`</span><span style="color:#24292E;">         </span><span style="color:#6A737D;">// base64 encoded</span></span>
<span class="line"><span style="color:#24292E;">	ShareVersion </span><span style="color:#D73A49;">uint8</span><span style="color:#24292E;">  </span><span style="color:#032F62;">\`json:&quot;share_version&quot;\`</span></span>
<span class="line"><span style="color:#24292E;">	Commitment   </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`json:&quot;commitment&quot;\`</span><span style="color:#24292E;">   </span><span style="color:#6A737D;">// base64 encoded</span></span>
<span class="line"><span style="color:#24292E;">	Index        </span><span style="color:#D73A49;">int</span><span style="color:#24292E;">    </span><span style="color:#032F62;">\`json:&quot;index&quot;\`</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// SubmitBlobRequest is the request for submitting blobs</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SubmitBlobRequest</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	NamespaceID </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`json:&quot;namespace_id&quot;\`</span></span>
<span class="line"><span style="color:#24292E;">	Data        </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`json:&quot;data&quot;\`</span></span>
<span class="line"><span style="color:#24292E;">	GasLimit    </span><span style="color:#D73A49;">int64</span><span style="color:#24292E;">  </span><span style="color:#032F62;">\`json:&quot;gas_limit,omitempty&quot;\`</span></span>
<span class="line"><span style="color:#24292E;">	Fee         </span><span style="color:#D73A49;">int64</span><span style="color:#24292E;">  </span><span style="color:#032F62;">\`json:&quot;fee,omitempty&quot;\`</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// SubmitBlobResponse is the response from submitting blobs</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SubmitBlobResponse</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	Height </span><span style="color:#D73A49;">int64</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`json:&quot;height&quot;\`</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// GetBlobsResponse is the response from getting blobs</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetBlobsResponse</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">	Blobs []Blob </span><span style="color:#032F62;">\`json:&quot;blobs&quot;\`</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Create a namespace ID (0xDEADBEEF)</span></span>
<span class="line"><span style="color:#24292E;">	namespaceID </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;deadbeef&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Create blob data</span></span>
<span class="line"><span style="color:#24292E;">	data </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;Hello, Celestia!&quot;</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Submit the blob</span></span>
<span class="line"><span style="color:#24292E;">	height, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">submitBlob</span><span style="color:#24292E;">(namespaceID, data)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		log.</span><span style="color:#005CC5;">Fatalf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Failed to submit blob: </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Blob submitted at height: </span><span style="color:#005CC5;">%d\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, height)</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Retrieve the blob</span></span>
<span class="line"><span style="color:#24292E;">	blobs, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getBlobs</span><span style="color:#24292E;">(height, namespaceID)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		log.</span><span style="color:#005CC5;">Fatalf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Failed to get blobs: </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(blobs) </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#6A737D;">// Decode the base64 data</span></span>
<span class="line"><span style="color:#24292E;">		decodedData, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> base64.StdEncoding.</span><span style="color:#005CC5;">DecodeString</span><span style="color:#24292E;">(blobs[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].Data)</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">			log.</span><span style="color:#005CC5;">Fatalf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Failed to decode blob data: </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">		}</span></span>
<span class="line"><span style="color:#24292E;">		</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Retrieved blob: </span><span style="color:#005CC5;">%s\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">(decodedData))</span></span>
<span class="line"><span style="color:#24292E;">	} </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;No blobs found&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// submitBlob submits a blob to the Celestia network</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">submitBlob</span><span style="color:#24292E;">(namespaceID, data </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) (</span><span style="color:#D73A49;">int64</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Convert namespace ID from hex to bytes</span></span>
<span class="line"><span style="color:#24292E;">	namespaceBytes, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> hex.</span><span style="color:#005CC5;">DecodeString</span><span style="color:#24292E;">(namespaceID)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failed to decode namespace ID: </span><span style="color:#005CC5;">%w</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// For namespace version 0, the format is:</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// - First byte: version (0)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// - Next 10 bytes: 0 (reserved)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// - Next 18 bytes: namespace ID with leading zeros if needed</span></span>
<span class="line"><span style="color:#24292E;">	paddedNamespace </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">make</span><span style="color:#24292E;">([]</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">29</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	paddedNamespace[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// Version 0</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// The ID must start with 18 leading zeros and then our namespace ID</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Copy our namespace bytes to the end of the namespace field</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">copy</span><span style="color:#24292E;">(paddedNamespace[</span><span style="color:#005CC5;">29</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(namespaceBytes):], namespaceBytes)</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Prepare the request body</span></span>
<span class="line"><span style="color:#24292E;">	reqBody </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;">{}{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#032F62;">&quot;jsonrpc&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;2.0&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">:      </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#032F62;">&quot;method&quot;</span><span style="color:#24292E;">:  </span><span style="color:#032F62;">&quot;blob.Submit&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#032F62;">&quot;params&quot;</span><span style="color:#24292E;">: []</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;">{}{</span></span>
<span class="line"><span style="color:#24292E;">			[]</span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;">{}{</span></span>
<span class="line"><span style="color:#24292E;">				{</span></span>
<span class="line"><span style="color:#24292E;">					</span><span style="color:#032F62;">&quot;namespace&quot;</span><span style="color:#24292E;">: base64.StdEncoding.</span><span style="color:#005CC5;">EncodeToString</span><span style="color:#24292E;">(paddedNamespace),</span></span>
<span class="line"><span style="color:#24292E;">					</span><span style="color:#032F62;">&quot;data&quot;</span><span style="color:#24292E;">:      base64.StdEncoding.</span><span style="color:#005CC5;">EncodeToString</span><span style="color:#24292E;">([]</span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(data)),</span></span>
<span class="line"><span style="color:#24292E;">					</span><span style="color:#032F62;">&quot;share_version&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">				},</span></span>
<span class="line"><span style="color:#24292E;">			},</span></span>
<span class="line"><span style="color:#24292E;">			</span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;">{}{}, </span><span style="color:#6A737D;">// Empty options</span></span>
<span class="line"><span style="color:#24292E;">		},</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Convert to JSON</span></span>
<span class="line"><span style="color:#24292E;">	jsonData, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> json.</span><span style="color:#005CC5;">Marshal</span><span style="color:#24292E;">(reqBody)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failed to marshal request: </span><span style="color:#005CC5;">%w</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Create the HTTP request</span></span>
<span class="line"><span style="color:#24292E;">	req, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> http.</span><span style="color:#005CC5;">NewRequest</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;POST&quot;</span><span style="color:#24292E;">, NodeURL, bytes.</span><span style="color:#005CC5;">NewBuffer</span><span style="color:#24292E;">(jsonData))</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failed to create request: </span><span style="color:#005CC5;">%w</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Set headers</span></span>
<span class="line"><span style="color:#24292E;">	req.Header.</span><span style="color:#005CC5;">Set</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Content-Type&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;application/json&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> AuthToken </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		req.Header.</span><span style="color:#005CC5;">Set</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Authorization&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Bearer &quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">AuthToken)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Send the request</span></span>
<span class="line"><span style="color:#24292E;">	client </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">http.Client{}</span></span>
<span class="line"><span style="color:#24292E;">	resp, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> client.</span><span style="color:#005CC5;">Do</span><span style="color:#24292E;">(req)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failed to send request: </span><span style="color:#005CC5;">%w</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> resp.Body.</span><span style="color:#005CC5;">Close</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Read the response</span></span>
<span class="line"><span style="color:#24292E;">	respBody, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> io.</span><span style="color:#005CC5;">ReadAll</span><span style="color:#24292E;">(resp.Body)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failed to read response: </span><span style="color:#005CC5;">%w</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Check for errors</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> resp.StatusCode </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> http.StatusOK {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;request failed with status </span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">: </span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, resp.StatusCode, </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">(respBody))</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Parse the response</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		Result </span><span style="color:#D73A49;">int64</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`json:&quot;result&quot;\`</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> json.</span><span style="color:#005CC5;">Unmarshal</span><span style="color:#24292E;">(respBody, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">result); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failed to parse response: </span><span style="color:#005CC5;">%w</span><span style="color:#032F62;">, body: </span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err, </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">(respBody))</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result.Result, </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// getBlobs retrieves blobs from the Celestia network</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getBlobs</span><span style="color:#24292E;">(height </span><span style="color:#D73A49;">int64</span><span style="color:#24292E;">, namespaceID </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) ([]Blob, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Convert namespace ID from hex to bytes</span></span>
<span class="line"><span style="color:#24292E;">	namespaceBytes, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> hex.</span><span style="color:#005CC5;">DecodeString</span><span style="color:#24292E;">(namespaceID)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failed to decode namespace ID: </span><span style="color:#005CC5;">%w</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// For namespace version 0, the format is:</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// - First byte: version (0)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// - Next 10 bytes: 0 (reserved)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// - Next 18 bytes: namespace ID with leading zeros if needed</span></span>
<span class="line"><span style="color:#24292E;">	paddedNamespace </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">make</span><span style="color:#24292E;">([]</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">29</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	paddedNamespace[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// Version 0</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// The ID must start with 18 leading zeros and then our namespace ID</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Copy our namespace bytes to the end of the namespace field</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#005CC5;">copy</span><span style="color:#24292E;">(paddedNamespace[</span><span style="color:#005CC5;">29</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(namespaceBytes):], namespaceBytes)</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Prepare the request body</span></span>
<span class="line"><span style="color:#24292E;">	reqBody </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">map</span><span style="color:#24292E;">[</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">]</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;">{}{</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#032F62;">&quot;jsonrpc&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;2.0&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#032F62;">&quot;id&quot;</span><span style="color:#24292E;">:      </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#032F62;">&quot;method&quot;</span><span style="color:#24292E;">:  </span><span style="color:#032F62;">&quot;blob.GetAll&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#032F62;">&quot;params&quot;</span><span style="color:#24292E;">: []</span><span style="color:#D73A49;">interface</span><span style="color:#24292E;">{}{</span></span>
<span class="line"><span style="color:#24292E;">			height,</span></span>
<span class="line"><span style="color:#24292E;">			[]</span><span style="color:#D73A49;">string</span><span style="color:#24292E;">{base64.StdEncoding.</span><span style="color:#005CC5;">EncodeToString</span><span style="color:#24292E;">(paddedNamespace)},</span></span>
<span class="line"><span style="color:#24292E;">		},</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Convert to JSON</span></span>
<span class="line"><span style="color:#24292E;">	jsonData, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> json.</span><span style="color:#005CC5;">Marshal</span><span style="color:#24292E;">(reqBody)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failed to marshal request: </span><span style="color:#005CC5;">%w</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Create the HTTP request</span></span>
<span class="line"><span style="color:#24292E;">	req, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> http.</span><span style="color:#005CC5;">NewRequest</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;POST&quot;</span><span style="color:#24292E;">, NodeURL, bytes.</span><span style="color:#005CC5;">NewBuffer</span><span style="color:#24292E;">(jsonData))</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failed to create request: </span><span style="color:#005CC5;">%w</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Set headers</span></span>
<span class="line"><span style="color:#24292E;">	req.Header.</span><span style="color:#005CC5;">Set</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Content-Type&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;application/json&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> AuthToken </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;&quot;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		req.Header.</span><span style="color:#005CC5;">Set</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Authorization&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;Bearer &quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">AuthToken)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Send the request</span></span>
<span class="line"><span style="color:#24292E;">	client </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">http.Client{}</span></span>
<span class="line"><span style="color:#24292E;">	resp, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> client.</span><span style="color:#005CC5;">Do</span><span style="color:#24292E;">(req)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failed to send request: </span><span style="color:#005CC5;">%w</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> resp.Body.</span><span style="color:#005CC5;">Close</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Read the response</span></span>
<span class="line"><span style="color:#24292E;">	respBody, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> io.</span><span style="color:#005CC5;">ReadAll</span><span style="color:#24292E;">(resp.Body)</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failed to read response: </span><span style="color:#005CC5;">%w</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Check for errors</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> resp.StatusCode </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> http.StatusOK {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;request failed with status </span><span style="color:#005CC5;">%d</span><span style="color:#032F62;">: </span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, resp.StatusCode, </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">(respBody))</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#6A737D;">// Parse the response</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		Result []Blob </span><span style="color:#032F62;">\`json:&quot;result&quot;\`</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> json.</span><span style="color:#005CC5;">Unmarshal</span><span style="color:#24292E;">(respBody, </span><span style="color:#D73A49;">&amp;</span><span style="color:#24292E;">result); err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">		</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, fmt.</span><span style="color:#005CC5;">Errorf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;failed to parse response: </span><span style="color:#005CC5;">%w</span><span style="color:#032F62;">, body: </span><span style="color:#005CC5;">%s</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err, </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">(respBody))</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">	</span></span>
<span class="line"><span style="color:#24292E;">	</span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> result.Result, </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="running-the-direct-http-client" tabindex="-1">Running the direct HTTP client <a class="header-anchor" href="#running-the-direct-http-client" aria-label="Permalink to &quot;Running the direct HTTP client&quot;">​</a></h3><p>Build and run your application:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">mod</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">tidy</span></span>
<span class="line"><span style="color:#B392F0;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">main.go</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">mod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">tidy</span></span>
<span class="line"><span style="color:#6F42C1;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">main.go</span></span></code></pre></div><h3 id="how-it-works" tabindex="-1">How it works <a class="header-anchor" href="#how-it-works" aria-label="Permalink to &quot;How it works&quot;">​</a></h3><p>The code above does the following:</p><ol><li><p><strong>Namespace formatting</strong>: Creates a namespace ID in the proper format</p><ul><li>Version 0 in the first byte</li><li>10 reserved bytes</li><li>18 bytes for the namespace ID (with leading zeros as needed)</li></ul></li><li><p><strong>Submitting a blob</strong>:</p><ul><li>Encodes the namespace and data in base64</li><li>Creates a JSON-RPC request to the <code>blob.Submit</code> method</li><li>Sends an HTTP POST request to the node</li><li>Parses the response to get the height</li></ul></li><li><p><strong>Retrieving blobs</strong>:</p><ul><li>Creates a JSON-RPC request to the <code>blob.GetAll</code> method</li><li>Specifies the height and namespace</li><li>Parses the response to get the blobs</li><li>Decodes the blob data from base64</li></ul></li></ol><h3 id="advantages-of-direct-http-calls" tabindex="-1">Advantages of direct HTTP calls <a class="header-anchor" href="#advantages-of-direct-http-calls" aria-label="Permalink to &quot;Advantages of direct HTTP calls&quot;">​</a></h3><ul><li>Minimal dependencies (only uses the standard library)</li><li>Full control over the network requests</li><li>Easy to understand the underlying protocol</li><li>Can be adapted for other languages that support HTTP requests</li></ul><h3 id="considerations" tabindex="-1">Considerations <a class="header-anchor" href="#considerations" aria-label="Permalink to &quot;Considerations&quot;">​</a></h3><ul><li>No built-in retries or error handling</li><li>Need to manually format namespaces according to specification</li><li>Need to handle authentication manually</li><li>Need to stay up-to-date with API changes</li></ul><p>If you need more robust functionality, consider using the official client libraries as shown in the first part of this tutorial.</p><h2 id="subscribing-to-new-blobs" tabindex="-1">Subscribing to new blobs <a class="header-anchor" href="#subscribing-to-new-blobs" aria-label="Permalink to &quot;Subscribing to new blobs&quot;">​</a></h2><p>You can subscribe to new blobs in a namespace using the <a href="https://node-rpc-docs.celestia.org/#blob.Subscribe" target="_blank" rel="noreferrer">blob.Subscribe</a> method. This method returns a channel that will receive new blobs as they are produced. In this example, we will fetch all blobs in the <code>0xDEADBEEF</code> namespace.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SubscribeBlobs</span><span style="color:#E1E4E8;">(ctx context.Context, url </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">, token </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    client, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#79B8FF;">NewClient</span><span style="color:#E1E4E8;">(ctx, url, token)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> client.</span><span style="color:#79B8FF;">Close</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// We close the WebSocket connection after use</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// create a namespace to filter blobs with</span></span>
<span class="line"><span style="color:#E1E4E8;">    namespace, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> share.</span><span style="color:#79B8FF;">NewBlobNamespaceV0</span><span style="color:#E1E4E8;">([]</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">{</span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">DE</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">AD</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">BE</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">EF</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// subscribe to new blobs using a &lt;-chan *blob.BlobResponse channel</span></span>
<span class="line"><span style="color:#E1E4E8;">    blobChan, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> client.Blob.</span><span style="color:#79B8FF;">Subscribe</span><span style="color:#E1E4E8;">(ctx)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> resp </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;">blobChan:</span></span>
<span class="line"><span style="color:#E1E4E8;">            fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Found </span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;"> blobs at height </span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;"> in 0xDEADBEEF namespace</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(resp.</span><span style="color:#79B8FF;">Blobs</span><span style="color:#E1E4E8;">()), resp.Height)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;">ctx.</span><span style="color:#79B8FF;">Done</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SubscribeBlobs</span><span style="color:#24292E;">(ctx context.Context, url </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">, token </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    client, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> client.</span><span style="color:#005CC5;">NewClient</span><span style="color:#24292E;">(ctx, url, token)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> client.</span><span style="color:#005CC5;">Close</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// We close the WebSocket connection after use</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// create a namespace to filter blobs with</span></span>
<span class="line"><span style="color:#24292E;">    namespace, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> share.</span><span style="color:#005CC5;">NewBlobNamespaceV0</span><span style="color:#24292E;">([]</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">{</span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">DE</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">AD</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">BE</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">EF</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// subscribe to new blobs using a &lt;-chan *blob.BlobResponse channel</span></span>
<span class="line"><span style="color:#24292E;">    blobChan, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> client.Blob.</span><span style="color:#005CC5;">Subscribe</span><span style="color:#24292E;">(ctx)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">select</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> resp </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;">blobChan:</span></span>
<span class="line"><span style="color:#24292E;">            fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Found </span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> blobs at height </span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> in 0xDEADBEEF namespace</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(resp.</span><span style="color:#005CC5;">Blobs</span><span style="color:#24292E;">()), resp.Height)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;">ctx.</span><span style="color:#005CC5;">Done</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="subscribing-to-new-headers" tabindex="-1">Subscribing to new headers <a class="header-anchor" href="#subscribing-to-new-headers" aria-label="Permalink to &quot;Subscribing to new headers&quot;">​</a></h2><p>Alternatively, you can subscribe to new headers using the <a href="https://node-rpc-docs.celestia.org/#header.Subscribe" target="_blank" rel="noreferrer">header.Subscribe</a> method. This method returns a channel that will receive new headers as they are produced. In this example, we will fetch all blobs at the height of the new header in the <code>0xDEADBEEF</code> namespace.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// SubscribeHeaders subscribes to new headers and fetches all blobs at the height of the new header in the 0xDEADBEEF namespace.</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SubscribeHeaders</span><span style="color:#E1E4E8;">(ctx context.Context, url </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">, token </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    client, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#79B8FF;">NewClient</span><span style="color:#E1E4E8;">(ctx, url, token)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> client.</span><span style="color:#79B8FF;">Close</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// We close the WebSocket connection after usage</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// create a namespace to filter blobs with</span></span>
<span class="line"><span style="color:#E1E4E8;">    namespace, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> share.</span><span style="color:#79B8FF;">NewBlobNamespaceV0</span><span style="color:#E1E4E8;">([]</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">{</span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">DE</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">AD</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">BE</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">EF</span><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// subscribe to new headers using a &lt;-chan *header.ExtendedHeader channel</span></span>
<span class="line"><span style="color:#E1E4E8;">    headerChan, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> client.Header.</span><span style="color:#79B8FF;">Subscribe</span><span style="color:#E1E4E8;">(ctx)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> err</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">select</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> header </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;">headerChan:</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#6A737D;">// fetch all blobs at the height of the new header</span></span>
<span class="line"><span style="color:#E1E4E8;">            blobs, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> client.Blob.</span><span style="color:#79B8FF;">GetAll</span><span style="color:#E1E4E8;">(context.</span><span style="color:#79B8FF;">TODO</span><span style="color:#E1E4E8;">(), header.</span><span style="color:#79B8FF;">Height</span><span style="color:#E1E4E8;">(), []share.Namespace{namespace})</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Error fetching blobs: </span><span style="color:#79B8FF;">%v\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">            fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Found </span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;"> blobs at height </span><span style="color:#79B8FF;">%d</span><span style="color:#9ECBFF;"> in 0xDEADBEEF namespace</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">len</span><span style="color:#E1E4E8;">(blobs), header.</span><span style="color:#79B8FF;">Height</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">case</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;-</span><span style="color:#E1E4E8;">ctx.</span><span style="color:#79B8FF;">Done</span><span style="color:#E1E4E8;">():</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// SubscribeHeaders subscribes to new headers and fetches all blobs at the height of the new header in the 0xDEADBEEF namespace.</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SubscribeHeaders</span><span style="color:#24292E;">(ctx context.Context, url </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">, token </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">error</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    client, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> client.</span><span style="color:#005CC5;">NewClient</span><span style="color:#24292E;">(ctx, url, token)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> client.</span><span style="color:#005CC5;">Close</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// We close the WebSocket connection after usage</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// create a namespace to filter blobs with</span></span>
<span class="line"><span style="color:#24292E;">    namespace, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> share.</span><span style="color:#005CC5;">NewBlobNamespaceV0</span><span style="color:#24292E;">([]</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">{</span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">DE</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">AD</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">BE</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">EF</span><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// subscribe to new headers using a &lt;-chan *header.ExtendedHeader channel</span></span>
<span class="line"><span style="color:#24292E;">    headerChan, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> client.Header.</span><span style="color:#005CC5;">Subscribe</span><span style="color:#24292E;">(ctx)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> err</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">select</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> header </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;">headerChan:</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#6A737D;">// fetch all blobs at the height of the new header</span></span>
<span class="line"><span style="color:#24292E;">            blobs, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> client.Blob.</span><span style="color:#005CC5;">GetAll</span><span style="color:#24292E;">(context.</span><span style="color:#005CC5;">TODO</span><span style="color:#24292E;">(), header.</span><span style="color:#005CC5;">Height</span><span style="color:#24292E;">(), []share.Namespace{namespace})</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Error fetching blobs: </span><span style="color:#005CC5;">%v\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">            fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Found </span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> blobs at height </span><span style="color:#005CC5;">%d</span><span style="color:#032F62;"> in 0xDEADBEEF namespace</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">len</span><span style="color:#24292E;">(blobs), header.</span><span style="color:#005CC5;">Height</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">case</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;-</span><span style="color:#24292E;">ctx.</span><span style="color:#005CC5;">Done</span><span style="color:#24292E;">():</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="fetching-an-extended-data-square-eds" tabindex="-1">Fetching an Extended Data Square (EDS) <a class="header-anchor" href="#fetching-an-extended-data-square-eds" aria-label="Permalink to &quot;Fetching an Extended Data Square (EDS)&quot;">​</a></h2><p>You can fetch an <a href="https://celestiaorg.github.io/celestia-app/specs/data_structures.html#erasure-coding" target="_blank" rel="noreferrer">Extended Data Square (EDS)</a> using the <a href="https://node-rpc-docs.celestia.org/#share.GetEDS" target="_blank" rel="noreferrer">share.GetEDS</a> method. This method takes a header and returns the EDS at the given height.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// GetEDS fetches the EDS at the given height.</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GetEDS</span><span style="color:#E1E4E8;">(ctx context.Context, url </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">, token </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">, height </span><span style="color:#F97583;">uint64</span><span style="color:#E1E4E8;">) (</span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">rsmt2d.ExtendedDataSquare, </span><span style="color:#F97583;">error</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    client, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#79B8FF;">NewClient</span><span style="color:#E1E4E8;">(ctx, url, token)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, err</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> client.</span><span style="color:#79B8FF;">Close</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// We close the connection after use</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// First get the header of the block you want to fetch the EDS from</span></span>
<span class="line"><span style="color:#E1E4E8;">    header, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> client.Header.</span><span style="color:#79B8FF;">GetByHeight</span><span style="color:#E1E4E8;">(ctx, height)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;">, err</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Fetch the EDS</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> client.Share.</span><span style="color:#79B8FF;">GetEDS</span><span style="color:#E1E4E8;">(ctx, header)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// GetEDS fetches the EDS at the given height.</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GetEDS</span><span style="color:#24292E;">(ctx context.Context, url </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">, token </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">, height </span><span style="color:#D73A49;">uint64</span><span style="color:#24292E;">) (</span><span style="color:#D73A49;">*</span><span style="color:#24292E;">rsmt2d.ExtendedDataSquare, </span><span style="color:#D73A49;">error</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    client, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> client.</span><span style="color:#005CC5;">NewClient</span><span style="color:#24292E;">(ctx, url, token)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, err</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> client.</span><span style="color:#005CC5;">Close</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// We close the connection after use</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// First get the header of the block you want to fetch the EDS from</span></span>
<span class="line"><span style="color:#24292E;">    header, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> client.Header.</span><span style="color:#005CC5;">GetByHeight</span><span style="color:#24292E;">(ctx, height)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;">, err</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Fetch the EDS</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> client.Share.</span><span style="color:#005CC5;">GetEDS</span><span style="color:#24292E;">(ctx, header)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="api-documentation" tabindex="-1">API documentation <a class="header-anchor" href="#api-documentation" aria-label="Permalink to &quot;API documentation&quot;">​</a></h2><p>To see the full list of available methods, see the <a href="https://node-rpc-docs.celestia.org/" target="_blank" rel="noreferrer">API documentation</a>.</p>`,47),e=[o];function t(r,c,E,y,i,F){return n(),a("div",null,e)}const C=s(p,[["render",t]]);export{d as __pageData,C as default};
