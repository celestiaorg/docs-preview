import{a as e}from"./chunks/arabica_versions.19aebf76.js";import{m as p}from"./chunks/mocha_versions.a2c68f65.js";import{m as t}from"./chunks/mainnet_versions.9581d89f.js";import{o as c,c as i,O as a,k as o,t as n,l,a as r}from"./chunks/framework.1e8f724d.js";const E={class:"vp-code-group vp-adaptive-theme"},y={class:"blocks"},d={class:"language-bash vp-adaptive-theme active"},F={class:"shiki github-dark vp-code-dark"},u={class:"line"},g={style:{color:"#9ECBFF"}},C={class:"shiki github-light vp-code-light"},h={class:"line"},b={style:{color:"#032F62"}},v={class:"language-bash vp-adaptive-theme"},k={class:"shiki github-dark vp-code-dark"},m={class:"line"},B={style:{color:"#9ECBFF"}},O={class:"shiki github-light vp-code-light"},P={class:"line"},T={style:{color:"#032F62"}},R={class:"language-bash vp-adaptive-theme"},N={class:"shiki github-dark vp-code-dark"},D={class:"line"},f={style:{color:"#9ECBFF"}},$={class:"shiki github-light vp-code-light"},w={class:"line"},W={style:{color:"#032F62"}},K={class:"vp-code-group vp-adaptive-theme"},Y={class:"blocks"},x={class:"language-bash vp-adaptive-theme active"},M={class:"shiki github-dark vp-code-dark"},q={class:"line"},H={style:{color:"#9ECBFF"}},A={class:"shiki github-light vp-code-light"},L={class:"line"},U={style:{color:"#032F62"}},Z={class:"language-bash vp-adaptive-theme"},V={class:"shiki github-dark vp-code-dark"},S={class:"line"},_={style:{color:"#9ECBFF"}},I={class:"shiki github-light vp-code-light"},X={class:"line"},Q={style:{color:"#032F62"}},z={class:"language-bash vp-adaptive-theme"},j={class:"shiki github-dark vp-code-dark"},G={class:"line"},J={style:{color:"#9ECBFF"}},ss={class:"shiki github-light vp-code-light"},os={class:"line"},as={style:{color:"#032F62"}},ns={class:"vp-code-group vp-adaptive-theme"},ls={class:"blocks"},es={class:"language-bash vp-adaptive-theme active"},ps={class:"shiki github-dark vp-code-dark"},ts={class:"line"},rs={style:{color:"#9ECBFF"}},cs={class:"shiki github-light vp-code-light"},is={class:"line"},Es={style:{color:"#032F62"}},ys={class:"language-bash vp-adaptive-theme"},ds={class:"shiki github-dark vp-code-dark"},Fs={class:"line"},us={style:{color:"#9ECBFF"}},gs={class:"shiki github-light vp-code-light"},Cs={class:"line"},hs={style:{color:"#032F62"}},bs={class:"language-bash vp-adaptive-theme"},vs={class:"shiki github-dark vp-code-dark"},ks={class:"line"},ms={style:{color:"#9ECBFF"}},Bs={class:"shiki github-light vp-code-light"},Os={class:"line"},Ps={style:{color:"#032F62"}},Ws=JSON.parse('{"title":"üê≥ Docker setup","description":"Running Celestia Node using Docker.","frontmatter":{"sidebar_label":"Docker images","description":"Running Celestia Node using Docker.","head":[["meta",{"property":"og:title","content":"üê≥ Docker setup | Celestia Docs"}],["meta",{"property":"og:description","content":"Running Celestia Node using Docker."}]]},"headers":[],"relativePath":"how-to-guides/docker-images.md","filePath":"how-to-guides/docker-images.md","lastUpdated":1749000044000}'),Ts={name:"how-to-guides/docker-images.md"},Ks=Object.assign(Ts,{setup(Rs){return(Ns,s)=>(c(),i("div",null,[s[113]||(s[113]=a('<h1 id="üê≥-docker-setup" tabindex="-1">üê≥ Docker setup <a class="header-anchor" href="#üê≥-docker-setup" aria-label="Permalink to &quot;üê≥ Docker setup&quot;">‚Äã</a></h1><p>This page has instructions to run celestia-node using Docker. If you are looking for instructions to run celestia-node using a binary, please refer to the <a href="/docs-preview/pr-2070/how-to-guides/celestia-node">celestia-node page</a>.</p><p>Using Docker is the easiest way to run celestia-node for most users. Docker is a containerization platform that allows you to run celestia-node in an isolated environment.</p><p>This means that you can run celestia-node on your machine without having to worry about installing and configuring all of the dependencies required to run the node.</p><p>If you would like to learn more about key management in Docker, visit the <a href="/docs-preview/pr-2070/tutorials/celestia-node-key#docker-and-cel-key">Docker and <code>cel-key</code> section</a>.</p><p>The easiest way to install Docker is to use the Docker Desktop installer or Ubuntu. You can <a href="https://docs.docker.com/engine/install" target="_blank" rel="noreferrer">follow the instructions for your operating system</a>.</p><h2 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">‚Äã</a></h2><ul><li><a href="https://docs.docker.com/get-docker" target="_blank" rel="noreferrer">Docker Desktop for Mac or Windows</a> and a basic understanding of Docker</li><li><a href="https://docs.docker.com/engine/install/" target="_blank" rel="noreferrer">Docker Engine for Linux</a> and a basic understanding of Docker</li></ul><h2 id="quick-start" tabindex="-1">Quick start <a class="header-anchor" href="#quick-start" aria-label="Permalink to &quot;Quick start&quot;">‚Äã</a></h2>',9)),o("ol",null,[s[38]||(s[38]=a('<li><p>Set <a href="/docs-preview/pr-2070/how-to-guides/participate">the network</a> you would like to run your node on:</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-Oqk2f" id="tab-0K9HrjH" checked="checked"><label for="tab-0K9HrjH">Mainnet Beta</label><input type="radio" name="group-Oqk2f" id="tab-vT9dxFZ"><label for="tab-vT9dxFZ">Mocha</label><input type="radio" name="group-Oqk2f" id="tab-mgqJxvQ"><label for="tab-mgqJxvQ">Arabica</label></div><div class="blocks"><div class="language-bash vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> NETWORK</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">celestia</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> NETWORK</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">celestia</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> NETWORK</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">mocha</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> NETWORK</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">mocha</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> NETWORK</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">arabica</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> NETWORK</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">arabica</span></span></code></pre></div></div></div></li><li><p>Set the node type</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-52HIX" id="tab-D61YOqE" checked="checked"><label for="tab-D61YOqE">Light</label><input type="radio" name="group-52HIX" id="tab-kbTEGKD"><label for="tab-kbTEGKD">Bridge</label><input type="radio" name="group-52HIX" id="tab-Ndn-dcX"><label for="tab-Ndn-dcX">Full</label></div><div class="blocks"><div class="language-bash vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> NODE_TYPE</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">light</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> NODE_TYPE</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">light</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> NODE_TYPE</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">bridge</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> NODE_TYPE</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">bridge</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> NODE_TYPE</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">full</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> NODE_TYPE</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">full</span></span></code></pre></div></div></div></li><li><p>Set an RPC endpoint for either <a href="/docs-preview/pr-2070/how-to-guides/mainnet#integrations">Mainnet Beta</a>, <a href="/docs-preview/pr-2070/how-to-guides/mocha-testnet#integrations">Mocha</a>, or <a href="/docs-preview/pr-2070/how-to-guides/arabica-devnet#integrations">Arabica</a> using the bare URL (without http or https):</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> RPC_URL</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">this-is-an-rpc-url.com</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> RPC_URL</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">this-is-an-rpc-url.com</span></span></code></pre></div><p>Then set the port for the RPC_URL:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> RPC_PORT</span><span style="color:#F97583;">=</span><span style="color:#79B8FF;">9090</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> RPC_PORT</span><span style="color:#D73A49;">=</span><span style="color:#005CC5;">9090</span></span></code></pre></div></li>',3)),o("li",null,[s[37]||(s[37]=o("p",null,"Run the image from the command line:",-1)),o("div",E,[s[36]||(s[36]=a('<div class="tabs"><input type="radio" name="group-WsBuw" id="tab-vg_szxZ" checked="checked"><label for="tab-vg_szxZ">Mainnet Beta</label><input type="radio" name="group-WsBuw" id="tab-jSi2EaW"><label for="tab-jSi2EaW">Mocha</label><input type="radio" name="group-WsBuw" id="tab-7XVu81Y"><label for="tab-7XVu81Y">Arabica</label></div>',1)),o("div",y,[o("div",d,[s[10]||(s[10]=o("button",{title:"Copy Code",class:"copy"},null,-1)),s[11]||(s[11]=o("span",{class:"lang"},"bash",-1)),o("pre",F,[o("code",null,[s[3]||(s[3]=a(`<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">NODE_TYPE=</span><span style="color:#E1E4E8;">$NODE_TYPE </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">P2P_NETWORK=</span><span style="color:#E1E4E8;">$NETWORK </span><span style="color:#79B8FF;">\\</span></span>
`,2)),o("span",u,[s[0]||(s[0]=o("span",{style:{color:"#E1E4E8"}},"    ",-1)),o("span",g,"ghcr.io/celestiaorg/celestia-node:"+n(l(t)["node-latest-tag"]),1),s[1]||(s[1]=o("span",{style:{color:"#E1E4E8"}}," ",-1)),s[2]||(s[2]=o("span",{style:{color:"#79B8FF"}},"\\",-1))]),s[4]||(s[4]=a(`
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">celestia</span><span style="color:#E1E4E8;"> $NODE_TYPE </span><span style="color:#9ECBFF;">start</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--core.ip</span><span style="color:#E1E4E8;"> $RPC_URL </span><span style="color:#79B8FF;">--core.port</span><span style="color:#E1E4E8;"> $RPC_PORT </span><span style="color:#79B8FF;">--p2p.network</span><span style="color:#E1E4E8;"> $NETWORK</span></span>`,2))])]),o("pre",C,[o("code",null,[s[8]||(s[8]=a(`<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">NODE_TYPE=</span><span style="color:#24292E;">$NODE_TYPE </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">P2P_NETWORK=</span><span style="color:#24292E;">$NETWORK </span><span style="color:#005CC5;">\\</span></span>
`,2)),o("span",h,[s[5]||(s[5]=o("span",{style:{color:"#24292E"}},"    ",-1)),o("span",b,"ghcr.io/celestiaorg/celestia-node:"+n(l(t)["node-latest-tag"]),1),s[6]||(s[6]=o("span",{style:{color:"#24292E"}}," ",-1)),s[7]||(s[7]=o("span",{style:{color:"#005CC5"}},"\\",-1))]),s[9]||(s[9]=a(`
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">celestia</span><span style="color:#24292E;"> $NODE_TYPE </span><span style="color:#032F62;">start</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--core.ip</span><span style="color:#24292E;"> $RPC_URL </span><span style="color:#005CC5;">--core.port</span><span style="color:#24292E;"> $RPC_PORT </span><span style="color:#005CC5;">--p2p.network</span><span style="color:#24292E;"> $NETWORK</span></span>`,2))])])]),o("div",v,[s[22]||(s[22]=o("button",{title:"Copy Code",class:"copy"},null,-1)),s[23]||(s[23]=o("span",{class:"lang"},"bash",-1)),o("pre",k,[o("code",null,[s[15]||(s[15]=a(`<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">NODE_TYPE=</span><span style="color:#E1E4E8;">$NODE_TYPE </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">P2P_NETWORK=</span><span style="color:#E1E4E8;">$NETWORK </span><span style="color:#79B8FF;">\\</span></span>
`,2)),o("span",m,[s[12]||(s[12]=o("span",{style:{color:"#E1E4E8"}},"    ",-1)),o("span",B,"ghcr.io/celestiaorg/celestia-node:"+n(l(p)["node-latest-tag"]),1),s[13]||(s[13]=o("span",{style:{color:"#E1E4E8"}}," ",-1)),s[14]||(s[14]=o("span",{style:{color:"#79B8FF"}},"\\",-1))]),s[16]||(s[16]=a(`
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">celestia</span><span style="color:#E1E4E8;"> $NODE_TYPE </span><span style="color:#9ECBFF;">start</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--core.ip</span><span style="color:#E1E4E8;"> $RPC_URL </span><span style="color:#79B8FF;">--core.port</span><span style="color:#E1E4E8;"> $RPC_PORT </span><span style="color:#79B8FF;">--p2p.network</span><span style="color:#E1E4E8;"> $NETWORK</span></span>`,2))])]),o("pre",O,[o("code",null,[s[20]||(s[20]=a(`<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">NODE_TYPE=</span><span style="color:#24292E;">$NODE_TYPE </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">P2P_NETWORK=</span><span style="color:#24292E;">$NETWORK </span><span style="color:#005CC5;">\\</span></span>
`,2)),o("span",P,[s[17]||(s[17]=o("span",{style:{color:"#24292E"}},"    ",-1)),o("span",T,"ghcr.io/celestiaorg/celestia-node:"+n(l(p)["node-latest-tag"]),1),s[18]||(s[18]=o("span",{style:{color:"#24292E"}}," ",-1)),s[19]||(s[19]=o("span",{style:{color:"#005CC5"}},"\\",-1))]),s[21]||(s[21]=a(`
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">celestia</span><span style="color:#24292E;"> $NODE_TYPE </span><span style="color:#032F62;">start</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--core.ip</span><span style="color:#24292E;"> $RPC_URL </span><span style="color:#005CC5;">--core.port</span><span style="color:#24292E;"> $RPC_PORT </span><span style="color:#005CC5;">--p2p.network</span><span style="color:#24292E;"> $NETWORK</span></span>`,2))])])]),o("div",R,[s[34]||(s[34]=o("button",{title:"Copy Code",class:"copy"},null,-1)),s[35]||(s[35]=o("span",{class:"lang"},"bash",-1)),o("pre",N,[o("code",null,[s[27]||(s[27]=a(`<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">NODE_TYPE=</span><span style="color:#E1E4E8;">$NODE_TYPE </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">P2P_NETWORK=</span><span style="color:#E1E4E8;">$NETWORK </span><span style="color:#79B8FF;">\\</span></span>
`,2)),o("span",D,[s[24]||(s[24]=o("span",{style:{color:"#E1E4E8"}},"    ",-1)),o("span",f,"ghcr.io/celestiaorg/celestia-node:"+n(l(e)["node-latest-tag"]),1),s[25]||(s[25]=o("span",{style:{color:"#E1E4E8"}}," ",-1)),s[26]||(s[26]=o("span",{style:{color:"#79B8FF"}},"\\",-1))]),s[28]||(s[28]=a(`
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">celestia</span><span style="color:#E1E4E8;"> $NODE_TYPE </span><span style="color:#9ECBFF;">start</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--core.ip</span><span style="color:#E1E4E8;"> $RPC_URL </span><span style="color:#79B8FF;">--core.port</span><span style="color:#E1E4E8;"> $RPC_PORT </span><span style="color:#79B8FF;">--p2p.network</span><span style="color:#E1E4E8;"> $NETWORK</span></span>`,2))])]),o("pre",$,[o("code",null,[s[32]||(s[32]=a(`<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">NODE_TYPE=</span><span style="color:#24292E;">$NODE_TYPE </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">P2P_NETWORK=</span><span style="color:#24292E;">$NETWORK </span><span style="color:#005CC5;">\\</span></span>
`,2)),o("span",w,[s[29]||(s[29]=o("span",{style:{color:"#24292E"}},"    ",-1)),o("span",W,"ghcr.io/celestiaorg/celestia-node:"+n(l(e)["node-latest-tag"]),1),s[30]||(s[30]=o("span",{style:{color:"#24292E"}}," ",-1)),s[31]||(s[31]=o("span",{style:{color:"#005CC5"}},"\\",-1))]),s[33]||(s[33]=a(`
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">celestia</span><span style="color:#24292E;"> $NODE_TYPE </span><span style="color:#032F62;">start</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--core.ip</span><span style="color:#24292E;"> $RPC_URL </span><span style="color:#005CC5;">--core.port</span><span style="color:#24292E;"> $RPC_PORT </span><span style="color:#005CC5;">--p2p.network</span><span style="color:#24292E;"> $NETWORK</span></span>`,2))])])])])])])]),s[114]||(s[114]=a(`<p>Congratulations! You now have a celestia-node running!</p><p>If you would like to run the node with custom flags, you can refer to the <a href="/docs-preview/pr-2070/tutorials/node-tutorial#connect-to-a-core-endpoint">celestia-node tutorial</a> page. Refer to <a href="/docs-preview/pr-2070/how-to-guides/celestia-node-troubleshooting#ports">the ports section of the celestia-node troubleshooting page</a> for information on which ports are required to be open on your machine.</p><h2 id="light-node-setup-with-persistent-storage" tabindex="-1">Light node setup with persistent storage <a class="header-anchor" href="#light-node-setup-with-persistent-storage" aria-label="Permalink to &quot;Light node setup with persistent storage&quot;">‚Äã</a></h2><p>If you delete a container that you started above, all data will be lost. To avoid this, you can mount a volume to the container. This will allow you to persist data even after the container is deleted.</p><p>First, you will need to create a directory on your host machine. This directory will be used to store the data for the container. Create a directory on your host machine and give it a name. For example, you can name it <code>my-node-store</code>:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> $HOME</span></span>
<span class="line"><span style="color:#B392F0;">mkdir</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">my-node-store</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> $HOME</span></span>
<span class="line"><span style="color:#6F42C1;">mkdir</span><span style="color:#24292E;"> </span><span style="color:#032F62;">my-node-store</span></span></code></pre></div><p>Now, you can mount this directory to the container. Before mounting a volume, you <em>may</em> need to set permissions for the user on the host machine by running:</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-QZPZy" id="tab-WtRZQvV" checked="checked"><label for="tab-WtRZQvV">Docker Engine on Linux</label><input type="radio" name="group-QZPZy" id="tab-aaDuXnM"><label for="tab-aaDuXnM">Docker Desktop on Mac</label></div><div class="blocks"><div class="language-bash vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">sudo</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">chown</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10001</span><span style="color:#9ECBFF;">:10001</span><span style="color:#E1E4E8;"> $HOME</span><span style="color:#9ECBFF;">/my-node-store</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">sudo</span><span style="color:#24292E;"> </span><span style="color:#032F62;">chown</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10001</span><span style="color:#032F62;">:10001</span><span style="color:#24292E;"> $HOME</span><span style="color:#032F62;">/my-node-store</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># you&#39;re good to go üòé</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># you&#39;re good to go üòé</span></span></code></pre></div></div></div><h3 id="initialize-the-node-store-and-key" tabindex="-1">Initialize the node store and key <a class="header-anchor" href="#initialize-the-node-store-and-key" aria-label="Permalink to &quot;Initialize the node store and key&quot;">‚Äã</a></h3><p>In order to mount a volume to the container, you need to specify the path to the volume. When you run your container, you can specify the path to the volume using the <code>--volume</code> (or <code>-v</code> for short) flag. In this command, we&#39;ll create our key and initialize the node store, using the variables we set in the <a href="#quick-start">quick start</a> section:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># --volume == -v [local path]:[container path]</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> [args...] -v $HOME/my-node-store:/home/celestia \\</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">celestia</span><span style="color:#E1E4E8;"> $NODE_TYPE </span><span style="color:#9ECBFF;">init</span><span style="color:#E1E4E8;"> [args...]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># --volume == -v [local path]:[container path]</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> [args...] -v $HOME/my-node-store:/home/celestia \\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">celestia</span><span style="color:#24292E;"> $NODE_TYPE </span><span style="color:#032F62;">init</span><span style="color:#24292E;"> [args...]</span></span></code></pre></div><p>An example init command will look similar to below:</p>`,12)),o("div",K,[s[75]||(s[75]=a('<div class="tabs"><input type="radio" name="group-DZ6nT" id="tab-gawaGOZ" checked="checked"><label for="tab-gawaGOZ">Mainnet Beta</label><input type="radio" name="group-DZ6nT" id="tab-fJh-q_e"><label for="tab-fJh-q_e">Mocha</label><input type="radio" name="group-DZ6nT" id="tab-LK9KXUH"><label for="tab-LK9KXUH">Arabica</label></div>',1)),o("div",Y,[o("div",x,[s[49]||(s[49]=o("button",{title:"Copy Code",class:"copy"},null,-1)),s[50]||(s[50]=o("span",{class:"lang"},"bash",-1)),o("pre",M,[o("code",null,[s[42]||(s[42]=a(`<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">NODE_TYPE=</span><span style="color:#E1E4E8;">$NODE_TYPE </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">P2P_NETWORK=</span><span style="color:#E1E4E8;">$NETWORK </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> $HOME</span><span style="color:#9ECBFF;">/my-node-store:/home/celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
`,4)),o("span",q,[s[39]||(s[39]=o("span",{style:{color:"#E1E4E8"}},"    ",-1)),o("span",H,"ghcr.io/celestiaorg/celestia-node:"+n(l(t)["node-latest-tag"]),1),s[40]||(s[40]=o("span",{style:{color:"#E1E4E8"}}," ",-1)),s[41]||(s[41]=o("span",{style:{color:"#79B8FF"}},"\\",-1))]),s[43]||(s[43]=a(`
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">light</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--p2p.network</span><span style="color:#E1E4E8;"> $NETWORK</span></span>`,2))])]),o("pre",A,[o("code",null,[s[47]||(s[47]=a(`<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">NODE_TYPE=</span><span style="color:#24292E;">$NODE_TYPE </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">P2P_NETWORK=</span><span style="color:#24292E;">$NETWORK </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> $HOME</span><span style="color:#032F62;">/my-node-store:/home/celestia</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
`,4)),o("span",L,[s[44]||(s[44]=o("span",{style:{color:"#24292E"}},"    ",-1)),o("span",U,"ghcr.io/celestiaorg/celestia-node:"+n(l(t)["node-latest-tag"]),1),s[45]||(s[45]=o("span",{style:{color:"#24292E"}}," ",-1)),s[46]||(s[46]=o("span",{style:{color:"#005CC5"}},"\\",-1))]),s[48]||(s[48]=a(`
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">celestia</span><span style="color:#24292E;"> </span><span style="color:#032F62;">light</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--p2p.network</span><span style="color:#24292E;"> $NETWORK</span></span>`,2))])])]),o("div",Z,[s[61]||(s[61]=o("button",{title:"Copy Code",class:"copy"},null,-1)),s[62]||(s[62]=o("span",{class:"lang"},"bash",-1)),o("pre",V,[o("code",null,[s[54]||(s[54]=a(`<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">NODE_TYPE=</span><span style="color:#E1E4E8;">$NODE_TYPE </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">P2P_NETWORK=</span><span style="color:#E1E4E8;">$NETWORK </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> $HOME</span><span style="color:#9ECBFF;">/my-node-store:/home/celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
`,4)),o("span",S,[s[51]||(s[51]=o("span",{style:{color:"#E1E4E8"}},"    ",-1)),o("span",_,"ghcr.io/celestiaorg/celestia-node:"+n(l(p)["node-latest-tag"]),1),s[52]||(s[52]=o("span",{style:{color:"#E1E4E8"}}," ",-1)),s[53]||(s[53]=o("span",{style:{color:"#79B8FF"}},"\\",-1))]),s[55]||(s[55]=a(`
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">light</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--p2p.network</span><span style="color:#E1E4E8;"> $NETWORK</span></span>`,2))])]),o("pre",I,[o("code",null,[s[59]||(s[59]=a(`<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">NODE_TYPE=</span><span style="color:#24292E;">$NODE_TYPE </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">P2P_NETWORK=</span><span style="color:#24292E;">$NETWORK </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> $HOME</span><span style="color:#032F62;">/my-node-store:/home/celestia</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
`,4)),o("span",X,[s[56]||(s[56]=o("span",{style:{color:"#24292E"}},"    ",-1)),o("span",Q,"ghcr.io/celestiaorg/celestia-node:"+n(l(p)["node-latest-tag"]),1),s[57]||(s[57]=o("span",{style:{color:"#24292E"}}," ",-1)),s[58]||(s[58]=o("span",{style:{color:"#005CC5"}},"\\",-1))]),s[60]||(s[60]=a(`
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">celestia</span><span style="color:#24292E;"> </span><span style="color:#032F62;">light</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--p2p.network</span><span style="color:#24292E;"> $NETWORK</span></span>`,2))])])]),o("div",z,[s[73]||(s[73]=o("button",{title:"Copy Code",class:"copy"},null,-1)),s[74]||(s[74]=o("span",{class:"lang"},"bash",-1)),o("pre",j,[o("code",null,[s[66]||(s[66]=a(`<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">NODE_TYPE=</span><span style="color:#E1E4E8;">$NODE_TYPE </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">P2P_NETWORK=</span><span style="color:#E1E4E8;">$NETWORK </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> $HOME</span><span style="color:#9ECBFF;">/my-node-store:/home/celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
`,4)),o("span",G,[s[63]||(s[63]=o("span",{style:{color:"#E1E4E8"}},"    ",-1)),o("span",J,"ghcr.io/celestiaorg/celestia-node:"+n(l(e)["node-latest-tag"]),1),s[64]||(s[64]=o("span",{style:{color:"#E1E4E8"}}," ",-1)),s[65]||(s[65]=o("span",{style:{color:"#79B8FF"}},"\\",-1))]),s[67]||(s[67]=a(`
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">light</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--p2p.network</span><span style="color:#E1E4E8;"> $NETWORK</span></span>`,2))])]),o("pre",ss,[o("code",null,[s[71]||(s[71]=a(`<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">NODE_TYPE=</span><span style="color:#24292E;">$NODE_TYPE </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">P2P_NETWORK=</span><span style="color:#24292E;">$NETWORK </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> $HOME</span><span style="color:#032F62;">/my-node-store:/home/celestia</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
`,4)),o("span",os,[s[68]||(s[68]=o("span",{style:{color:"#24292E"}},"    ",-1)),o("span",as,"ghcr.io/celestiaorg/celestia-node:"+n(l(e)["node-latest-tag"]),1),s[69]||(s[69]=o("span",{style:{color:"#24292E"}}," ",-1)),s[70]||(s[70]=o("span",{style:{color:"#005CC5"}},"\\",-1))]),s[72]||(s[72]=a(`
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">celestia</span><span style="color:#24292E;"> </span><span style="color:#032F62;">light</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--p2p.network</span><span style="color:#24292E;"> $NETWORK</span></span>`,2))])])])])]),s[115]||(s[115]=a(`<h3 id="start-the-node" tabindex="-1">Start the node <a class="header-anchor" href="#start-the-node" aria-label="Permalink to &quot;Start the node&quot;">‚Äã</a></h3><p>Run the following command to start the node:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># --volume == -v [local path]:[container path]</span></span>
<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> [...args] -v $HOME/my-node-store:/home/celestia \\</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#9ECBFF;">node-typ</span><span style="color:#E1E4E8;">e</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">start</span><span style="color:#E1E4E8;"> [...args]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># --volume == -v [local path]:[container path]</span></span>
<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> [...args] -v $HOME/my-node-store:/home/celestia \\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">celestia</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#032F62;">node-typ</span><span style="color:#24292E;">e</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">start</span><span style="color:#24292E;"> [...args]</span></span></code></pre></div><p>A full start command will look similar to below.</p>`,4)),o("div",ns,[s[112]||(s[112]=a('<div class="tabs"><input type="radio" name="group-rw7o5" id="tab-ZTvt2qu" checked="checked"><label for="tab-ZTvt2qu">Mainnet Beta</label><input type="radio" name="group-rw7o5" id="tab-8H4VUx0"><label for="tab-8H4VUx0">Mocha</label><input type="radio" name="group-rw7o5" id="tab-lpKHuni"><label for="tab-lpKHuni">Arabica</label></div>',1)),o("div",ls,[o("div",es,[s[86]||(s[86]=o("button",{title:"Copy Code",class:"copy"},null,-1)),s[87]||(s[87]=o("span",{class:"lang"},"bash",-1)),o("pre",ps,[o("code",null,[s[79]||(s[79]=a(`<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">NODE_TYPE=</span><span style="color:#E1E4E8;">$NODE_TYPE </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">P2P_NETWORK=</span><span style="color:#E1E4E8;">$NETWORK </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> $HOME</span><span style="color:#9ECBFF;">/my-node-store:/home/celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
`,4)),o("span",ts,[s[76]||(s[76]=o("span",{style:{color:"#E1E4E8"}},"    ",-1)),o("span",rs,"ghcr.io/celestiaorg/celestia-node:"+n(l(t)["node-latest-tag"]),1),s[77]||(s[77]=o("span",{style:{color:"#E1E4E8"}}," ",-1)),s[78]||(s[78]=o("span",{style:{color:"#79B8FF"}},"\\",-1))]),s[80]||(s[80]=a(`
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">light</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">start</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--core.ip</span><span style="color:#E1E4E8;"> $RPC_URL </span><span style="color:#79B8FF;">--core.port</span><span style="color:#E1E4E8;"> $RPC_PORT </span><span style="color:#79B8FF;">--p2p.network</span><span style="color:#E1E4E8;"> $NETWORK</span></span>`,2))])]),o("pre",cs,[o("code",null,[s[84]||(s[84]=a(`<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">NODE_TYPE=</span><span style="color:#24292E;">$NODE_TYPE </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">P2P_NETWORK=</span><span style="color:#24292E;">$NETWORK </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> $HOME</span><span style="color:#032F62;">/my-node-store:/home/celestia</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
`,4)),o("span",is,[s[81]||(s[81]=o("span",{style:{color:"#24292E"}},"    ",-1)),o("span",Es,"ghcr.io/celestiaorg/celestia-node:"+n(l(t)["node-latest-tag"]),1),s[82]||(s[82]=o("span",{style:{color:"#24292E"}}," ",-1)),s[83]||(s[83]=o("span",{style:{color:"#005CC5"}},"\\",-1))]),s[85]||(s[85]=a(`
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">celestia</span><span style="color:#24292E;"> </span><span style="color:#032F62;">light</span><span style="color:#24292E;"> </span><span style="color:#032F62;">start</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--core.ip</span><span style="color:#24292E;"> $RPC_URL </span><span style="color:#005CC5;">--core.port</span><span style="color:#24292E;"> $RPC_PORT </span><span style="color:#005CC5;">--p2p.network</span><span style="color:#24292E;"> $NETWORK</span></span>`,2))])])]),o("div",ys,[s[98]||(s[98]=o("button",{title:"Copy Code",class:"copy"},null,-1)),s[99]||(s[99]=o("span",{class:"lang"},"bash",-1)),o("pre",ds,[o("code",null,[s[91]||(s[91]=a(`<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">NODE_TYPE=</span><span style="color:#E1E4E8;">$NODE_TYPE </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">P2P_NETWORK=</span><span style="color:#E1E4E8;">$NETWORK </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> $HOME</span><span style="color:#9ECBFF;">/my-node-store:/home/celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
`,4)),o("span",Fs,[s[88]||(s[88]=o("span",{style:{color:"#E1E4E8"}},"    ",-1)),o("span",us,"ghcr.io/celestiaorg/celestia-node:"+n(l(p)["node-latest-tag"]),1),s[89]||(s[89]=o("span",{style:{color:"#E1E4E8"}}," ",-1)),s[90]||(s[90]=o("span",{style:{color:"#79B8FF"}},"\\",-1))]),s[92]||(s[92]=a(`
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">light</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">start</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--core.ip</span><span style="color:#E1E4E8;"> $RPC_URL </span><span style="color:#79B8FF;">--core.port</span><span style="color:#E1E4E8;"> $RPC_PORT </span><span style="color:#79B8FF;">--p2p.network</span><span style="color:#E1E4E8;"> $NETWORK</span></span>`,2))])]),o("pre",gs,[o("code",null,[s[96]||(s[96]=a(`<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">NODE_TYPE=</span><span style="color:#24292E;">$NODE_TYPE </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">P2P_NETWORK=</span><span style="color:#24292E;">$NETWORK </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> $HOME</span><span style="color:#032F62;">/my-node-store:/home/celestia</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
`,4)),o("span",Cs,[s[93]||(s[93]=o("span",{style:{color:"#24292E"}},"    ",-1)),o("span",hs,"ghcr.io/celestiaorg/celestia-node:"+n(l(p)["node-latest-tag"]),1),s[94]||(s[94]=o("span",{style:{color:"#24292E"}}," ",-1)),s[95]||(s[95]=o("span",{style:{color:"#005CC5"}},"\\",-1))]),s[97]||(s[97]=a(`
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">celestia</span><span style="color:#24292E;"> </span><span style="color:#032F62;">light</span><span style="color:#24292E;"> </span><span style="color:#032F62;">start</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--core.ip</span><span style="color:#24292E;"> $RPC_URL </span><span style="color:#005CC5;">--core.port</span><span style="color:#24292E;"> $RPC_PORT </span><span style="color:#005CC5;">--p2p.network</span><span style="color:#24292E;"> $NETWORK</span></span>`,2))])])]),o("div",bs,[s[110]||(s[110]=o("button",{title:"Copy Code",class:"copy"},null,-1)),s[111]||(s[111]=o("span",{class:"lang"},"bash",-1)),o("pre",vs,[o("code",null,[s[103]||(s[103]=a(`<span class="line"><span style="color:#B392F0;">docker</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">NODE_TYPE=</span><span style="color:#E1E4E8;">$NODE_TYPE </span><span style="color:#79B8FF;">-e</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">P2P_NETWORK=</span><span style="color:#E1E4E8;">$NETWORK </span><span style="color:#79B8FF;">\\</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">-v</span><span style="color:#E1E4E8;"> $HOME</span><span style="color:#9ECBFF;">/my-node-store:/home/celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">\\</span></span>
`,4)),o("span",ks,[s[100]||(s[100]=o("span",{style:{color:"#E1E4E8"}},"    ",-1)),o("span",ms,"ghcr.io/celestiaorg/celestia-node:"+n(l(e)["node-latest-tag"]),1),s[101]||(s[101]=o("span",{style:{color:"#E1E4E8"}}," ",-1)),s[102]||(s[102]=o("span",{style:{color:"#79B8FF"}},"\\",-1))]),s[104]||(s[104]=a(`
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">light</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">start</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--core.ip</span><span style="color:#E1E4E8;"> $RPC_URL </span><span style="color:#79B8FF;">--core.port</span><span style="color:#E1E4E8;"> $RPC_PORT </span><span style="color:#79B8FF;">--p2p.network</span><span style="color:#E1E4E8;"> $NETWORK</span></span>`,2))])]),o("pre",Bs,[o("code",null,[s[108]||(s[108]=a(`<span class="line"><span style="color:#6F42C1;">docker</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">NODE_TYPE=</span><span style="color:#24292E;">$NODE_TYPE </span><span style="color:#005CC5;">-e</span><span style="color:#24292E;"> </span><span style="color:#032F62;">P2P_NETWORK=</span><span style="color:#24292E;">$NETWORK </span><span style="color:#005CC5;">\\</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">-v</span><span style="color:#24292E;"> $HOME</span><span style="color:#032F62;">/my-node-store:/home/celestia</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">\\</span></span>
`,4)),o("span",Os,[s[105]||(s[105]=o("span",{style:{color:"#24292E"}},"    ",-1)),o("span",Ps,"ghcr.io/celestiaorg/celestia-node:"+n(l(e)["node-latest-tag"]),1),s[106]||(s[106]=o("span",{style:{color:"#24292E"}}," ",-1)),s[107]||(s[107]=o("span",{style:{color:"#005CC5"}},"\\",-1))]),s[109]||(s[109]=a(`
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">celestia</span><span style="color:#24292E;"> </span><span style="color:#032F62;">light</span><span style="color:#24292E;"> </span><span style="color:#032F62;">start</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--core.ip</span><span style="color:#24292E;"> $RPC_URL </span><span style="color:#005CC5;">--core.port</span><span style="color:#24292E;"> $RPC_PORT </span><span style="color:#005CC5;">--p2p.network</span><span style="color:#24292E;"> $NETWORK</span></span>`,2))])])])])]),s[116]||(s[116]=o("p",null,"Congratulations! You now have a node running with persistent storage.",-1)),s[117]||(s[117]=o("h2",{id:"video-walkthrough",tabindex:"-1"},[r("Video walkthrough "),o("a",{class:"header-anchor",href:"#video-walkthrough","aria-label":'Permalink to "Video walkthrough"'},"‚Äã")],-1)),s[118]||(s[118]=o("div",{class:"youtube-wrapper"},[o("iframe",{class:"youtube-video",title:"Running a Celestia light node",src:"https://youtube.com/embed/WFubhQc8tGk",allowfullscreen:""})],-1)),s[119]||(s[119]=o("h3",{id:"_2-5-minute-version",tabindex:"-1"},[r("2.5 minute version "),o("a",{class:"header-anchor",href:"#_2-5-minute-version","aria-label":'Permalink to "2.5 minute version"'},"‚Äã")],-1)),s[120]||(s[120]=o("div",{class:"youtube-wrapper"},[o("iframe",{class:"youtube-video",title:"Running a Celestia light node",src:"https://youtube.com/embed/ROZv871Q7RM",allowfullscreen:""})],-1)),s[121]||(s[121]=o("h2",{id:"troubleshooting",tabindex:"-1"},[r("Troubleshooting "),o("a",{class:"header-anchor",href:"#troubleshooting","aria-label":'Permalink to "Troubleshooting"'},"‚Äã")],-1)),s[122]||(s[122]=o("p",null,[r("For security purposes Celestia expects to interact with your node's keys in a read-only manner. This is enforced using linux style permissions on the filesystem. Windows NTFS does not support these types of permissions. As a result the recommended path for Windows users to mount a persisted volume is to do so within WSL. You can find "),o("a",{href:"https://learn.microsoft.com/en-us/windows/wsl/install",target:"_blank",rel:"noreferrer"},"instructions for installing WSL"),r(".")],-1))]))}});export{Ws as __pageData,Ks as default};
