import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.212d62c2.js";const e="/pr-preview/pr-1430/img/blobstream/blobstream-square.png",l="/pr-preview/pr-1430/img/blobstream/blobstream-commitment-diagram.png",m=JSON.parse('{"title":"Blobstream proofs queries","description":"Learn how to query the inclusion proofs used in Blobstream","frontmatter":{"description":"Learn how to query the inclusion proofs used in Blobstream","head":[["meta",{"name":"og:title","content":"Blobstream proofs queries | Celestia Docs"},{"name":"og:description","content":false}]]},"headers":[],"relativePath":"developers/blobstream-proof-queries.md","filePath":"developers/blobstream-proof-queries.md","lastUpdated":1708607087000}'),p={name:"developers/blobstream-proof-queries.md"},t=o(`<h1 id="blobstream-proofs-queries" tabindex="-1">Blobstream proofs queries <a class="header-anchor" href="#blobstream-proofs-queries" aria-label="Permalink to &quot;Blobstream proofs queries&quot;">​</a></h1><h2 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h2><ul><li>Access to a Celestia <a href="./../nodes/consensus-node">consensus full node</a> RPC endpoint (or full node). The node doesn&#39;t need to be a validating node in order for the proofs to be queried. A full node is enough.</li></ul><h2 id="querying-the-proofs" tabindex="-1">Querying the proofs <a class="header-anchor" href="#querying-the-proofs" aria-label="Permalink to &quot;Querying the proofs&quot;">​</a></h2><p>To prove PFBs, blobs or shares, we can use the Celestia consensus node&#39;s RPC to query proofs for them:</p><h3 id="_1-data-root-inclusion-proof" tabindex="-1">1. Data root inclusion proof <a class="header-anchor" href="#_1-data-root-inclusion-proof" aria-label="Permalink to &quot;1. Data root inclusion proof&quot;">​</a></h3><p>To prove the data root is committed to by the Blobstream smart contract, we will need to provide a Merkle proof of the data root tuple to a data root tuple root. This can be created using the <a href="https://github.com/celestiaorg/celestia-core/blob/c3ab251659f6fe0f36d10e0dbd14c29a78a85352/rpc/client/http/http.go#L492-L511" target="_blank" rel="noreferrer"><code>data_root_inclusion_proof</code></a> query.</p><p>This <a href="https://github.com/celestiaorg/celestia-core/blob/793ece9bbd732aec3e09018e37dc31f4bfe122d9/rpc/openapi/openapi.yaml#L1045-L1093" target="_blank" rel="noreferrer">endpoint</a> allows querying a data root to data root tuple root proof. It takes a block <code>height</code>, a starting block, and an end block, then it generates the binary Merkle proof of the <code>DataRootTuple</code>, corresponding to that <code>height</code>, to the <code>DataRootTupleRoot</code> which is committed to in the Blobstream contract.</p><p>Example request: <code>/data_root_inclusion_proof?height=15&amp;start=10&amp;end=20</code></p><p>Which queries the proof of the height <code>15</code> to the data commitment defined by the range <code>[10, 20)</code>.</p><p>Example response:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;jsonrpc&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;2.0&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;id&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">-1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;result&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;proof&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;total&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;10&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;index&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;5&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;leaf_hash&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;vkRaRg7FGtZ/ZhsJRh/Uhhb3U6dPaYJ1pJNEfrwq5HE=&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;aunts&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;nmBWWwHpipHwagaI7MAqM/yhCDb4cz7z4lRxmVRq5f8=&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;nyzLbFJjnSKOfRZur8xvJiJLA+wBPtwm0KbYglILxLg=&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;GI/tJ9WSwcyHM0r0i8t+p3hPFtDieuYR9wSPVkL1r2s=&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;+SGf6MfzMmtDKz5MLlH+y7mPV9Moo2x5rLjLe3gbFQo=&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      ]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;jsonrpc&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;2.0&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;id&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">-1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;result&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;proof&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;total&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;10&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;index&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;5&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;leaf_hash&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;vkRaRg7FGtZ/ZhsJRh/Uhhb3U6dPaYJ1pJNEfrwq5HE=&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;aunts&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;nmBWWwHpipHwagaI7MAqM/yhCDb4cz7z4lRxmVRq5f8=&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;nyzLbFJjnSKOfRZur8xvJiJLA+wBPtwm0KbYglILxLg=&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;GI/tJ9WSwcyHM0r0i8t+p3hPFtDieuYR9wSPVkL1r2s=&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;+SGf6MfzMmtDKz5MLlH+y7mPV9Moo2x5rLjLe3gbFQo=&quot;</span></span>
<span class="line"><span style="color:#24292E;">      ]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>The values are base64 encoded. For these to be usable with the solidity smart contract, they need to be converted to <code>bytes32</code>. Check the next section for more information.</p></div><h3 id="_2-transaction-inclusion-proof" tabindex="-1">2. Transaction inclusion proof <a class="header-anchor" href="#_2-transaction-inclusion-proof" aria-label="Permalink to &quot;2. Transaction inclusion proof&quot;">​</a></h3><p>To prove that a rollup transaction is part of the data root, we will need to provide two proofs: (1) a namespace Merkle proof of the transaction to (2) a row root. This could be done via proving the shares that contain the transaction to the row root using a namespace Merkle proof. And, a binary Merkle proof of the row root to the data root.</p><p>These proofs can be generated using the <a href="https://github.com/celestiaorg/celestia-core/blob/c3ab251659f6fe0f36d10e0dbd14c29a78a85352/rpc/client/http/http.go#L526-L543" target="_blank" rel="noreferrer"><code>ProveShares</code></a> query.</p><p>This <a href="https://github.com/celestiaorg/celestia-core/blob/793ece9bbd732aec3e09018e37dc31f4bfe122d9/rpc/core/tx.go#L175-L213" target="_blank" rel="noreferrer">endpoint</a> allows querying a shares proof to row roots, then a row roots to data root proofs. It takes a block <code>height</code>, a starting share index and an end share index which define a share range. Then, two proofs are generated:</p><ul><li>An NMT proof of the shares to the row roots</li><li>A binary Merkle proof of the row root to the data root</li></ul><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>If the share range spans multiple rows, then the proof can contain multiple NMT and binary proofs.</p></div><p>Example request: <code>/prove_shares?height=15&amp;startShare=0&amp;endShare=1</code></p><p>Which queries the proof of shares <code>[0,1)</code> in block <code>15</code>.</p><p>Example response:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;jsonrpc&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;2.0&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;id&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">-1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;result&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;data&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQBAAABXAAAACbaAgrOAgqgAQqdAQogL2NlbGVzdGlhLmJsb2IudjEuTXNnUGF5Rm9yQmxvYnMSeQovY2VsZXN0aWExdWc1ZWt0MmNjN250dzRkdG1zZDlsN3N0cTBzN3Z5ZTd5bTJyZHISHQAAAAAAAAAAAAAAAAAAAAAAAAASExIyQkMkMoiZGgKXAiIgrfloW1M/Y33zlD2luveDELZzr9cF92+2eTaImIWhN9pCAQASZwpQCkYKHy9jb3Ntb3MuY3J5cHRvLnNlY3AyNTZrMS5QdWJLZXkSIwohA36hewmW/AXtrw6S+QsNUzFGfeg37Da6igoP2ZQcK+04EgQKAggBGAISEwoNCgR1dGlhEgUyMTAwMBDQ6AwaQClYLQPNrFoD6H8mgmwxjFeNhwhRu39EcrVKMFkNQ8+HHuodhdOQIG/8DXEmrBwrpwj6hi+3uEsZ+0p5vrf3v8sSAQEaBElORFgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;share_proofs&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;end&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;nodes&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;AAAAAAAAAAAAAAAAAAAAAAAAABITEjJCQyQyiJkAAAAAAAAAAAAAAAAAAAAAAAAAEhMSMkJDJDKImbiwnpOdwIZBFr0UiFhPKwGy/XIIjL+gqm0fqxIw0z0o&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#9ECBFF;">&quot;/////////////////////////////////////////////////////////////////////////////3+fuhlzUfKJnZD8yg/JOtZla2V3g2Q7y+18iH5j0Uxk&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        ]</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;namespace_id&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA==&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;row_proof&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;row_roots&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000121312324243243288993946154604701154F739F3D1B5475786DDD960F06D8708D4E870DA6501C51750&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      ],</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;proofs&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;total&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;8&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;index&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;0&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;leaf_hash&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;300xzO8TiLwPNuREY6OJcRKzTHQ4y6yy6qH0wAuMMrc=&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;aunts&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;ugp0sV9YNEI5pOiYR7RdOdswwlfBh2o3XiRsmMNmbKs=&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;3dMFZFaWZMTZVXhphF5TxlCJ+CT3EvmMFOpiXFH+ID4=&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;srl59GiTSiwC9LqdYASzFC6TvusyY7njX8/XThp6Xws=&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">          ]</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      ],</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;start_row&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;end_row&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;namespace_version&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;jsonrpc&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;2.0&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;id&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">-1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;result&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;data&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQBAAABXAAAACbaAgrOAgqgAQqdAQogL2NlbGVzdGlhLmJsb2IudjEuTXNnUGF5Rm9yQmxvYnMSeQovY2VsZXN0aWExdWc1ZWt0MmNjN250dzRkdG1zZDlsN3N0cTBzN3Z5ZTd5bTJyZHISHQAAAAAAAAAAAAAAAAAAAAAAAAASExIyQkMkMoiZGgKXAiIgrfloW1M/Y33zlD2luveDELZzr9cF92+2eTaImIWhN9pCAQASZwpQCkYKHy9jb3Ntb3MuY3J5cHRvLnNlY3AyNTZrMS5QdWJLZXkSIwohA36hewmW/AXtrw6S+QsNUzFGfeg37Da6igoP2ZQcK+04EgQKAggBGAISEwoNCgR1dGlhEgUyMTAwMBDQ6AwaQClYLQPNrFoD6H8mgmwxjFeNhwhRu39EcrVKMFkNQ8+HHuodhdOQIG/8DXEmrBwrpwj6hi+3uEsZ+0p5vrf3v8sSAQEaBElORFgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=&quot;</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;share_proofs&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">      {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;end&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;nodes&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;AAAAAAAAAAAAAAAAAAAAAAAAABITEjJCQyQyiJkAAAAAAAAAAAAAAAAAAAAAAAAAEhMSMkJDJDKImbiwnpOdwIZBFr0UiFhPKwGy/XIIjL+gqm0fqxIw0z0o&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#032F62;">&quot;/////////////////////////////////////////////////////////////////////////////3+fuhlzUfKJnZD8yg/JOtZla2V3g2Q7y+18iH5j0Uxk&quot;</span></span>
<span class="line"><span style="color:#24292E;">        ]</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;namespace_id&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABA==&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;row_proof&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;row_roots&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000121312324243243288993946154604701154F739F3D1B5475786DDD960F06D8708D4E870DA6501C51750&quot;</span></span>
<span class="line"><span style="color:#24292E;">      ],</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;proofs&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;total&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;8&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;index&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;0&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;leaf_hash&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;300xzO8TiLwPNuREY6OJcRKzTHQ4y6yy6qH0wAuMMrc=&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;aunts&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;ugp0sV9YNEI5pOiYR7RdOdswwlfBh2o3XiRsmMNmbKs=&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;3dMFZFaWZMTZVXhphF5TxlCJ+CT3EvmMFOpiXFH+ID4=&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;srl59GiTSiwC9LqdYASzFC6TvusyY7njX8/XThp6Xws=&quot;</span></span>
<span class="line"><span style="color:#24292E;">          ]</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      ],</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;start_row&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;end_row&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;namespace_version&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>The values are base64 encoded. For these to be usable with the solidity smart contract, they need to be converted to <code>bytes32</code>. Check the next section for more information.</p></div><h2 id="converting-the-proofs-to-be-usable-in-the-daverifier-contract" tabindex="-1">Converting the proofs to be usable in the <code>DAVerifier</code> contract <a class="header-anchor" href="#converting-the-proofs-to-be-usable-in-the-daverifier-contract" aria-label="Permalink to &quot;Converting the proofs to be usable in the \`DAVerifier\` contract&quot;">​</a></h2><p>The <code>DAVerifier</code> smart contract takes the following proof format:</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// </span><span style="color:#F97583;">@notice</span><span style="color:#6A737D;"> Contains the necessary parameters to prove that some shares, which were posted to</span></span>
<span class="line"><span style="color:#6A737D;">/// the Celestia network, were committed to by the Blobstream smart contract.</span></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">SharesProof</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// The shares that were committed to.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">bytes</span><span style="color:#E1E4E8;">[] data;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// The shares proof to the row roots. If the shares span multiple rows, we will have multiple nmt proofs.</span></span>
<span class="line"><span style="color:#E1E4E8;">    NamespaceMerkleMultiproof[] shareProofs;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// The namespace of the shares.</span></span>
<span class="line"><span style="color:#E1E4E8;">    Namespace namespace;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// The rows where the shares belong. If the shares span multiple rows, we will have multiple rows.</span></span>
<span class="line"><span style="color:#E1E4E8;">    NamespaceNode[] rowRoots;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// The proofs of the rowRoots to the data root.</span></span>
<span class="line"><span style="color:#E1E4E8;">    BinaryMerkleProof[] rowProofs;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// The proof of the data root tuple to the data root tuple root that was posted to the Blobstream contract.</span></span>
<span class="line"><span style="color:#E1E4E8;">    AttestationProof attestationProof;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/// </span><span style="color:#F97583;">@notice</span><span style="color:#6A737D;"> Contains the necessary parameters needed to verify that a data root tuple</span></span>
<span class="line"><span style="color:#6A737D;">/// was committed to, by the Blobstream smart contract, at some specif nonce.</span></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AttestationProof</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// the attestation nonce that commits to the data root tuple.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">uint256</span><span style="color:#E1E4E8;"> tupleRootNonce;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// the data root tuple that was committed to.</span></span>
<span class="line"><span style="color:#E1E4E8;">    DataRootTuple tuple;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// the binary Merkle proof of the tuple to the commitment.</span></span>
<span class="line"><span style="color:#E1E4E8;">    BinaryMerkleProof proof;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// </span><span style="color:#D73A49;">@notice</span><span style="color:#6A737D;"> Contains the necessary parameters to prove that some shares, which were posted to</span></span>
<span class="line"><span style="color:#6A737D;">/// the Celestia network, were committed to by the Blobstream smart contract.</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">SharesProof</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// The shares that were committed to.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">bytes</span><span style="color:#24292E;">[] data;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// The shares proof to the row roots. If the shares span multiple rows, we will have multiple nmt proofs.</span></span>
<span class="line"><span style="color:#24292E;">    NamespaceMerkleMultiproof[] shareProofs;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// The namespace of the shares.</span></span>
<span class="line"><span style="color:#24292E;">    Namespace namespace;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// The rows where the shares belong. If the shares span multiple rows, we will have multiple rows.</span></span>
<span class="line"><span style="color:#24292E;">    NamespaceNode[] rowRoots;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// The proofs of the rowRoots to the data root.</span></span>
<span class="line"><span style="color:#24292E;">    BinaryMerkleProof[] rowProofs;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// The proof of the data root tuple to the data root tuple root that was posted to the Blobstream contract.</span></span>
<span class="line"><span style="color:#24292E;">    AttestationProof attestationProof;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/// </span><span style="color:#D73A49;">@notice</span><span style="color:#6A737D;"> Contains the necessary parameters needed to verify that a data root tuple</span></span>
<span class="line"><span style="color:#6A737D;">/// was committed to, by the Blobstream smart contract, at some specif nonce.</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AttestationProof</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// the attestation nonce that commits to the data root tuple.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">uint256</span><span style="color:#24292E;"> tupleRootNonce;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// the data root tuple that was committed to.</span></span>
<span class="line"><span style="color:#24292E;">    DataRootTuple tuple;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// the binary Merkle proof of the tuple to the commitment.</span></span>
<span class="line"><span style="color:#24292E;">    BinaryMerkleProof proof;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>To construct the <code>SharesProof</code>, we will need the proof that we queried above, and it goes as follows:</p><h3 id="data" tabindex="-1"><code>data</code> <a class="header-anchor" href="#data" aria-label="Permalink to &quot;\`data\`&quot;">​</a></h3><p>This is the raw shares that were submitted to Celestia in the <code>bytes</code> format. If we take the example blob that was submitted in the <a href="https://github.com/celestiaorg/blobstream-contracts/blob/3a552d8f7bfbed1f3175933260e6e440915d2da4/src/lib/verifier/test/RollupInclusionProofs.t.sol#L64-L65" target="_blank" rel="noreferrer"><code>RollupInclusionProofs.t.sol</code></a>, we can convert it to bytes using the <code>abi.encode(...)</code> as done for <a href="https://github.com/celestiaorg/blobstream-contracts/blob/3a552d8f7bfbed1f3175933260e6e440915d2da4/src/lib/verifier/test/RollupInclusionProofs.t.sol#L384-L402" target="_blank" rel="noreferrer">this variable</a>. This can be gotten from the above result of the <a href="#2-transaction-inclusion-proof">transaction inclusion proof</a> query in the field <code>data</code>, which is in <code>base64</code> encoded then be converted to hex to be used as described.</p><h3 id="shareproofs" tabindex="-1"><code>shareProofs</code> <a class="header-anchor" href="#shareproofs" aria-label="Permalink to &quot;\`shareProofs\`&quot;">​</a></h3><p>This is the shares proof to the row roots. These can contain multiple proofs if the shares containing the blob span across multiple rows. To construct them, we will use the result of the <a href="#2-transaction-inclusion-proof">transaction inclusion proof</a> section:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;share_proofs&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">  {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;start&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#FDAEB7;font-style:italic;">...</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;end&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#FDAEB7;font-style:italic;">...</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;nodes&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;...&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;...&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">],</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;share_proofs&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">  {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;start&quot;</span><span style="color:#24292E;">: </span><span style="color:#B31D28;font-style:italic;">...</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;end&quot;</span><span style="color:#24292E;">: </span><span style="color:#B31D28;font-style:italic;">...</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;nodes&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;...&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;...&quot;</span></span>
<span class="line"><span style="color:#24292E;">    ]</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">],</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>If any of the fields is empty, then it will not be in the response. For example, if the <code>start</code> field is <code>0</code>, it will be omitted in the response.</p></div><p>While the <code>NamespaceMerkleMultiproof</code> being:</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// </span><span style="color:#F97583;">@notice</span><span style="color:#6A737D;"> Namespace Merkle Tree Multiproof structure. Proves multiple leaves.</span></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NamespaceMerkleMultiproof</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// The beginning key of the leaves to verify.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">uint256</span><span style="color:#E1E4E8;"> beginKey;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// The ending key of the leaves to verify.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">uint256</span><span style="color:#E1E4E8;"> endKey;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// List of side nodes to verify and calculate tree.</span></span>
<span class="line"><span style="color:#E1E4E8;">    NamespaceNode[] sideNodes;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// </span><span style="color:#D73A49;">@notice</span><span style="color:#6A737D;"> Namespace Merkle Tree Multiproof structure. Proves multiple leaves.</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NamespaceMerkleMultiproof</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// The beginning key of the leaves to verify.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">uint256</span><span style="color:#24292E;"> beginKey;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// The ending key of the leaves to verify.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">uint256</span><span style="color:#24292E;"> endKey;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// List of side nodes to verify and calculate tree.</span></span>
<span class="line"><span style="color:#24292E;">    NamespaceNode[] sideNodes;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>So, we can construct the <code>NamespaceMerkleMultiproof</code> with the following mapping:</p><ul><li><p><code>beginKey</code> in the Solidity struct <strong>==</strong> <code>start</code> in the query response</p></li><li><p><code>endKey</code> in the Solidity struct <strong>==</strong> <code>end</code> in the query response</p></li><li><p><code>sideNodes</code> in the Solidity struct <strong>==</strong> <code>nodes</code> in the query response</p></li><li><p>The <code>NamespaceNode</code>, which is the type of the <code>sideNodes</code>, is defined as follows:</p></li></ul><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// </span><span style="color:#F97583;">@notice</span><span style="color:#6A737D;"> Namespace Merkle Tree node.</span></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NamespaceNode</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Minimum namespace.</span></span>
<span class="line"><span style="color:#E1E4E8;">    Namespace min;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Maximum namespace.</span></span>
<span class="line"><span style="color:#E1E4E8;">    Namespace max;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Node value.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">bytes32</span><span style="color:#E1E4E8;"> digest;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// </span><span style="color:#D73A49;">@notice</span><span style="color:#6A737D;"> Namespace Merkle Tree node.</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NamespaceNode</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Minimum namespace.</span></span>
<span class="line"><span style="color:#24292E;">    Namespace min;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Maximum namespace.</span></span>
<span class="line"><span style="color:#24292E;">    Namespace max;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Node value.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">bytes32</span><span style="color:#24292E;"> digest;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>So, we construct a <code>NamespaceNode</code> via taking the values from the <code>nodes</code> field in the query response, we convert them from base64 to <code>hex</code>, then we use the following mapping:</p><ul><li><code>min</code> == the first 29 bytes in the decoded value</li><li><code>max</code> == the second 29 bytes in the decoded value</li><li><code>digest</code> == the remaining 32 bytes in the decoded value</li></ul><p>The <code>min</code> and <code>max</code> are <code>Namespace</code> type which is:</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// </span><span style="color:#F97583;">@notice</span><span style="color:#6A737D;"> A representation of the Celestia-app namespace ID and its version.</span></span>
<span class="line"><span style="color:#6A737D;">/// See: https://celestiaorg.github.io/celestia-app/specs/namespace.html</span></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Namespace</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// The namespace version.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">bytes1</span><span style="color:#E1E4E8;"> version;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// The namespace ID.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">bytes28</span><span style="color:#E1E4E8;"> id;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// </span><span style="color:#D73A49;">@notice</span><span style="color:#6A737D;"> A representation of the Celestia-app namespace ID and its version.</span></span>
<span class="line"><span style="color:#6A737D;">/// See: https://celestiaorg.github.io/celestia-app/specs/namespace.html</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Namespace</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// The namespace version.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">bytes1</span><span style="color:#24292E;"> version;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// The namespace ID.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">bytes28</span><span style="color:#24292E;"> id;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>So, to construct them, we separate the 29 bytes in the decoded value to:</p><ul><li>first byte: <code>version</code></li><li>remaining 28 bytes: <code>id</code></li></ul><p>An example of doing this can be found in the <a href="https://github.com/celestiaorg/blobstream-contracts/blob/3a552d8f7bfbed1f3175933260e6e440915d2da4/src/lib/verifier/test/RollupInclusionProofs.t.sol#L465-L477" target="_blank" rel="noreferrer">RollupInclusionProofs.t.sol</a> test.</p><h3 id="namespace" tabindex="-1"><code>namespace</code> <a class="header-anchor" href="#namespace" aria-label="Permalink to &quot;\`namespace\`&quot;">​</a></h3><p>Which is the namespace used by the rollup when submitting data to Celestia. As described above, it can be constructed as follows:</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// </span><span style="color:#F97583;">@notice</span><span style="color:#6A737D;"> A representation of the Celestia-app namespace ID and its version.</span></span>
<span class="line"><span style="color:#6A737D;">/// See: https://celestiaorg.github.io/celestia-app/specs/namespace.html</span></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Namespace</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// The namespace version.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">bytes1</span><span style="color:#E1E4E8;"> version;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// The namespace ID.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">bytes28</span><span style="color:#E1E4E8;"> id;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// </span><span style="color:#D73A49;">@notice</span><span style="color:#6A737D;"> A representation of the Celestia-app namespace ID and its version.</span></span>
<span class="line"><span style="color:#6A737D;">/// See: https://celestiaorg.github.io/celestia-app/specs/namespace.html</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Namespace</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// The namespace version.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">bytes1</span><span style="color:#24292E;"> version;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// The namespace ID.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">bytes28</span><span style="color:#24292E;"> id;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Via taking the <code>namespace</code> value from the <code>prove_shares</code> query response, decoding it from base64 to hex, then:</p><ul><li>first byte: <code>version</code></li><li>remaining 28 bytes: <code>id</code></li></ul><p>An example can be found in the <a href="https://github.com/celestiaorg/blobstream-contracts/blob/3a552d8f7bfbed1f3175933260e6e440915d2da4/src/lib/verifier/test/RollupInclusionProofs.t.sol#L488" target="_blank" rel="noreferrer">RollupInclusionProofs.t.sol</a> test.</p><h3 id="rowroots" tabindex="-1"><code>rowRoots</code> <a class="header-anchor" href="#rowroots" aria-label="Permalink to &quot;\`rowRoots\`&quot;">​</a></h3><p>Which are the roots of the rows where the shares containing the Rollup data are localised. These can be taken from the <code>prove_shares</code> query response:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;row_proof&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;row_roots&quot;</span><span style="color:#E1E4E8;">:</span></span>
<span class="line"><span style="color:#E1E4E8;">    [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;...&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">},</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;row_proof&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;row_roots&quot;</span><span style="color:#24292E;">:</span></span>
<span class="line"><span style="color:#24292E;">    [</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;...&quot;</span></span>
<span class="line"><span style="color:#24292E;">    ],</span></span>
<span class="line"><span style="color:#24292E;">},</span></span></code></pre></div><p>The values inside the <code>row_roots</code> are already in hex, and the Solidity type of the <code>rowRoots</code> is <code>NamespaceNode</code>. So, we will construct them similar to the <code>sideNodes</code> of the <a href="#shareproofs"><code>shareProofs</code></a>. Except that no base64 conversion is needed.</p><h3 id="rowproofs" tabindex="-1"><code>rowProofs</code> <a class="header-anchor" href="#rowproofs" aria-label="Permalink to &quot;\`rowProofs\`&quot;">​</a></h3><p>These are the proofs of the rows to the data root. They are of type <code>BinaryMerkleProof</code>:</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// </span><span style="color:#F97583;">@notice</span><span style="color:#6A737D;"> Merkle Tree Proof structure.</span></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BinaryMerkleProof</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// List of side nodes to verify and calculate tree.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">bytes32</span><span style="color:#E1E4E8;">[] sideNodes;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// The key of the leaf to verify.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">uint256</span><span style="color:#E1E4E8;"> key;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// The number of leaves in the tree</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">uint256</span><span style="color:#E1E4E8;"> numLeaves;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// </span><span style="color:#D73A49;">@notice</span><span style="color:#6A737D;"> Merkle Tree Proof structure.</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BinaryMerkleProof</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// List of side nodes to verify and calculate tree.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">bytes32</span><span style="color:#24292E;">[] sideNodes;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// The key of the leaf to verify.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">uint256</span><span style="color:#24292E;"> key;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// The number of leaves in the tree</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">uint256</span><span style="color:#24292E;"> numLeaves;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>To construct them, we take the response of the <code>prove_shares</code> query:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;row_proof&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;row_roots&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;...&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">      ],</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;proofs&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;total&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;...&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;index&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;...&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;leaf_hash&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;...&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">&quot;aunts&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;...&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#9ECBFF;">&quot;...&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">          ]</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      ],</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;row_proof&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;row_roots&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;...&quot;</span></span>
<span class="line"><span style="color:#24292E;">      ],</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;proofs&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">        {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;total&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;...&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;index&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;...&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;leaf_hash&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;...&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">&quot;aunts&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;...&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#032F62;">&quot;...&quot;</span></span>
<span class="line"><span style="color:#24292E;">          ]</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      ],</span></span></code></pre></div><p>and do the following mapping:</p><ul><li><code>key</code> in the Solidity struct <strong>==</strong> <code>index</code> in the query response</li><li><code>numLeaves</code> in the Solidity struct <strong>==</strong> <code>total</code> in the query response</li><li><code>sideNodes</code> in the Solidity struct <strong>==</strong> <code>aunts</code> in the query response</li></ul><p>The type of the <code>sideNodes</code> is a <code>bytes32</code>. So, we take the values in the query response, we convert them from base64 to hex, then we create the values.</p><p>An example can be found in the <a href="https://github.com/celestiaorg/blobstream-contracts/blob/3a552d8f7bfbed1f3175933260e6e440915d2da4/src/lib/verifier/test/RollupInclusionProofs.t.sol#L479-L484" target="_blank" rel="noreferrer">RollupInclusionProofs.t.sol</a> test.</p><h3 id="attestationproof" tabindex="-1"><code>attestationProof</code> <a class="header-anchor" href="#attestationproof" aria-label="Permalink to &quot;\`attestationProof\`&quot;">​</a></h3><p>This is the proof of the data root to the data root tuple root, which is committed to in the Blobstream contract:</p><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// </span><span style="color:#F97583;">@notice</span><span style="color:#6A737D;"> Contains the necessary parameters needed to verify that a data root tuple</span></span>
<span class="line"><span style="color:#6A737D;">/// was committed to, by the Blobstream smart contract, at some specif nonce.</span></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">AttestationProof</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// the attestation nonce that commits to the data root tuple.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">uint256</span><span style="color:#E1E4E8;"> tupleRootNonce;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// the data root tuple that was committed to.</span></span>
<span class="line"><span style="color:#E1E4E8;">    DataRootTuple tuple;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// the binary Merkle proof of the tuple to the commitment.</span></span>
<span class="line"><span style="color:#E1E4E8;">    BinaryMerkleProof proof;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// </span><span style="color:#D73A49;">@notice</span><span style="color:#6A737D;"> Contains the necessary parameters needed to verify that a data root tuple</span></span>
<span class="line"><span style="color:#6A737D;">/// was committed to, by the Blobstream smart contract, at some specif nonce.</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">AttestationProof</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// the attestation nonce that commits to the data root tuple.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">uint256</span><span style="color:#24292E;"> tupleRootNonce;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// the data root tuple that was committed to.</span></span>
<span class="line"><span style="color:#24292E;">    DataRootTuple tuple;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// the binary Merkle proof of the tuple to the commitment.</span></span>
<span class="line"><span style="color:#24292E;">    BinaryMerkleProof proof;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li><code>tupleRootNonce</code>: the nonce at which Blobstream committed to the batch containing the block containing the data.</li><li><code>tuple</code>: the <code>DataRootTuple</code> of the block:</li></ul><div class="language-solidity vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">solidity</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/// </span><span style="color:#F97583;">@notice</span><span style="color:#6A737D;"> A tuple of data root with metadata. Each data root is associated</span></span>
<span class="line"><span style="color:#6A737D;">///  with a Celestia block height.</span></span>
<span class="line"><span style="color:#6A737D;">/// </span><span style="color:#F97583;">@dev</span><span style="color:#6A737D;"> \`availableDataRoot\` in</span></span>
<span class="line"><span style="color:#6A737D;">///  https://github.com/celestiaorg/celestia-specs/blob/master/src/specs/data_structures.md#header</span></span>
<span class="line"><span style="color:#F97583;">struct</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DataRootTuple</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Celestia block height the data root was included in.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Genesis block is height = 0.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// First queryable block is height = 1.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">uint256</span><span style="color:#E1E4E8;"> height;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// Data root.</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">bytes32</span><span style="color:#E1E4E8;"> dataRoot;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/// </span><span style="color:#D73A49;">@notice</span><span style="color:#6A737D;"> A tuple of data root with metadata. Each data root is associated</span></span>
<span class="line"><span style="color:#6A737D;">///  with a Celestia block height.</span></span>
<span class="line"><span style="color:#6A737D;">/// </span><span style="color:#D73A49;">@dev</span><span style="color:#6A737D;"> \`availableDataRoot\` in</span></span>
<span class="line"><span style="color:#6A737D;">///  https://github.com/celestiaorg/celestia-specs/blob/master/src/specs/data_structures.md#header</span></span>
<span class="line"><span style="color:#D73A49;">struct</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">DataRootTuple</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Celestia block height the data root was included in.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Genesis block is height = 0.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// First queryable block is height = 1.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">uint256</span><span style="color:#24292E;"> height;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// Data root.</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">bytes32</span><span style="color:#24292E;"> dataRoot;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>which comprises a <code>dataRoot</code>, i.e. the block containing the Rollup data data root, and the <code>height</code> which is the <code>height</code> of that block.</p><ul><li><code>proof</code>: the <code>BinaryMerkleProof</code> of the data root tuple to the data root tuple root. Constructing it is similar to constructing the row roots to data root proof in the <a href="#rowproofs">rowProofs</a> section.</li></ul><p>An example can be found in the <a href="https://github.com/celestiaorg/blobstream-contracts/blob/3a552d8f7bfbed1f3175933260e6e440915d2da4/src/lib/verifier/test/RollupInclusionProofs.t.sol#L488" target="_blank" rel="noreferrer">RollupInclusionProofs.t.sol</a> test.</p><p>If the <code>dataRoot</code> or the <code>tupleRootNonce</code> is unknown during the verification:</p><ul><li><code>dataRoot</code>: can be queried using the <code>/block?height=15</code> query (<code>15</code> in this example endpoint), and taking the <code>data_hash</code> field from the response.</li><li><code>tupleRootNonce</code>: can be retried using a <code>gRPC</code> query to the app to the <a href="https://github.com/celestiaorg/celestia-app/blob/c517bd27c4e0b3d6e4521a7d2946662cb0f19f1d/proto/celestia/qgb/v1/query.proto#L51-L56" target="_blank" rel="noreferrer"><code>/qgb/v1/data_commitment/range/height</code></a> endpoint. An example can be found in the <a href="https://github.com/celestiaorg/celestia-app/blob/c517bd27c4e0b3d6e4521a7d2946662cb0f19f1d/x/blobstream/client/verify.go#L245-L251" target="_blank" rel="noreferrer"><code>verify</code></a> command.</li></ul><h2 id="high-level-diagrams" tabindex="-1">High-level diagrams <a class="header-anchor" href="#high-level-diagrams" aria-label="Permalink to &quot;High-level diagrams&quot;">​</a></h2><p>The two diagrams below summarize how a single share is committed to in Blobstream. The share is highlighted in green. <code>R0</code>, <code>R1</code>, etc represent the respective row and column roots, the blue and pink gradients are erasure encoded data. More details on the square layout can be found <a href="https://github.com/celestiaorg/celestia-app/blob/v1.1.0/specs/src/specs/data_square_layout.md" target="_blank" rel="noreferrer">in the data square layout</a> and <a href="https://github.com/celestiaorg/celestia-app/blob/v1.1.0/specs/src/specs/data_structures.md#erasure-coding" target="_blank" rel="noreferrer">data structures</a> portion of the specs.</p><h3 id="the-celestia-square" tabindex="-1">The Celestia square <a class="header-anchor" href="#the-celestia-square" aria-label="Permalink to &quot;The Celestia square&quot;">​</a></h3><p><img src="`+e+'" alt="Square"></p><h3 id="the-commitment-scheme" tabindex="-1">The commitment scheme <a class="header-anchor" href="#the-commitment-scheme" aria-label="Permalink to &quot;The commitment scheme&quot;">​</a></h3><p><img src="'+l+'" alt="Blobstream Commitment Diagram"></p><h2 id="conclusion" tabindex="-1">Conclusion <a class="header-anchor" href="#conclusion" aria-label="Permalink to &quot;Conclusion&quot;">​</a></h2><p>After creating all the proofs, and verifying them:</p><ol><li>Verify inclusion proof of the transaction to Celestia data root</li><li>Prove that the data root tuple is committed to by the Blobstream smart contract</li></ol><p>We can be sure that the data was published to Celestia.</p><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>The above proof constructions are implemented in Solidity, and may require different approaches in other programming languages.</p></div>',86),c=[t];function r(i,y,E,d,A,h){return a(),n("div",null,c)}const f=s(p,[["render",r]]);export{m as __pageData,f as default};
