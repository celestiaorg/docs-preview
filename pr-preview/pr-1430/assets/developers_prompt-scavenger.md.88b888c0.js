import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.212d62c2.js";const F=JSON.parse('{"title":"Prompt scavenger","description":"Learn how to interact with the Celestia Node API with this tutorial.","frontmatter":{"description":"Learn how to interact with the Celestia Node API with this tutorial.","prev":{"text":"Node RPC CLI tutorial","link":"/developers/node-tutorial"},"head":[["meta",{"name":"og:title","content":"Prompt scavenger | Celestia Docs"},{"name":"og:description","content":false}]]},"headers":[],"relativePath":"developers/prompt-scavenger.md","filePath":"developers/prompt-scavenger.md","lastUpdated":1708607087000}'),p={name:"developers/prompt-scavenger.md"},o=l(`<h1 id="prompt-scavenger" tabindex="-1">Prompt scavenger <a class="header-anchor" href="#prompt-scavenger" aria-label="Permalink to &quot;Prompt scavenger&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">Note</p><p>This tutorial needs to be updated.</p></div><p>Welcome to the world of Prompt Scavenger, a game where you’ll be using Celestia’s Node API and OpenAI’s GPT-3.5 to decode hidden messages scattered throughout Celestia’s blockchain. In this tutorial, we’ll be using Golang to write the code for the game.</p><p>Through this tutorial, you’ll gain experience using Celestia’s Node API to fetch data from the blockchain, process it, and submit new transactions with that data. You’ll also learn how to integrate OpenAI’s GPT-3.5 API to generate fun responses based on the data you’ve found.</p><p>So if you’re ready to embark on an adventure that combines blockchain technology with the power of AI, and learn some Golang along the way, let’s get started!</p><h2 id="dependencies" tabindex="-1">Dependencies <a class="header-anchor" href="#dependencies" aria-label="Permalink to &quot;Dependencies&quot;">​</a></h2><p>The following dependencies are needed to be installed or obtained:</p><ul><li>Golang, see <a href="./../nodes/environment">setting up environment</a></li><li>Celestia <a href="./../nodes/light-node">light node</a></li><li>Getting an OpenAI API Key for GPT-3.5</li></ul><h3 id="install-celestia-node-and-run-a-light-node" tabindex="-1">Install Celestia Node and run a light node <a class="header-anchor" href="#install-celestia-node-and-run-a-light-node" aria-label="Permalink to &quot;Install Celestia Node and run a light node&quot;">​</a></h3><p>First, <a href="./../nodes/celestia-node">install the celestia-node binary</a>.</p><p>Let’s run the following commands to get our env vars setup (NOTE: For <code>CORE_IP</code> you can select from the <a href="./../../nodes/blockspace-race/#rpc-endpoints">list of available RPC endpoints on the Blockspace Race page</a>:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">KEYNAME</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;scavenger_key&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">NODETYPE</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;light&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">NETWORK</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;blockspacerace&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">AUTHTYPE</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;admin&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">CORE_IP</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">KEYNAME</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;scavenger_key&quot;</span></span>
<span class="line"><span style="color:#24292E;">NODETYPE</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;light&quot;</span></span>
<span class="line"><span style="color:#24292E;">NETWORK</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;blockspacerace&quot;</span></span>
<span class="line"><span style="color:#24292E;">AUTHTYPE</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;admin&quot;</span></span>
<span class="line"><span style="color:#24292E;">CORE_IP</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;&quot;</span></span></code></pre></div><p>Next, let’s generate a wallet key for our light node:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">./cel-key</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> $KEYNAME </span><span style="color:#79B8FF;">--keyring-backend</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--node.type</span><span style="color:#E1E4E8;"> $NODETYPE </span><span style="color:#79B8FF;">--p2p.network</span><span style="color:#E1E4E8;"> $NETWORK</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">./cel-key</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> $KEYNAME </span><span style="color:#005CC5;">--keyring-backend</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--node.type</span><span style="color:#24292E;"> $NODETYPE </span><span style="color:#005CC5;">--p2p.network</span><span style="color:#24292E;"> $NETWORK</span></span></code></pre></div><p>Be sure to save the mnemonics and your celestia1 public address in a safe place.</p><p>Then head over to our Discord Server and request tokens from the <code>#faucet</code> channel under Blockspace Race.</p><p>You can track receiving the funds on the explorer here: <a href="https://testnet.mintscan.io/celestia-incentivized-testnet" target="_blank" rel="noreferrer">Interchain Explorer by Cosmostation</a></p><p>Just make sure to paste your <code>celestia1****</code> address in order to look it up.</p><p>We will be running this version of Celestia Node with Blockspace Race test network. First, let’s initialize our node:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">light</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--p2p.network</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">blockspacerace</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">celestia</span><span style="color:#24292E;"> </span><span style="color:#032F62;">light</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--p2p.network</span><span style="color:#24292E;"> </span><span style="color:#032F62;">blockspacerace</span></span></code></pre></div><p>Next, we will start our node:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">celestia</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">light</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">start</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--core.ip</span><span style="color:#E1E4E8;"> $CORE_IP </span><span style="color:#79B8FF;">--p2p.network</span><span style="color:#E1E4E8;"> $NETWORK </span><span style="color:#79B8FF;">--gateway.deprecated-endpoints</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--gateway</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--gateway.addr</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">127.0</span><span style="color:#9ECBFF;">.0.1</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--gateway.port</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">26659</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--keyring.accname</span><span style="color:#E1E4E8;"> $KEYNAME</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">celestia</span><span style="color:#24292E;"> </span><span style="color:#032F62;">light</span><span style="color:#24292E;"> </span><span style="color:#032F62;">start</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--core.ip</span><span style="color:#24292E;"> $CORE_IP </span><span style="color:#005CC5;">--p2p.network</span><span style="color:#24292E;"> $NETWORK </span><span style="color:#005CC5;">--gateway.deprecated-endpoints</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--gateway</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--gateway.addr</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">127.0</span><span style="color:#032F62;">.0.1</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--gateway.port</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">26659</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--keyring.accname</span><span style="color:#24292E;"> $KEYNAME</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The <code>--core.ip</code> gRPC port defaults to 9090, so if you do not specify it in the command line, it will default to that port. You can add the port after the IP address or use the <code>--core.grpc.port</code> flag to specify another port if you prefer.</p><p>Refer to <a href="./../../nodes/celestia-node-troubleshooting/#ports">the ports section of the celestia-node troubleshooting page</a> for information on which ports are required to be open on your machine.</p></div><p>You should now have a running light node on your machine. The rest of the tutorial will assume you will be building the script and running it where the light node is in your localhost.</p><h3 id="node-api-authentication-key" tabindex="-1">Node API authentication key <a class="header-anchor" href="#node-api-authentication-key" aria-label="Permalink to &quot;Node API authentication key&quot;">​</a></h3><p>In the same machine as where you Celestia light node is running, run the following:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> AUTH_TOKEN</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">$(</span><span style="color:#B392F0;">celestia</span><span style="color:#9ECBFF;"> </span><span style="color:#E1E4E8;">$NODETYPE</span><span style="color:#9ECBFF;"> auth </span><span style="color:#E1E4E8;">$AUTHTYPE</span><span style="color:#9ECBFF;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> AUTH_TOKEN</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">$(</span><span style="color:#6F42C1;">celestia</span><span style="color:#032F62;"> </span><span style="color:#24292E;">$NODETYPE</span><span style="color:#032F62;"> auth </span><span style="color:#24292E;">$AUTHTYPE</span><span style="color:#032F62;">)</span></span></code></pre></div><p>Now run the following to get the auth token for your node:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">echo</span><span style="color:#E1E4E8;"> $AUTH_TOKEN</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">echo</span><span style="color:#24292E;"> $AUTH_TOKEN</span></span></code></pre></div><p>This will be used for the env var file we setup later.</p><h3 id="openai-key" tabindex="-1">OpenAI key <a class="header-anchor" href="#openai-key" aria-label="Permalink to &quot;OpenAI key&quot;">​</a></h3><p>Make sure to <a href="https://openai.com/" target="_blank" rel="noreferrer">go over to OpenAI</a> in order to sign up to an account and generate an OpenAI API key. The key will be needed to communicate with OpenAI.</p><h2 id="building-the-prompt-scavenger" tabindex="-1">Building the Prompt Scavenger <a class="header-anchor" href="#building-the-prompt-scavenger" aria-label="Permalink to &quot;Building the Prompt Scavenger&quot;">​</a></h2><p>We will first need to setup a <code>.env</code> file with the following pasted in:</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#e1e4e8;">NODE_RPC_IP=&quot;http://localhost:26658&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">NODE_JWT_TOKEN=&quot;&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">OPENAI_KEY=&quot;&quot;</span></span>
<span class="line"><span style="color:#e1e4e8;">NAMESPACE_ID=&quot;00000000ce1e571a&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292e;">NODE_RPC_IP=&quot;http://localhost:26658&quot;</span></span>
<span class="line"><span style="color:#24292e;">NODE_JWT_TOKEN=&quot;&quot;</span></span>
<span class="line"><span style="color:#24292e;">OPENAI_KEY=&quot;&quot;</span></span>
<span class="line"><span style="color:#24292e;">NAMESPACE_ID=&quot;00000000ce1e571a&quot;</span></span></code></pre></div><p>The <code>OPENAI_KEY</code> is the API key you got from Open AI. For <code>NODE_RPC_IP</code>, it is assumed to be the local host but it can point to a light node that is remote. <code>NODE_JWT_TOKEN</code> is the <code>AUTH_TOKEN</code> you generated earlier. For Namespace ID, we made a sample one for you to use but you can generate your own.</p><p>Now, let’s build!</p><h3 id="copy-over-go-files" tabindex="-1">Copy over Go files <a class="header-anchor" href="#copy-over-go-files" aria-label="Permalink to &quot;Copy over Go files&quot;">​</a></h3><p>Run the following:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">mkdir</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_scavenger</span></span>
<span class="line"><span style="color:#B392F0;">git</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">clone</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">https://github.com/celestiaorg/PromptScavenger.git</span></span>
<span class="line"><span style="color:#B392F0;">cp</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">PromptScavenger/go.mod</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_scavenger/</span></span>
<span class="line"><span style="color:#B392F0;">cp</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">PromptScavenger/go.sum</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_scavenger/</span></span>
<span class="line"><span style="color:#79B8FF;">cd</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">test_scavenger</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">mkdir</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_scavenger</span></span>
<span class="line"><span style="color:#6F42C1;">git</span><span style="color:#24292E;"> </span><span style="color:#032F62;">clone</span><span style="color:#24292E;"> </span><span style="color:#032F62;">https://github.com/celestiaorg/PromptScavenger.git</span></span>
<span class="line"><span style="color:#6F42C1;">cp</span><span style="color:#24292E;"> </span><span style="color:#032F62;">PromptScavenger/go.mod</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_scavenger/</span></span>
<span class="line"><span style="color:#6F42C1;">cp</span><span style="color:#24292E;"> </span><span style="color:#032F62;">PromptScavenger/go.sum</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_scavenger/</span></span>
<span class="line"><span style="color:#005CC5;">cd</span><span style="color:#24292E;"> </span><span style="color:#032F62;">test_scavenger</span></span></code></pre></div><p>This will copy over the required <code>go.sum</code> and <code>go.mod</code> files to a new directory we will use to import the Node API golang library.</p><h3 id="build-your-import-statements" tabindex="-1">Build your import statements <a class="header-anchor" href="#build-your-import-statements" aria-label="Permalink to &quot;Build your import statements&quot;">​</a></h3><p>Inside the directory, create a <code>main.go</code>file and setup the import statements:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">package</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">context</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">fmt</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">log</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">os</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/celestiaorg/celestia-node/api/rpc/client</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">nodeheader</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/celestiaorg/celestia-node/header</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/celestiaorg/nmt/namespace</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/joho/godotenv</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">cosmosmath</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">cosmossdk.io/math</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">openai</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">github.com/sashabaranov/go-openai</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">encoding/base64</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#9ECBFF;">&quot;</span><span style="color:#B392F0;">encoding/hex</span><span style="color:#9ECBFF;">&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// TODO</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">package</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">context</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">fmt</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">log</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">os</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/celestiaorg/celestia-node/api/rpc/client</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">nodeheader</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/celestiaorg/celestia-node/header</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/celestiaorg/nmt/namespace</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/joho/godotenv</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">cosmosmath</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">cosmossdk.io/math</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6F42C1;">openai</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">github.com/sashabaranov/go-openai</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">encoding/base64</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#032F62;">&quot;</span><span style="color:#6F42C1;">encoding/hex</span><span style="color:#032F62;">&quot;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// TODO</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Here we setup all required libraries we need to use plus the <code>main</code> function that we will use for our game.</p><h3 id="helpful-functions" tabindex="-1">Helpful functions <a class="header-anchor" href="#helpful-functions" aria-label="Permalink to &quot;Helpful functions&quot;">​</a></h3><p>First we will need to create some helpful functions that you will need later.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// loadEnv loads environment variables from the .env file.</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">loadEnv</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> godotenv.</span><span style="color:#79B8FF;">Load</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;.env&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                log.</span><span style="color:#79B8FF;">Fatal</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Error loading .env file&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// loadEnv loads environment variables from the .env file.</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">loadEnv</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> godotenv.</span><span style="color:#005CC5;">Load</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;.env&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                log.</span><span style="color:#005CC5;">Fatal</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Error loading .env file&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>The <code>loadEnv</code> function allows us to load up our <code>.env</code> file which has all the necessary env vars needed.</p><p>Next, let’s create a helper function that allows us to load an instance of the Celestia Node client given the correct env vars passed to it:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// createClient initializes a new Celestia node client.</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createClient</span><span style="color:#E1E4E8;">(ctx context.Context) </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">client.Client {</span></span>
<span class="line"><span style="color:#E1E4E8;">        nodeRPCIP </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> os.</span><span style="color:#79B8FF;">Getenv</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;NODE_RPC_IP&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        jwtToken </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> os.</span><span style="color:#79B8FF;">Getenv</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;NODE_JWT_TOKEN&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        rpc, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#79B8FF;">NewClient</span><span style="color:#E1E4E8;">(ctx, nodeRPCIP, jwtToken)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                log.</span><span style="color:#79B8FF;">Fatalf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Error creating client: </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> rpc</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// createClient initializes a new Celestia node client.</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createClient</span><span style="color:#24292E;">(ctx context.Context) </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">client.Client {</span></span>
<span class="line"><span style="color:#24292E;">        nodeRPCIP </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> os.</span><span style="color:#005CC5;">Getenv</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;NODE_RPC_IP&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        jwtToken </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> os.</span><span style="color:#005CC5;">Getenv</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;NODE_JWT_TOKEN&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        rpc, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> client.</span><span style="color:#005CC5;">NewClient</span><span style="color:#24292E;">(ctx, nodeRPCIP, jwtToken)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                log.</span><span style="color:#005CC5;">Fatalf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Error creating client: </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> rpc</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>As you can see, here the Celestia Node client takes in the Node RPC IP and the JWT Token we setup before.</p><p>Now, if we go back to our <code>main</code> function, we can do the following to setup and load our env and client:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  ctx, cancel </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#79B8FF;">WithCancel</span><span style="color:#E1E4E8;">(context.</span><span style="color:#79B8FF;">Background</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cancel</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">loadEnv</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// Close the client when you are finished</span></span>
<span class="line"><span style="color:#E1E4E8;">  client.</span><span style="color:#79B8FF;">Close</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  ctx, cancel </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> context.</span><span style="color:#005CC5;">WithCancel</span><span style="color:#24292E;">(context.</span><span style="color:#005CC5;">Background</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cancel</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">loadEnv</span><span style="color:#24292E;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// Close the client when you are finished</span></span>
<span class="line"><span style="color:#24292E;">  client.</span><span style="color:#005CC5;">Close</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Here, we setup a workflow that allows us to load our env vars, instantiate the client with it, then close the client.</p><p>Now, let’s build some more helpful functions:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createNamespaceID</span><span style="color:#E1E4E8;">() []</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        nIDString </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> os.</span><span style="color:#79B8FF;">Getenv</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;NAMESPACE_ID&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        data, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> hex.</span><span style="color:#79B8FF;">DecodeString</span><span style="color:#E1E4E8;">(nIDString)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                log.</span><span style="color:#79B8FF;">Fatalf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Error decoding hex string:&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Encode the byte array in Base64</span></span>
<span class="line"><span style="color:#E1E4E8;">        base64Str </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> base64.StdEncoding.</span><span style="color:#79B8FF;">EncodeToString</span><span style="color:#E1E4E8;">(data)</span></span>
<span class="line"><span style="color:#E1E4E8;">        namespaceID, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> base64.StdEncoding.</span><span style="color:#79B8FF;">DecodeString</span><span style="color:#E1E4E8;">(base64Str)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                log.</span><span style="color:#79B8FF;">Fatalf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Error decoding Base64 string:&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> namespaceID</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createNamespaceID</span><span style="color:#24292E;">() []</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        nIDString </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> os.</span><span style="color:#005CC5;">Getenv</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;NAMESPACE_ID&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        data, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> hex.</span><span style="color:#005CC5;">DecodeString</span><span style="color:#24292E;">(nIDString)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                log.</span><span style="color:#005CC5;">Fatalf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Error decoding hex string:&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Encode the byte array in Base64</span></span>
<span class="line"><span style="color:#24292E;">        base64Str </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> base64.StdEncoding.</span><span style="color:#005CC5;">EncodeToString</span><span style="color:#24292E;">(data)</span></span>
<span class="line"><span style="color:#24292E;">        namespaceID, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> base64.StdEncoding.</span><span style="color:#005CC5;">DecodeString</span><span style="color:#24292E;">(base64Str)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                log.</span><span style="color:#005CC5;">Fatalf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Error decoding Base64 string:&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> namespaceID</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>Here, we are creating a helpful function called <code>createNameSpaceID</code> that given a string for a namespace ID, it can decode the hex string, encode it after to a byte array, then decode it as a base64 string which is needed by Node API.</p><p>We will need to create just a few more functions before we wrap up things.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// postDataAndGetHeight submits a new transaction with the</span></span>
<span class="line"><span style="color:#6A737D;">// provided data to the Celestia node.</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">postDataAndGetHeight</span><span style="color:#E1E4E8;">(client </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">client.Client, namespaceID namespace.ID, payLoad [</span></span>
<span class="line"><span style="color:#E1E4E8;">]</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">, fee cosmosmath.Int, gasLimit </span><span style="color:#F97583;">uint64</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">uint64</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        response, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> client.State.</span><span style="color:#79B8FF;">SubmitPayForBlob</span><span style="color:#E1E4E8;">(context.</span><span style="color:#79B8FF;">Background</span><span style="color:#E1E4E8;">(), namespa</span></span>
<span class="line"><span style="color:#E1E4E8;">ceID, payLoad, fee, gasLimit)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                log.</span><span style="color:#79B8FF;">Fatalf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Error submitting pay for blob: </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Got output: </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, response)</span></span>
<span class="line"><span style="color:#E1E4E8;">        height </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">uint64</span><span style="color:#E1E4E8;">(response.Height)</span></span>
<span class="line"><span style="color:#E1E4E8;">        fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Height that data was submitted at: </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, height)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> height</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// postDataAndGetHeight submits a new transaction with the</span></span>
<span class="line"><span style="color:#6A737D;">// provided data to the Celestia node.</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">postDataAndGetHeight</span><span style="color:#24292E;">(client </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">client.Client, namespaceID namespace.ID, payLoad [</span></span>
<span class="line"><span style="color:#24292E;">]</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">, fee cosmosmath.Int, gasLimit </span><span style="color:#D73A49;">uint64</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">uint64</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        response, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> client.State.</span><span style="color:#005CC5;">SubmitPayForBlob</span><span style="color:#24292E;">(context.</span><span style="color:#005CC5;">Background</span><span style="color:#24292E;">(), namespa</span></span>
<span class="line"><span style="color:#24292E;">ceID, payLoad, fee, gasLimit)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                log.</span><span style="color:#005CC5;">Fatalf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Error submitting pay for blob: </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Got output: </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, response)</span></span>
<span class="line"><span style="color:#24292E;">        height </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">uint64</span><span style="color:#24292E;">(response.Height)</span></span>
<span class="line"><span style="color:#24292E;">        fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Height that data was submitted at: </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, height)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> height</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>In the function <code>postDataAndGetHeight</code>, we show you how to submit a message to a specific namespace ID provided on Celestia. After a successful submission, the function returns back to you the block height it was submitted at.</p><p>Next, implement the following function:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getDataAsPrompt</span><span style="color:#E1E4E8;">(client </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;">client.Client, height </span><span style="color:#F97583;">uint64</span><span style="color:#E1E4E8;">, namespaceID namespace.ID)</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        headerParam </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">getHeader</span><span style="color:#E1E4E8;">(client, height)</span></span>
<span class="line"><span style="color:#E1E4E8;">        response, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> client.Share.</span><span style="color:#79B8FF;">GetSharesByNamespace</span><span style="color:#E1E4E8;">(context.</span><span style="color:#79B8FF;">Background</span><span style="color:#E1E4E8;">(), hea</span></span>
<span class="line"><span style="color:#E1E4E8;">derParam.DAH, namespaceID)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                log.</span><span style="color:#79B8FF;">Fatalf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Error getting shares by namespace data for block height:</span></span>
<span class="line"><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">. Error is </span><span style="color:#79B8FF;">%v</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, height, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> dataString </span><span style="color:#F97583;">string</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> _, shares </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">range</span><span style="color:#E1E4E8;"> response {</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> _, share </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">range</span><span style="color:#E1E4E8;"> shares.Shares {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        dataString </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">(share[</span><span style="color:#79B8FF;">8</span><span style="color:#E1E4E8;">:])</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> dataString</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getDataAsPrompt</span><span style="color:#24292E;">(client </span><span style="color:#D73A49;">*</span><span style="color:#24292E;">client.Client, height </span><span style="color:#D73A49;">uint64</span><span style="color:#24292E;">, namespaceID namespace.ID)</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        headerParam </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getHeader</span><span style="color:#24292E;">(client, height)</span></span>
<span class="line"><span style="color:#24292E;">        response, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> client.Share.</span><span style="color:#005CC5;">GetSharesByNamespace</span><span style="color:#24292E;">(context.</span><span style="color:#005CC5;">Background</span><span style="color:#24292E;">(), hea</span></span>
<span class="line"><span style="color:#24292E;">derParam.DAH, namespaceID)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                log.</span><span style="color:#005CC5;">Fatalf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Error getting shares by namespace data for block height:</span></span>
<span class="line"><span style="color:#032F62;"> </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;">. Error is </span><span style="color:#005CC5;">%v</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, height, err)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> dataString </span><span style="color:#D73A49;">string</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> _, shares </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> response {</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> _, share </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">range</span><span style="color:#24292E;"> shares.Shares {</span></span>
<span class="line"><span style="color:#24292E;">                        dataString </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">(share[</span><span style="color:#005CC5;">8</span><span style="color:#24292E;">:])</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> dataString</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>In the function <code>getDataAsPrompt</code>, we show a helpful function that given a particular block height and a namespace ID, it can return back the block data (called shares here) which we then convert to a string and return it back.</p><p>Finally, we implement a GPT-3.5 helper function that given a prompt, it returns back a statement:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// gpt3 processes a given message using GPT-3 and prints the response.</span></span>
<span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">gpt3</span><span style="color:#E1E4E8;">(msg </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Set the authentication header</span></span>
<span class="line"><span style="color:#E1E4E8;">        openAIKey </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> os.</span><span style="color:#79B8FF;">Getenv</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;OPENAI_KEY&quot;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        client </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> openai.</span><span style="color:#79B8FF;">NewClient</span><span style="color:#E1E4E8;">(openAIKey)</span></span>
<span class="line"><span style="color:#E1E4E8;">        resp, err </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> client.</span><span style="color:#79B8FF;">CreateChatCompletion</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">                context.</span><span style="color:#79B8FF;">Background</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">                openai.ChatCompletionRequest{</span></span>
<span class="line"><span style="color:#E1E4E8;">                        Model: openai.GPT3Dot5Turbo,</span></span>
<span class="line"><span style="color:#E1E4E8;">                        Messages: []openai.ChatCompletionMessage{</span></span>
<span class="line"><span style="color:#E1E4E8;">                                {</span></span>
<span class="line"><span style="color:#E1E4E8;">                                        Role:    openai.ChatMessageRoleUser,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                        Content: msg,</span></span>
<span class="line"><span style="color:#E1E4E8;">                                },</span></span>
<span class="line"><span style="color:#E1E4E8;">                        },</span></span>
<span class="line"><span style="color:#E1E4E8;">                },</span></span>
<span class="line"><span style="color:#E1E4E8;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> err </span><span style="color:#F97583;">!=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nil</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                fmt.</span><span style="color:#79B8FF;">Printf</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;ChatCompletion error: </span><span style="color:#79B8FF;">%v\\n</span><span style="color:#9ECBFF;">&quot;</span><span style="color:#E1E4E8;">, err)</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">return</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        fmt.</span><span style="color:#79B8FF;">Println</span><span style="color:#E1E4E8;">(resp.Choices[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].Message.Content)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// gpt3 processes a given message using GPT-3 and prints the response.</span></span>
<span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">gpt3</span><span style="color:#24292E;">(msg </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Set the authentication header</span></span>
<span class="line"><span style="color:#24292E;">        openAIKey </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> os.</span><span style="color:#005CC5;">Getenv</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;OPENAI_KEY&quot;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        client </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> openai.</span><span style="color:#005CC5;">NewClient</span><span style="color:#24292E;">(openAIKey)</span></span>
<span class="line"><span style="color:#24292E;">        resp, err </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> client.</span><span style="color:#005CC5;">CreateChatCompletion</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">                context.</span><span style="color:#005CC5;">Background</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">                openai.ChatCompletionRequest{</span></span>
<span class="line"><span style="color:#24292E;">                        Model: openai.GPT3Dot5Turbo,</span></span>
<span class="line"><span style="color:#24292E;">                        Messages: []openai.ChatCompletionMessage{</span></span>
<span class="line"><span style="color:#24292E;">                                {</span></span>
<span class="line"><span style="color:#24292E;">                                        Role:    openai.ChatMessageRoleUser,</span></span>
<span class="line"><span style="color:#24292E;">                                        Content: msg,</span></span>
<span class="line"><span style="color:#24292E;">                                },</span></span>
<span class="line"><span style="color:#24292E;">                        },</span></span>
<span class="line"><span style="color:#24292E;">                },</span></span>
<span class="line"><span style="color:#24292E;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> err </span><span style="color:#D73A49;">!=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nil</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">                fmt.</span><span style="color:#005CC5;">Printf</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;ChatCompletion error: </span><span style="color:#005CC5;">%v\\n</span><span style="color:#032F62;">&quot;</span><span style="color:#24292E;">, err)</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">return</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        fmt.</span><span style="color:#005CC5;">Println</span><span style="color:#24292E;">(resp.Choices[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].Message.Content)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="wrapping-up-the-functions" tabindex="-1">Wrapping up the functions <a class="header-anchor" href="#wrapping-up-the-functions" aria-label="Permalink to &quot;Wrapping up the functions&quot;">​</a></h3><p>Now, we will update our <code>main</code>function to include the logic from the functions we built where we show you how to do the following:</p><ul><li>Instantiate namespace ID, fee, gas limit and GPT prompt</li><li>Submit the GPT prompt as a PayForBlob transaction and then get back the Block Height</li><li>Get Back the Prompt from that Block Height as a Data Share and convert it to a string and return it</li><li>Submit that string to the GPT function to get a prompt output</li></ul><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">func</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">        ctx, cancel </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> context.</span><span style="color:#79B8FF;">WithCancel</span><span style="color:#E1E4E8;">(context.</span><span style="color:#79B8FF;">Background</span><span style="color:#E1E4E8;">())</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">defer</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cancel</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">loadEnv</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> namespaceID namespace.ID </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">createNamespaceID</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">        client </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">createClient</span><span style="color:#E1E4E8;">(ctx)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> gasLimit </span><span style="color:#F97583;">uint64</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6000000</span></span>
<span class="line"><span style="color:#E1E4E8;">        fee </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> cosmosmath.</span><span style="color:#79B8FF;">NewInt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> gptPrompt </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;What are modular blockchains?&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">        prompt </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> []</span><span style="color:#F97583;">byte</span><span style="color:#E1E4E8;">{</span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">00</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">01</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">0x</span><span style="color:#79B8FF;">02</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">        prompt </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">append</span><span style="color:#E1E4E8;">(prompt, []</span><span style="color:#79B8FF;">byte</span><span style="color:#E1E4E8;">(gptPrompt)</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        height </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">postDataAndGetHeight</span><span style="color:#E1E4E8;">(client, namespaceID, prompt, fee, gasLimit)</span></span>
<span class="line"><span style="color:#E1E4E8;">        promptString </span><span style="color:#F97583;">:=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">getDataAsPrompt</span><span style="color:#E1E4E8;">(client, height, namespaceID)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">gpt3</span><span style="color:#E1E4E8;">(promptString)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Close the client when you are finished</span></span>
<span class="line"><span style="color:#E1E4E8;">        client.</span><span style="color:#79B8FF;">Close</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">func</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">        ctx, cancel </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> context.</span><span style="color:#005CC5;">WithCancel</span><span style="color:#24292E;">(context.</span><span style="color:#005CC5;">Background</span><span style="color:#24292E;">())</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">defer</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">cancel</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">loadEnv</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> namespaceID namespace.ID </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">createNamespaceID</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">        client </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">createClient</span><span style="color:#24292E;">(ctx)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> gasLimit </span><span style="color:#D73A49;">uint64</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6000000</span></span>
<span class="line"><span style="color:#24292E;">        fee </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> cosmosmath.</span><span style="color:#005CC5;">NewInt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> gptPrompt </span><span style="color:#D73A49;">string</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;What are modular blockchains?&quot;</span></span>
<span class="line"><span style="color:#24292E;">        prompt </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> []</span><span style="color:#D73A49;">byte</span><span style="color:#24292E;">{</span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">00</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">01</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">0x</span><span style="color:#005CC5;">02</span><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">        prompt </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">append</span><span style="color:#24292E;">(prompt, []</span><span style="color:#005CC5;">byte</span><span style="color:#24292E;">(gptPrompt)</span><span style="color:#D73A49;">...</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        height </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">postDataAndGetHeight</span><span style="color:#24292E;">(client, namespaceID, prompt, fee, gasLimit)</span></span>
<span class="line"><span style="color:#24292E;">        promptString </span><span style="color:#D73A49;">:=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getDataAsPrompt</span><span style="color:#24292E;">(client, height, namespaceID)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">gpt3</span><span style="color:#24292E;">(promptString)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Close the client when you are finished</span></span>
<span class="line"><span style="color:#24292E;">        client.</span><span style="color:#005CC5;">Close</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>And now you have the final version of the game!</p><p>Run the golang script with the following command:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">go</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">main.go</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">go</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">main.go</span></span></code></pre></div><p>After some time, it’ll post the output of the prompt you submitted to OpenAI that you pulled from Celestia’s blockchain.</p><h2 id="next-steps" tabindex="-1">Next steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next steps&quot;">​</a></h2><p>With this tutorial, you were able to construct a PFB transaction, submit it to Celestia, get it back from Celestia and decode its contents, then for added bonus, submit the message to GPT-3.5.</p><p>For the next steps, we will be releasing quests to this tutorial where users will need to complete challenges that help familiarize them with the Celestia Data Availability layer.</p>`,77),e=[o];function t(c,r,E,y,i,d){return n(),a("div",null,e)}const u=s(p,[["render",t]]);export{F as __pageData,u as default};
